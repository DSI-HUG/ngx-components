"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[622],{"./projects/story-book/src/numeric-stepper/numeric-stepper.stories.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{__namedExportsOrder:()=>__namedExportsOrder,appearance:()=>appearance,customArrowIcons:()=>customArrowIcons,default:()=>__WEBPACK_DEFAULT_EXPORT__,layout:()=>layout,prefixAndSuffix:()=>prefixAndSuffix,showOnInit:()=>showOnInit,standard:()=>standard});var _angular_forms__WEBPACK_IMPORTED_MODULE_5__=__webpack_require__("./node_modules/@angular/forms/fesm2022/forms.mjs"),_angular_material_button_toggle__WEBPACK_IMPORTED_MODULE_6__=__webpack_require__("./node_modules/@angular/material/fesm2022/button-toggle.mjs"),_angular_material_form_field__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__("./node_modules/@angular/material/fesm2022/form-field.mjs"),_angular_material_input__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__("./node_modules/@angular/material/fesm2022/input.mjs"),_angular_platform_browser_animations__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./node_modules/@angular/platform-browser/fesm2022/animations.mjs"),_storybook_angular__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/@storybook/angular/dist/index.mjs");const __WEBPACK_DEFAULT_EXPORT__={title:"Components/Numeric Stepper",component:__webpack_require__("./projects/numeric-stepper/src/numeric-stepper.component.ts").Z,decorators:[(0,_storybook_angular__WEBPACK_IMPORTED_MODULE_0__.applicationConfig)({providers:[(0,_angular_platform_browser_animations__WEBPACK_IMPORTED_MODULE_2__.provideAnimations)()]}),(0,_storybook_angular__WEBPACK_IMPORTED_MODULE_0__.moduleMetadata)({imports:[_angular_material_form_field__WEBPACK_IMPORTED_MODULE_3__.nJ,_angular_material_input__WEBPACK_IMPORTED_MODULE_4__.fg,_angular_material_form_field__WEBPACK_IMPORTED_MODULE_3__.JW,_angular_material_form_field__WEBPACK_IMPORTED_MODULE_3__.yw,_angular_material_form_field__WEBPACK_IMPORTED_MODULE_3__.rl,_angular_forms__WEBPACK_IMPORTED_MODULE_5__.YN]})],tags:["autodocs"],argTypes:{layout:{options:["vertical","horizontal","horizontal-inlay"],control:{type:"select"},description:"Layout of the stepper control.",table:{defaultValue:{summary:"vertical"},type:{summary:"NgxNumericStepperLayout"}}},arrowIcons:{control:{type:"boolean"},description:"Whether to show arrow icons.",table:{defaultValue:{summary:"false"},type:{summary:"boolean"}}},showOnInit:{control:{type:"boolean"},description:"Whether to show the stepper on initialization.",table:{defaultValue:{summary:"false"},type:{summary:"boolean"}}},input:{control:{type:"object"},description:"The form field control input to be used.",table:{defaultValue:{summary:void 0},type:{summary:"MatFormFieldControl<unknown>"}}}},args:{layout:"vertical"},parameters:{docs:{description:{component:"The `NgxNumericStepperComponent` integrates with a `mat-form-field` containing an input. It provides a hover mask to allow custom increments or decrements using the `+` and `-` buttons. It can be configured with various layouts and options."}}}},standard={render:args=>({props:{...args,value:115,appearance:"outline"},template:'\n            <section>\n                <div ngx-numeric-stepper-container>\n                    <mat-form-field [appearance]="appearance">\n                        <mat-label>This is my label</mat-label>\n                        <input matInput type="number" [ngModel]="value" #numericStepper="ngModel" />\n                        <ngx-numeric-stepper (increment)="value = value + 5" (decrement)="value = value - 5" [layout]="layout" [arrowIcons]="arrowIcons" [showOnInit]="showOnInit" [input]="input" showOnInit></ngx-numeric-stepper>\n                    </mat-form-field>\n                </div>\n            </section>\n          ',styles:["\n            section {\n                background-color: white;\n            }\n          "]})},layout={parameters:{docs:{description:{story:"This component supports several layouts: <ul><li><code>vertical</code></li><li><code>horizontal</code></li><li><code>horizontal-inlay</code></li></ul>"}}},render:args=>({props:{...args,value:115},template:'\n            <section>\n                <div class="grouped">\n                    <div ngx-numeric-stepper-container>\n                        <mat-form-field appearance="outline">\n                            <mat-label>vertical layout</mat-label>\n                            <input matInput type="number" [ngModel]="value" #numericStepper="ngModel" />\n                            <ngx-numeric-stepper (increment)="value = value + 5" (decrement)="value = value - 5" layout="vertical" showOnInit></ngx-numeric-stepper>\n                        </mat-form-field>\n                    </div>\n                     <div ngx-numeric-stepper-container>\n                        <mat-form-field appearance="fill">\n                            <mat-label>vertical layout</mat-label>\n                            <input matInput type="number" [ngModel]="value" #numericStepper="ngModel" />\n                            <ngx-numeric-stepper (increment)="value = value + 5" (decrement)="value = value - 5" layout="vertical" showOnInit></ngx-numeric-stepper>\n                        </mat-form-field>\n                    </div>\n                </div>\n                <br />\n                <div class="grouped">\n                    <div ngx-numeric-stepper-container>\n                        <mat-form-field appearance="outline">\n                            <mat-label>horizontal layout</mat-label>\n                            <input matInput type="number" [ngModel]="value" #numericStepper="ngModel" />\n                            <ngx-numeric-stepper (increment)="value = value + 5" (decrement)="value = value - 5" layout="horizontal" showOnInit></ngx-numeric-stepper>\n                        </mat-form-field>\n                    </div>\n                    <div ngx-numeric-stepper-container>\n                        <mat-form-field appearance="fill">\n                            <mat-label>horizontal layout</mat-label>\n                            <input matInput type="number" [ngModel]="value" #numericStepper="ngModel" />\n                            <ngx-numeric-stepper (increment)="value = value + 5" (decrement)="value = value - 5" layout="horizontal" showOnInit></ngx-numeric-stepper>\n                        </mat-form-field>\n                    </div>\n                </div>\n                <br />\n                <div class="grouped">\n                    <div ngx-numeric-stepper-container>\n                        <mat-form-field appearance="outline">\n                            <mat-label>horizontal-inlay layout</mat-label>\n                            <input matInput type="number" [ngModel]="value" #numericStepper="ngModel" />\n                            <ngx-numeric-stepper (increment)="value = value + 5" (decrement)="value = value - 5" layout="horizontal-inlay" showOnInit></ngx-numeric-stepper>\n                        </mat-form-field>\n                    </div>\n                    <div ngx-numeric-stepper-container>\n                        <mat-form-field appearance="fill">\n                            <mat-label>horizontal-inlay layout</mat-label>\n                            <input matInput type="number" [ngModel]="value" #numericStepper="ngModel" />\n                            <ngx-numeric-stepper (increment)="value = value + 5" (decrement)="value = value - 5" layout="horizontal-inlay" showOnInit></ngx-numeric-stepper>\n                        </mat-form-field>\n                    </div>\n                </div>\n            </section>\n          ',styles:["\n            section {\n                background-color: white;\n            }\n            .matButtonContainer {\n                padding-top: 20px;\n                display: flex;\n                justify-content: center;\n            }\n            .grouped {\n                display: flex;\n                gap: 5rem;\n            }\n          "]}),args:{layout:"vertical"}},customArrowIcons={render:args=>({props:{...args,value:115,appearance:"outline"},template:'\n            <section>\n                <div ngx-numeric-stepper-container>\n                    <mat-form-field [appearance]="appearance">\n                <mat-label>Custom Arrow Icons</mat-label>\n                        <input matInput type="number" [ngModel]="value" #numericStepper="ngModel" />\n                        <ngx-numeric-stepper (increment)="value = value + 5" (decrement)="value = value - 5" [layout]="layout" [arrowIcons]="arrowIcons" [showOnInit]="showOnInit" [input]="input" showOnInit></ngx-numeric-stepper>\n                    </mat-form-field>\n                </div>\n            </section>\n          ',styles:["\n            section {\n                background-color: white;\n            }\n          "]}),args:{arrowIcons:!0}},showOnInit={tags:["!dev","!autodocs"],render:args=>({props:{...args,value:115,appearance:"outline"},template:'\n            <section>\n                <div ngx-numeric-stepper-container>\n                    <mat-form-field [appearance]="appearance">\n                <mat-label>Show On Init True</mat-label>\n                        <input matInput type="number" [ngModel]="value" #numericStepper="ngModel" />\n                        <ngx-numeric-stepper (increment)="value = value + 5" (decrement)="value = value - 5" [layout]="layout" [arrowIcons]="arrowIcons" [showOnInit]="showOnInit" [input]="input" showOnInit></ngx-numeric-stepper>\n                    </mat-form-field>\n                </div>\n            </section>\n          ',styles:["\n            section {\n                background-color: white;\n            }\n          "]}),args:{showOnInit:!0}},appearance={decorators:[(0,_storybook_angular__WEBPACK_IMPORTED_MODULE_0__.moduleMetadata)({imports:[_angular_material_button_toggle__WEBPACK_IMPORTED_MODULE_6__.pc,_angular_material_button_toggle__WEBPACK_IMPORTED_MODULE_6__.ec]})],parameters:{docs:{description:{story:"This component supports different appearances for `mat-form-field`."}}},render:args=>({props:{...args,value:115,appearance:"fill",appearanceChanged(value){this.appearance=value}},template:'\n            <section>\n                <div ngx-numeric-stepper-container>\n                    <mat-form-field [appearance]="appearance">\n                        <mat-label>This is my label</mat-label>\n                        <input matInput type="number" [ngModel]="value" #numericStepper="ngModel" />\n                        <ngx-numeric-stepper (increment)="value = value + 5" (decrement)="value = value - 5" [layout]="layout" showOnInit></ngx-numeric-stepper>\n                    </mat-form-field>\n                </div>\n                <div class="matButtonContainer">\n                    <mat-button-toggle-group name="appearance" hideSingleSelectionIndicator="true" (change)="appearanceChanged($event.value)" [value]="appearance">\n                        <mat-button-toggle value="fill">Fill</mat-button-toggle>\n                        <mat-button-toggle value="outline">Outline</mat-button-toggle>\n                    </mat-button-toggle-group>\n                </div>\n            </section>\n          ',styles:["\n            section {\n                background-color: white;\n            }\n            .matButtonContainer {\n                padding-top: 20px;\n                display: flex;\n                justify-content: center;\n            }\n          "]})},prefixAndSuffix={parameters:{docs:{description:{story:"This section allows you to visualize the component with different `mat-form-field` configurations, including custom prefixes and suffixes."}}},render:args=>({props:{...args,value:115,prefix:"",suffix:"cm",prefixChanged(value){this.prefix=value},suffixChanged(value){this.suffix=value}},template:'\n            <section>\n                <div class="grouped">\n                    <div ngx-numeric-stepper-container>\n                        <mat-form-field appearance="outline">\n                            <mat-label>vertical layout</mat-label>\n                            @if(prefix) {\n                                <span matTextPrefix>{{ prefix }}</span>\n                            }\n                            <input matInput type="number" [ngModel]="value" #numericStepper="ngModel" />\n                            @if(suffix) {\n                                <span matTextSuffix>{{ suffix }}</span>\n                            }\n                            <ngx-numeric-stepper (increment)="value = value + 5" (decrement)="value = value - 5" layout="vertical" showOnInit></ngx-numeric-stepper>\n                        </mat-form-field>\n                    </div>\n                     <div ngx-numeric-stepper-container>\n                        <mat-form-field appearance="fill">\n                            <mat-label>vertical layout</mat-label>\n                            @if(prefix) {\n                                <span matTextPrefix>{{ prefix }}</span>\n                            }\n                            <input matInput type="number" [ngModel]="value" #numericStepper="ngModel" />\n                            @if(suffix) {\n                                <span matTextSuffix>{{ suffix }}</span>\n                            }\n                            <ngx-numeric-stepper (increment)="value = value + 5" (decrement)="value = value - 5" layout="vertical" showOnInit></ngx-numeric-stepper>\n                        </mat-form-field>\n                    </div>\n                </div>\n                <br />\n                <div class="grouped">\n                    <div ngx-numeric-stepper-container>\n                        <mat-form-field appearance="outline">\n                            <mat-label>horizontal layout</mat-label>\n                            @if(prefix) {\n                                <span matTextPrefix>{{ prefix }}</span>\n                            }\n                            <input matInput type="number" [ngModel]="value" #numericStepper="ngModel" />\n                            @if(suffix) {\n                                <span matTextSuffix>{{ suffix }}</span>\n                            }\n                            <ngx-numeric-stepper (increment)="value = value + 5" (decrement)="value = value - 5" layout="horizontal" showOnInit></ngx-numeric-stepper>\n                        </mat-form-field>\n                    </div>\n                    <div ngx-numeric-stepper-container>\n                        <mat-form-field appearance="fill">\n                            <mat-label>horizontal layout</mat-label>\n                            @if(prefix) {\n                                <span matTextPrefix>{{ prefix }}</span>\n                            }\n                            <input matInput type="number" [ngModel]="value" #numericStepper="ngModel" />\n                            @if(suffix) {\n                                <span matTextSuffix>{{ suffix }}</span>\n                            }\n                            <ngx-numeric-stepper (increment)="value = value + 5" (decrement)="value = value - 5" layout="horizontal" showOnInit></ngx-numeric-stepper>\n                        </mat-form-field>\n                    </div>\n                </div>\n                <br />\n                <div class="grouped">\n                    <div ngx-numeric-stepper-container>\n                        <mat-form-field appearance="outline">\n                            <mat-label>horizontal-inlay layout</mat-label>\n                            @if(prefix) {\n                                <span matTextPrefix>{{ prefix }}</span>\n                            }\n                            <input matInput type="number" [ngModel]="value" #numericStepper="ngModel" />\n                            @if(suffix) {\n                                <span matTextSuffix>{{ suffix }}</span>\n                            }\n                            <ngx-numeric-stepper (increment)="value = value + 5" (decrement)="value = value - 5" layout="horizontal-inlay" showOnInit></ngx-numeric-stepper>\n                        </mat-form-field>\n                    </div>\n                    <div ngx-numeric-stepper-container>\n                        <mat-form-field appearance="fill">\n                            <mat-label>horizontal-inlay layout</mat-label>\n                            @if(prefix) {\n                                <span matTextPrefix>{{ prefix }}</span>\n                            }\n                            <input matInput type="number" [ngModel]="value" #numericStepper="ngModel" />\n                            @if(suffix) {\n                                <span matTextSuffix>{{ suffix }}</span>\n                            }\n                            <ngx-numeric-stepper (increment)="value = value + 5" (decrement)="value = value - 5" layout="horizontal-inlay" showOnInit></ngx-numeric-stepper>\n                        </mat-form-field>\n                    </div>\n                </div>\n                <br />\n                <h4>Try your own suffixes and prefixes</h4>\n                <br />\n                <div class="grouped">\n                        <mat-form-field appearance="outline">\n                            <mat-label>prefix</mat-label>\n                            <input matInput type="string" [ngModel]="prefix" (ngModelChange)="prefixChanged($event)" />\n                        </mat-form-field>\n                        <mat-form-field appearance="outline">\n                            <mat-label>suffix</mat-label>\n                            <input matInput type="string" [ngModel]="suffix" (ngModelChange)="suffixChanged($event)" />\n                        </mat-form-field>\n                </div>\n            </section>\n          ',styles:["\n            section {\n                background-color: white;\n                font-family: 'Roboto';\n            }\n            .matButtonContainer {\n                padding-top: 20px;\n                display: flex;\n                justify-content: center;\n            }\n            .grouped {\n                display: flex;\n                gap: 5rem;\n            }\n          "]}),args:{layout:"vertical"}},__namedExportsOrder=["standard","layout","customArrowIcons","showOnInit","appearance","prefixAndSuffix"];standard.parameters={...standard.parameters,docs:{...standard.parameters?.docs,source:{originalSource:'{\n  render: args => ({\n    props: {\n      ...args,\n      value: 115,\n      appearance: \'outline\'\n    },\n    template: `\n            <section>\n                <div ngx-numeric-stepper-container>\n                    <mat-form-field [appearance]="appearance">\n                        <mat-label>This is my label</mat-label>\n                        <input matInput type="number" [ngModel]="value" #numericStepper="ngModel" />\n                        <ngx-numeric-stepper (increment)="value = value + 5" (decrement)="value = value - 5" [layout]="layout" [arrowIcons]="arrowIcons" [showOnInit]="showOnInit" [input]="input" showOnInit></ngx-numeric-stepper>\n                    </mat-form-field>\n                </div>\n            </section>\n          `,\n    styles: [`\n            section {\n                background-color: white;\n            }\n          `]\n  })\n}',...standard.parameters?.docs?.source}}},layout.parameters={...layout.parameters,docs:{...layout.parameters?.docs,source:{originalSource:'{\n  parameters: {\n    docs: {\n      description: {\n        story: \'This component supports several layouts: <ul><li><code>vertical</code></li><li><code>horizontal</code></li><li><code>horizontal-inlay</code></li></ul>\'\n      }\n    }\n  },\n  render: args => ({\n    props: {\n      ...args,\n      value: 115\n    },\n    template: `\n            <section>\n                <div class="grouped">\n                    <div ngx-numeric-stepper-container>\n                        <mat-form-field appearance="outline">\n                            <mat-label>vertical layout</mat-label>\n                            <input matInput type="number" [ngModel]="value" #numericStepper="ngModel" />\n                            <ngx-numeric-stepper (increment)="value = value + 5" (decrement)="value = value - 5" layout="vertical" showOnInit></ngx-numeric-stepper>\n                        </mat-form-field>\n                    </div>\n                     <div ngx-numeric-stepper-container>\n                        <mat-form-field appearance="fill">\n                            <mat-label>vertical layout</mat-label>\n                            <input matInput type="number" [ngModel]="value" #numericStepper="ngModel" />\n                            <ngx-numeric-stepper (increment)="value = value + 5" (decrement)="value = value - 5" layout="vertical" showOnInit></ngx-numeric-stepper>\n                        </mat-form-field>\n                    </div>\n                </div>\n                <br />\n                <div class="grouped">\n                    <div ngx-numeric-stepper-container>\n                        <mat-form-field appearance="outline">\n                            <mat-label>horizontal layout</mat-label>\n                            <input matInput type="number" [ngModel]="value" #numericStepper="ngModel" />\n                            <ngx-numeric-stepper (increment)="value = value + 5" (decrement)="value = value - 5" layout="horizontal" showOnInit></ngx-numeric-stepper>\n                        </mat-form-field>\n                    </div>\n                    <div ngx-numeric-stepper-container>\n                        <mat-form-field appearance="fill">\n                            <mat-label>horizontal layout</mat-label>\n                            <input matInput type="number" [ngModel]="value" #numericStepper="ngModel" />\n                            <ngx-numeric-stepper (increment)="value = value + 5" (decrement)="value = value - 5" layout="horizontal" showOnInit></ngx-numeric-stepper>\n                        </mat-form-field>\n                    </div>\n                </div>\n                <br />\n                <div class="grouped">\n                    <div ngx-numeric-stepper-container>\n                        <mat-form-field appearance="outline">\n                            <mat-label>horizontal-inlay layout</mat-label>\n                            <input matInput type="number" [ngModel]="value" #numericStepper="ngModel" />\n                            <ngx-numeric-stepper (increment)="value = value + 5" (decrement)="value = value - 5" layout="horizontal-inlay" showOnInit></ngx-numeric-stepper>\n                        </mat-form-field>\n                    </div>\n                    <div ngx-numeric-stepper-container>\n                        <mat-form-field appearance="fill">\n                            <mat-label>horizontal-inlay layout</mat-label>\n                            <input matInput type="number" [ngModel]="value" #numericStepper="ngModel" />\n                            <ngx-numeric-stepper (increment)="value = value + 5" (decrement)="value = value - 5" layout="horizontal-inlay" showOnInit></ngx-numeric-stepper>\n                        </mat-form-field>\n                    </div>\n                </div>\n            </section>\n          `,\n    styles: [`\n            section {\n                background-color: white;\n            }\n            .matButtonContainer {\n                padding-top: 20px;\n                display: flex;\n                justify-content: center;\n            }\n            .grouped {\n                display: flex;\n                gap: 5rem;\n            }\n          `]\n  }),\n  args: {\n    layout: \'vertical\'\n  }\n}',...layout.parameters?.docs?.source}}},customArrowIcons.parameters={...customArrowIcons.parameters,docs:{...customArrowIcons.parameters?.docs,source:{originalSource:'{\n  render: args => ({\n    props: {\n      ...args,\n      value: 115,\n      appearance: \'outline\'\n    },\n    template: `\n            <section>\n                <div ngx-numeric-stepper-container>\n                    <mat-form-field [appearance]="appearance">\n                <mat-label>Custom Arrow Icons</mat-label>\n                        <input matInput type="number" [ngModel]="value" #numericStepper="ngModel" />\n                        <ngx-numeric-stepper (increment)="value = value + 5" (decrement)="value = value - 5" [layout]="layout" [arrowIcons]="arrowIcons" [showOnInit]="showOnInit" [input]="input" showOnInit></ngx-numeric-stepper>\n                    </mat-form-field>\n                </div>\n            </section>\n          `,\n    styles: [`\n            section {\n                background-color: white;\n            }\n          `]\n  }),\n  args: {\n    arrowIcons: true\n  }\n}',...customArrowIcons.parameters?.docs?.source}}},showOnInit.parameters={...showOnInit.parameters,docs:{...showOnInit.parameters?.docs,source:{originalSource:'{\n  tags: [\'!dev\', \'!autodocs\'],\n  // Pour disable sur le menu à gauche !dev, et sur la doc !autodocs\n  render: args => ({\n    props: {\n      ...args,\n      value: 115,\n      appearance: \'outline\'\n    },\n    template: `\n            <section>\n                <div ngx-numeric-stepper-container>\n                    <mat-form-field [appearance]="appearance">\n                <mat-label>Show On Init True</mat-label>\n                        <input matInput type="number" [ngModel]="value" #numericStepper="ngModel" />\n                        <ngx-numeric-stepper (increment)="value = value + 5" (decrement)="value = value - 5" [layout]="layout" [arrowIcons]="arrowIcons" [showOnInit]="showOnInit" [input]="input" showOnInit></ngx-numeric-stepper>\n                    </mat-form-field>\n                </div>\n            </section>\n          `,\n    styles: [`\n            section {\n                background-color: white;\n            }\n          `]\n  }),\n  args: {\n    showOnInit: true\n  }\n}',...showOnInit.parameters?.docs?.source}}},appearance.parameters={...appearance.parameters,docs:{...appearance.parameters?.docs,source:{originalSource:'{\n  decorators: [moduleMetadata({\n    imports: [MatButtonToggle, MatButtonToggleGroup]\n  })],\n  parameters: {\n    docs: {\n      description: {\n        story: \'This component supports different appearances for `mat-form-field`.\'\n      }\n    }\n  },\n  render: args => ({\n    props: {\n      ...args,\n      value: 115,\n      appearance: \'fill\',\n      appearanceChanged(value: string): void {\n        this[\'appearance\'] = value;\n      }\n    },\n    template: `\n            <section>\n                <div ngx-numeric-stepper-container>\n                    <mat-form-field [appearance]="appearance">\n                        <mat-label>This is my label</mat-label>\n                        <input matInput type="number" [ngModel]="value" #numericStepper="ngModel" />\n                        <ngx-numeric-stepper (increment)="value = value + 5" (decrement)="value = value - 5" [layout]="layout" showOnInit></ngx-numeric-stepper>\n                    </mat-form-field>\n                </div>\n                <div class="matButtonContainer">\n                    <mat-button-toggle-group name="appearance" hideSingleSelectionIndicator="true" (change)="appearanceChanged($event.value)" [value]="appearance">\n                        <mat-button-toggle value="fill">Fill</mat-button-toggle>\n                        <mat-button-toggle value="outline">Outline</mat-button-toggle>\n                    </mat-button-toggle-group>\n                </div>\n            </section>\n          `,\n    styles: [`\n            section {\n                background-color: white;\n            }\n            .matButtonContainer {\n                padding-top: 20px;\n                display: flex;\n                justify-content: center;\n            }\n          `]\n  })\n}',...appearance.parameters?.docs?.source}}},prefixAndSuffix.parameters={...prefixAndSuffix.parameters,docs:{...prefixAndSuffix.parameters?.docs,source:{originalSource:'{\n  parameters: {\n    docs: {\n      description: {\n        story: \'This section allows you to visualize the component with different `mat-form-field` configurations, including custom prefixes and suffixes.\'\n      }\n    }\n  },\n  render: args => ({\n    props: {\n      ...args,\n      value: 115,\n      prefix: \'\',\n      suffix: \'cm\',\n      prefixChanged(value: string): void {\n        this[\'prefix\'] = value;\n      },\n      suffixChanged(value: string): void {\n        this[\'suffix\'] = value;\n      }\n    },\n    template: `\n            <section>\n                <div class="grouped">\n                    <div ngx-numeric-stepper-container>\n                        <mat-form-field appearance="outline">\n                            <mat-label>vertical layout</mat-label>\n                            @if(prefix) {\n                                <span matTextPrefix>{{ prefix }}</span>\n                            }\n                            <input matInput type="number" [ngModel]="value" #numericStepper="ngModel" />\n                            @if(suffix) {\n                                <span matTextSuffix>{{ suffix }}</span>\n                            }\n                            <ngx-numeric-stepper (increment)="value = value + 5" (decrement)="value = value - 5" layout="vertical" showOnInit></ngx-numeric-stepper>\n                        </mat-form-field>\n                    </div>\n                     <div ngx-numeric-stepper-container>\n                        <mat-form-field appearance="fill">\n                            <mat-label>vertical layout</mat-label>\n                            @if(prefix) {\n                                <span matTextPrefix>{{ prefix }}</span>\n                            }\n                            <input matInput type="number" [ngModel]="value" #numericStepper="ngModel" />\n                            @if(suffix) {\n                                <span matTextSuffix>{{ suffix }}</span>\n                            }\n                            <ngx-numeric-stepper (increment)="value = value + 5" (decrement)="value = value - 5" layout="vertical" showOnInit></ngx-numeric-stepper>\n                        </mat-form-field>\n                    </div>\n                </div>\n                <br />\n                <div class="grouped">\n                    <div ngx-numeric-stepper-container>\n                        <mat-form-field appearance="outline">\n                            <mat-label>horizontal layout</mat-label>\n                            @if(prefix) {\n                                <span matTextPrefix>{{ prefix }}</span>\n                            }\n                            <input matInput type="number" [ngModel]="value" #numericStepper="ngModel" />\n                            @if(suffix) {\n                                <span matTextSuffix>{{ suffix }}</span>\n                            }\n                            <ngx-numeric-stepper (increment)="value = value + 5" (decrement)="value = value - 5" layout="horizontal" showOnInit></ngx-numeric-stepper>\n                        </mat-form-field>\n                    </div>\n                    <div ngx-numeric-stepper-container>\n                        <mat-form-field appearance="fill">\n                            <mat-label>horizontal layout</mat-label>\n                            @if(prefix) {\n                                <span matTextPrefix>{{ prefix }}</span>\n                            }\n                            <input matInput type="number" [ngModel]="value" #numericStepper="ngModel" />\n                            @if(suffix) {\n                                <span matTextSuffix>{{ suffix }}</span>\n                            }\n                            <ngx-numeric-stepper (increment)="value = value + 5" (decrement)="value = value - 5" layout="horizontal" showOnInit></ngx-numeric-stepper>\n                        </mat-form-field>\n                    </div>\n                </div>\n                <br />\n                <div class="grouped">\n                    <div ngx-numeric-stepper-container>\n                        <mat-form-field appearance="outline">\n                            <mat-label>horizontal-inlay layout</mat-label>\n                            @if(prefix) {\n                                <span matTextPrefix>{{ prefix }}</span>\n                            }\n                            <input matInput type="number" [ngModel]="value" #numericStepper="ngModel" />\n                            @if(suffix) {\n                                <span matTextSuffix>{{ suffix }}</span>\n                            }\n                            <ngx-numeric-stepper (increment)="value = value + 5" (decrement)="value = value - 5" layout="horizontal-inlay" showOnInit></ngx-numeric-stepper>\n                        </mat-form-field>\n                    </div>\n                    <div ngx-numeric-stepper-container>\n                        <mat-form-field appearance="fill">\n                            <mat-label>horizontal-inlay layout</mat-label>\n                            @if(prefix) {\n                                <span matTextPrefix>{{ prefix }}</span>\n                            }\n                            <input matInput type="number" [ngModel]="value" #numericStepper="ngModel" />\n                            @if(suffix) {\n                                <span matTextSuffix>{{ suffix }}</span>\n                            }\n                            <ngx-numeric-stepper (increment)="value = value + 5" (decrement)="value = value - 5" layout="horizontal-inlay" showOnInit></ngx-numeric-stepper>\n                        </mat-form-field>\n                    </div>\n                </div>\n                <br />\n                <h4>Try your own suffixes and prefixes</h4>\n                <br />\n                <div class="grouped">\n                        <mat-form-field appearance="outline">\n                            <mat-label>prefix</mat-label>\n                            <input matInput type="string" [ngModel]="prefix" (ngModelChange)="prefixChanged($event)" />\n                        </mat-form-field>\n                        <mat-form-field appearance="outline">\n                            <mat-label>suffix</mat-label>\n                            <input matInput type="string" [ngModel]="suffix" (ngModelChange)="suffixChanged($event)" />\n                        </mat-form-field>\n                </div>\n            </section>\n          `,\n    styles: [`\n            section {\n                background-color: white;\n                font-family: \'Roboto\';\n            }\n            .matButtonContainer {\n                padding-top: 20px;\n                display: flex;\n                justify-content: center;\n            }\n            .grouped {\n                display: flex;\n                gap: 5rem;\n            }\n          `]\n  }),\n  args: {\n    layout: \'vertical\'\n  }\n}',...prefixAndSuffix.parameters?.docs?.source}}}}}]);