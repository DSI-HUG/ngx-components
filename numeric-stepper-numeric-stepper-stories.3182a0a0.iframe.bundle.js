"use strict";(self.webpackChunkngx_components_workspace=self.webpackChunkngx_components_workspace||[]).push([[622],{"./node_modules/rxjs/dist/esm5/internal/observable/fromEvent.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{R:()=>fromEvent});var tslib__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./node_modules/tslib/tslib.es6.mjs"),_observable_innerFrom__WEBPACK_IMPORTED_MODULE_5__=__webpack_require__("./node_modules/rxjs/dist/esm5/internal/observable/innerFrom.js"),_Observable__WEBPACK_IMPORTED_MODULE_6__=__webpack_require__("./node_modules/rxjs/dist/esm5/internal/Observable.js"),_operators_mergeMap__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__("./node_modules/rxjs/dist/esm5/internal/operators/mergeMap.js"),_util_isArrayLike__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__("./node_modules/rxjs/dist/esm5/internal/util/isArrayLike.js"),_util_isFunction__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/rxjs/dist/esm5/internal/util/isFunction.js"),_util_mapOneOrManyArgs__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./node_modules/rxjs/dist/esm5/internal/util/mapOneOrManyArgs.js"),nodeEventEmitterMethods=["addListener","removeListener"],eventTargetMethods=["addEventListener","removeEventListener"],jqueryMethods=["on","off"];function fromEvent(target,eventName,options,resultSelector){if((0,_util_isFunction__WEBPACK_IMPORTED_MODULE_0__.T)(options)&&(resultSelector=options,options=void 0),resultSelector)return fromEvent(target,eventName,options).pipe((0,_util_mapOneOrManyArgs__WEBPACK_IMPORTED_MODULE_1__.I)(resultSelector));var _a=(0,tslib__WEBPACK_IMPORTED_MODULE_2__.zs)(function isEventTarget(target){return(0,_util_isFunction__WEBPACK_IMPORTED_MODULE_0__.T)(target.addEventListener)&&(0,_util_isFunction__WEBPACK_IMPORTED_MODULE_0__.T)(target.removeEventListener)}(target)?eventTargetMethods.map((function(methodName){return function(handler){return target[methodName](eventName,handler,options)}})):function isNodeStyleEventEmitter(target){return(0,_util_isFunction__WEBPACK_IMPORTED_MODULE_0__.T)(target.addListener)&&(0,_util_isFunction__WEBPACK_IMPORTED_MODULE_0__.T)(target.removeListener)}(target)?nodeEventEmitterMethods.map(toCommonHandlerRegistry(target,eventName)):function isJQueryStyleEventEmitter(target){return(0,_util_isFunction__WEBPACK_IMPORTED_MODULE_0__.T)(target.on)&&(0,_util_isFunction__WEBPACK_IMPORTED_MODULE_0__.T)(target.off)}(target)?jqueryMethods.map(toCommonHandlerRegistry(target,eventName)):[],2),add=_a[0],remove=_a[1];if(!add&&(0,_util_isArrayLike__WEBPACK_IMPORTED_MODULE_3__.X)(target))return(0,_operators_mergeMap__WEBPACK_IMPORTED_MODULE_4__.Z)((function(subTarget){return fromEvent(subTarget,eventName,options)}))((0,_observable_innerFrom__WEBPACK_IMPORTED_MODULE_5__.Tg)(target));if(!add)throw new TypeError("Invalid event target");return new _Observable__WEBPACK_IMPORTED_MODULE_6__.c((function(subscriber){var handler=function(){for(var args=[],_i=0;_i<arguments.length;_i++)args[_i]=arguments[_i];return subscriber.next(1<args.length?args:args[0])};return add(handler),function(){return remove(handler)}}))}function toCommonHandlerRegistry(target,eventName){return function(methodName){return function(handler){return target[methodName](eventName,handler)}}}},"./node_modules/rxjs/dist/esm5/internal/operators/combineLatestWith.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{v:()=>combineLatestWith});var tslib_es6=__webpack_require__("./node_modules/tslib/tslib.es6.mjs"),combineLatest=__webpack_require__("./node_modules/rxjs/dist/esm5/internal/observable/combineLatest.js"),lift=__webpack_require__("./node_modules/rxjs/dist/esm5/internal/util/lift.js"),argsOrArgArray=__webpack_require__("./node_modules/rxjs/dist/esm5/internal/util/argsOrArgArray.js"),mapOneOrManyArgs=__webpack_require__("./node_modules/rxjs/dist/esm5/internal/util/mapOneOrManyArgs.js"),pipe=__webpack_require__("./node_modules/rxjs/dist/esm5/internal/util/pipe.js"),util_args=__webpack_require__("./node_modules/rxjs/dist/esm5/internal/util/args.js");function combineLatest_combineLatest(){for(var args=[],_i=0;_i<arguments.length;_i++)args[_i]=arguments[_i];var resultSelector=(0,util_args.ms)(args);return resultSelector?(0,pipe.F)(combineLatest_combineLatest.apply(void 0,(0,tslib_es6.fX)([],(0,tslib_es6.zs)(args))),(0,mapOneOrManyArgs.I)(resultSelector)):(0,lift.N)((function(source,subscriber){(0,combineLatest.P)((0,tslib_es6.fX)([source],(0,tslib_es6.zs)((0,argsOrArgArray.K)(args))))(subscriber)}))}function combineLatestWith(){for(var otherSources=[],_i=0;_i<arguments.length;_i++)otherSources[_i]=arguments[_i];return combineLatest_combineLatest.apply(void 0,(0,tslib_es6.fX)([],(0,tslib_es6.zs)(otherSources)))}},"./node_modules/rxjs/dist/esm5/internal/operators/delay.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{c:()=>delay});var scheduler_async=__webpack_require__("./node_modules/rxjs/dist/esm5/internal/scheduler/async.js"),concat=__webpack_require__("./node_modules/rxjs/dist/esm5/internal/observable/concat.js"),take=__webpack_require__("./node_modules/rxjs/dist/esm5/internal/operators/take.js"),lift=__webpack_require__("./node_modules/rxjs/dist/esm5/internal/util/lift.js"),OperatorSubscriber=__webpack_require__("./node_modules/rxjs/dist/esm5/internal/operators/OperatorSubscriber.js"),noop=__webpack_require__("./node_modules/rxjs/dist/esm5/internal/util/noop.js");var mapTo=__webpack_require__("./node_modules/rxjs/dist/esm5/internal/operators/mapTo.js"),mergeMap=__webpack_require__("./node_modules/rxjs/dist/esm5/internal/operators/mergeMap.js"),innerFrom=__webpack_require__("./node_modules/rxjs/dist/esm5/internal/observable/innerFrom.js");function delayWhen(delayDurationSelector,subscriptionDelay){return subscriptionDelay?function(source){return(0,concat.x)(subscriptionDelay.pipe((0,take.s)(1),function ignoreElements(){return(0,lift.N)((function(source,subscriber){source.subscribe((0,OperatorSubscriber._)(subscriber,noop.l))}))}()),source.pipe(delayWhen(delayDurationSelector)))}:(0,mergeMap.Z)((function(value,index){return(0,innerFrom.Tg)(delayDurationSelector(value,index)).pipe((0,take.s)(1),(0,mapTo.u)(value))}))}var timer=__webpack_require__("./node_modules/rxjs/dist/esm5/internal/observable/timer.js");function delay(due,scheduler){void 0===scheduler&&(scheduler=scheduler_async.E);var duration=(0,timer.O)(due,scheduler);return delayWhen((function(){return duration}))}},"./node_modules/rxjs/dist/esm5/internal/operators/mapTo.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{u:()=>mapTo});var _map__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/rxjs/dist/esm5/internal/operators/map.js");function mapTo(value){return(0,_map__WEBPACK_IMPORTED_MODULE_0__.T)((function(){return value}))}},"./node_modules/rxjs/dist/esm5/internal/operators/withLatestFrom.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{E:()=>withLatestFrom});var tslib__WEBPACK_IMPORTED_MODULE_6__=__webpack_require__("./node_modules/tslib/tslib.es6.mjs"),_util_lift__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./node_modules/rxjs/dist/esm5/internal/util/lift.js"),_OperatorSubscriber__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__("./node_modules/rxjs/dist/esm5/internal/operators/OperatorSubscriber.js"),_observable_innerFrom__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./node_modules/rxjs/dist/esm5/internal/observable/innerFrom.js"),_util_identity__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__("./node_modules/rxjs/dist/esm5/internal/util/identity.js"),_util_noop__WEBPACK_IMPORTED_MODULE_5__=__webpack_require__("./node_modules/rxjs/dist/esm5/internal/util/noop.js"),_util_args__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/rxjs/dist/esm5/internal/util/args.js");function withLatestFrom(){for(var inputs=[],_i=0;_i<arguments.length;_i++)inputs[_i]=arguments[_i];var project=(0,_util_args__WEBPACK_IMPORTED_MODULE_0__.ms)(inputs);return(0,_util_lift__WEBPACK_IMPORTED_MODULE_1__.N)((function(source,subscriber){for(var len=inputs.length,otherValues=new Array(len),hasValue=inputs.map((function(){return!1})),ready=!1,_loop_1=function(i){(0,_observable_innerFrom__WEBPACK_IMPORTED_MODULE_2__.Tg)(inputs[i]).subscribe((0,_OperatorSubscriber__WEBPACK_IMPORTED_MODULE_3__._)(subscriber,(function(value){otherValues[i]=value,ready||hasValue[i]||(hasValue[i]=!0,(ready=hasValue.every(_util_identity__WEBPACK_IMPORTED_MODULE_4__.D))&&(hasValue=null))}),_util_noop__WEBPACK_IMPORTED_MODULE_5__.l))},i=0;i<len;i++)_loop_1(i);source.subscribe((0,_OperatorSubscriber__WEBPACK_IMPORTED_MODULE_3__._)(subscriber,(function(value){if(ready){var values=(0,tslib__WEBPACK_IMPORTED_MODULE_6__.fX)([value],(0,tslib__WEBPACK_IMPORTED_MODULE_6__.zs)(otherValues));subscriber.next(project?project.apply(void 0,(0,tslib__WEBPACK_IMPORTED_MODULE_6__.fX)([],(0,tslib__WEBPACK_IMPORTED_MODULE_6__.zs)(values))):values)}})))}))}},"./projects/story-book/src/numeric-stepper/numeric-stepper.stories.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{__namedExportsOrder:()=>__namedExportsOrder,appearance:()=>appearance,customArrowIcons:()=>customArrowIcons,default:()=>__WEBPACK_DEFAULT_EXPORT__,layout:()=>layout,prefixAndSuffix:()=>prefixAndSuffix,showOnInit:()=>showOnInit,standard:()=>standard});var _angular_forms__WEBPACK_IMPORTED_MODULE_5__=__webpack_require__("./node_modules/@angular/forms/fesm2022/forms.mjs"),_angular_material_button_toggle__WEBPACK_IMPORTED_MODULE_6__=__webpack_require__("./node_modules/@angular/material/fesm2022/button-toggle.mjs"),_angular_material_form_field__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__("./node_modules/@angular/material/fesm2022/form-field.mjs"),_angular_material_input__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__("./node_modules/@angular/material/fesm2022/input.mjs"),_angular_platform_browser_animations__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./node_modules/@angular/platform-browser/fesm2022/animations.mjs"),_storybook_angular__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/@storybook/angular/dist/index.mjs");const __WEBPACK_DEFAULT_EXPORT__={title:"Components/Numeric Stepper",component:__webpack_require__("./projects/numeric-stepper/src/numeric-stepper.component.ts").Z,decorators:[(0,_storybook_angular__WEBPACK_IMPORTED_MODULE_0__.applicationConfig)({providers:[(0,_angular_platform_browser_animations__WEBPACK_IMPORTED_MODULE_2__.provideAnimations)()]}),(0,_storybook_angular__WEBPACK_IMPORTED_MODULE_0__.moduleMetadata)({imports:[_angular_material_form_field__WEBPACK_IMPORTED_MODULE_3__.nJ,_angular_material_input__WEBPACK_IMPORTED_MODULE_4__.fg,_angular_material_form_field__WEBPACK_IMPORTED_MODULE_3__.JW,_angular_material_form_field__WEBPACK_IMPORTED_MODULE_3__.yw,_angular_material_form_field__WEBPACK_IMPORTED_MODULE_3__.rl,_angular_forms__WEBPACK_IMPORTED_MODULE_5__.YN]})],tags:["autodocs"],argTypes:{layout:{options:["vertical","horizontal","horizontal-inlay"],control:{type:"select"},description:"Layout of the stepper control.",table:{defaultValue:{summary:"vertical"},type:{summary:"NgxNumericStepperLayout"}}},arrowIcons:{control:{type:"boolean"},description:"Whether to show arrow icons.",table:{defaultValue:{summary:"false"},type:{summary:"boolean"}}},showOnInit:{control:{type:"boolean"},description:"Whether to show the stepper on initialization.",table:{defaultValue:{summary:"false"},type:{summary:"boolean"}}},input:{control:{type:"object"},description:"The form field control input to be used.",table:{defaultValue:{summary:void 0},type:{summary:"MatFormFieldControl<unknown>"}}}},args:{layout:"vertical"},parameters:{docs:{description:{component:"The `NgxNumericStepperComponent` integrates with a `mat-form-field` containing an input. It provides a hover mask to allow custom increments or decrements using the `+` and `-` buttons. It can be configured with various layouts and options."}}}},standard={render:args=>({props:{...args,value:115,appearance:"outline"},template:'\n            <section>\n                <div ngx-numeric-stepper-container>\n                    <mat-form-field [appearance]="appearance">\n                        <mat-label>This is my label</mat-label>\n                        <input matInput type="number" [ngModel]="value" #numericStepper="ngModel" />\n                        <ngx-numeric-stepper (increment)="value = value + 5" (decrement)="value = value - 5" [layout]="layout" [arrowIcons]="arrowIcons" [showOnInit]="showOnInit" [input]="input" showOnInit></ngx-numeric-stepper>\n                    </mat-form-field>\n                </div>\n            </section>\n          ',styles:["\n            section {\n                background-color: white;\n            }\n          "]})},layout={parameters:{docs:{description:{story:"This component supports several layouts: <ul><li><code>vertical</code></li><li><code>horizontal</code></li><li><code>horizontal-inlay</code></li></ul>"}}},render:args=>({props:{...args,value:115},template:'\n            <section>\n                <div class="grouped">\n                    <div ngx-numeric-stepper-container>\n                        <mat-form-field appearance="outline">\n                            <mat-label>vertical layout</mat-label>\n                            <input matInput type="number" [ngModel]="value" #numericStepper="ngModel" />\n                            <ngx-numeric-stepper (increment)="value = value + 5" (decrement)="value = value - 5" layout="vertical" showOnInit></ngx-numeric-stepper>\n                        </mat-form-field>\n                    </div>\n                     <div ngx-numeric-stepper-container>\n                        <mat-form-field appearance="fill">\n                            <mat-label>vertical layout</mat-label>\n                            <input matInput type="number" [ngModel]="value" #numericStepper="ngModel" />\n                            <ngx-numeric-stepper (increment)="value = value + 5" (decrement)="value = value - 5" layout="vertical" showOnInit></ngx-numeric-stepper>\n                        </mat-form-field>\n                    </div>\n                </div>\n                <br />\n                <div class="grouped">\n                    <div ngx-numeric-stepper-container>\n                        <mat-form-field appearance="outline">\n                            <mat-label>horizontal layout</mat-label>\n                            <input matInput type="number" [ngModel]="value" #numericStepper="ngModel" />\n                            <ngx-numeric-stepper (increment)="value = value + 5" (decrement)="value = value - 5" layout="horizontal" showOnInit></ngx-numeric-stepper>\n                        </mat-form-field>\n                    </div>\n                    <div ngx-numeric-stepper-container>\n                        <mat-form-field appearance="fill">\n                            <mat-label>horizontal layout</mat-label>\n                            <input matInput type="number" [ngModel]="value" #numericStepper="ngModel" />\n                            <ngx-numeric-stepper (increment)="value = value + 5" (decrement)="value = value - 5" layout="horizontal" showOnInit></ngx-numeric-stepper>\n                        </mat-form-field>\n                    </div>\n                </div>\n                <br />\n                <div class="grouped">\n                    <div ngx-numeric-stepper-container>\n                        <mat-form-field appearance="outline">\n                            <mat-label>horizontal-inlay layout</mat-label>\n                            <input matInput type="number" [ngModel]="value" #numericStepper="ngModel" />\n                            <ngx-numeric-stepper (increment)="value = value + 5" (decrement)="value = value - 5" layout="horizontal-inlay" showOnInit></ngx-numeric-stepper>\n                        </mat-form-field>\n                    </div>\n                    <div ngx-numeric-stepper-container>\n                        <mat-form-field appearance="fill">\n                            <mat-label>horizontal-inlay layout</mat-label>\n                            <input matInput type="number" [ngModel]="value" #numericStepper="ngModel" />\n                            <ngx-numeric-stepper (increment)="value = value + 5" (decrement)="value = value - 5" layout="horizontal-inlay" showOnInit></ngx-numeric-stepper>\n                        </mat-form-field>\n                    </div>\n                </div>\n            </section>\n          ',styles:["\n            section {\n                background-color: white;\n            }\n            .matButtonContainer {\n                padding-top: 20px;\n                display: flex;\n                justify-content: center;\n            }\n            .grouped {\n                display: flex;\n                gap: 5rem;\n            }\n          "]}),args:{layout:"vertical"}},customArrowIcons={render:args=>({props:{...args,value:115,appearance:"outline"},template:'\n            <section>\n                <div ngx-numeric-stepper-container>\n                    <mat-form-field [appearance]="appearance">\n                <mat-label>Custom Arrow Icons</mat-label>\n                        <input matInput type="number" [ngModel]="value" #numericStepper="ngModel" />\n                        <ngx-numeric-stepper (increment)="value = value + 5" (decrement)="value = value - 5" [layout]="layout" [arrowIcons]="arrowIcons" [showOnInit]="showOnInit" [input]="input" showOnInit></ngx-numeric-stepper>\n                    </mat-form-field>\n                </div>\n            </section>\n          ',styles:["\n            section {\n                background-color: white;\n            }\n          "]}),args:{arrowIcons:!0}},showOnInit={tags:["!dev","!autodocs"],render:args=>({props:{...args,value:115,appearance:"outline"},template:'\n            <section>\n                <div ngx-numeric-stepper-container>\n                    <mat-form-field [appearance]="appearance">\n                <mat-label>Show On Init True</mat-label>\n                        <input matInput type="number" [ngModel]="value" #numericStepper="ngModel" />\n                        <ngx-numeric-stepper (increment)="value = value + 5" (decrement)="value = value - 5" [layout]="layout" [arrowIcons]="arrowIcons" [showOnInit]="showOnInit" [input]="input" showOnInit></ngx-numeric-stepper>\n                    </mat-form-field>\n                </div>\n            </section>\n          ',styles:["\n            section {\n                background-color: white;\n            }\n          "]}),args:{showOnInit:!0}},appearance={decorators:[(0,_storybook_angular__WEBPACK_IMPORTED_MODULE_0__.moduleMetadata)({imports:[_angular_material_button_toggle__WEBPACK_IMPORTED_MODULE_6__.pc,_angular_material_button_toggle__WEBPACK_IMPORTED_MODULE_6__.ec]})],parameters:{docs:{description:{story:"This component supports different appearances for `mat-form-field`."}}},render:args=>({props:{...args,value:115,appearance:"fill",appearanceChanged(value){this.appearance=value}},template:'\n            <section>\n                <div ngx-numeric-stepper-container>\n                    <mat-form-field [appearance]="appearance">\n                        <mat-label>This is my label</mat-label>\n                        <input matInput type="number" [ngModel]="value" #numericStepper="ngModel" />\n                        <ngx-numeric-stepper (increment)="value = value + 5" (decrement)="value = value - 5" [layout]="layout" showOnInit></ngx-numeric-stepper>\n                    </mat-form-field>\n                </div>\n                <div class="matButtonContainer">\n                    <mat-button-toggle-group name="appearance" (change)="appearanceChanged($event.value)" [value]="appearance">\n                        <mat-button-toggle value="fill">Fill</mat-button-toggle>\n                        <mat-button-toggle value="outline">Outline</mat-button-toggle>\n                    </mat-button-toggle-group>\n                </div>\n            </section>\n          ',styles:["\n            section {\n                background-color: white;\n            }\n            .matButtonContainer {\n                padding-top: 20px;\n                display: flex;\n                justify-content: center;\n            }\n          "]})},prefixAndSuffix={parameters:{docs:{description:{story:"This section allows you to visualize the component with different `mat-form-field` configurations, including custom prefixes and suffixes."}}},render:args=>({props:{...args,value:115,prefix:"",suffix:"cm",prefixChanged(value){this.prefix=value},suffixChanged(value){this.suffix=value}},template:'\n            <section>\n                <div class="grouped">\n                    <div ngx-numeric-stepper-container>\n                        <mat-form-field appearance="outline">\n                            <mat-label>vertical layout</mat-label>\n                            @if(prefix) {\n                                <span matTextPrefix>{{ prefix }}</span>\n                            }\n                            <input matInput type="number" [ngModel]="value" #numericStepper="ngModel" />\n                            @if(suffix) {\n                                <span matTextSuffix>{{ suffix }}</span>\n                            }\n                            <ngx-numeric-stepper (increment)="value = value + 5" (decrement)="value = value - 5" layout="vertical" showOnInit></ngx-numeric-stepper>\n                        </mat-form-field>\n                    </div>\n                     <div ngx-numeric-stepper-container>\n                        <mat-form-field appearance="fill">\n                            <mat-label>vertical layout</mat-label>\n                            @if(prefix) {\n                                <span matTextPrefix>{{ prefix }}</span>\n                            }\n                            <input matInput type="number" [ngModel]="value" #numericStepper="ngModel" />\n                            @if(suffix) {\n                                <span matTextSuffix>{{ suffix }}</span>\n                            }\n                            <ngx-numeric-stepper (increment)="value = value + 5" (decrement)="value = value - 5" layout="vertical" showOnInit></ngx-numeric-stepper>\n                        </mat-form-field>\n                    </div>\n                </div>\n                <br />\n                <div class="grouped">\n                    <div ngx-numeric-stepper-container>\n                        <mat-form-field appearance="outline">\n                            <mat-label>horizontal layout</mat-label>\n                            @if(prefix) {\n                                <span matTextPrefix>{{ prefix }}</span>\n                            }\n                            <input matInput type="number" [ngModel]="value" #numericStepper="ngModel" />\n                            @if(suffix) {\n                                <span matTextSuffix>{{ suffix }}</span>\n                            }\n                            <ngx-numeric-stepper (increment)="value = value + 5" (decrement)="value = value - 5" layout="horizontal" showOnInit></ngx-numeric-stepper>\n                        </mat-form-field>\n                    </div>\n                    <div ngx-numeric-stepper-container>\n                        <mat-form-field appearance="fill">\n                            <mat-label>horizontal layout</mat-label>\n                            @if(prefix) {\n                                <span matTextPrefix>{{ prefix }}</span>\n                            }\n                            <input matInput type="number" [ngModel]="value" #numericStepper="ngModel" />\n                            @if(suffix) {\n                                <span matTextSuffix>{{ suffix }}</span>\n                            }\n                            <ngx-numeric-stepper (increment)="value = value + 5" (decrement)="value = value - 5" layout="horizontal" showOnInit></ngx-numeric-stepper>\n                        </mat-form-field>\n                    </div>\n                </div>\n                <br />\n                <div class="grouped">\n                    <div ngx-numeric-stepper-container>\n                        <mat-form-field appearance="outline">\n                            <mat-label>horizontal-inlay layout</mat-label>\n                            @if(prefix) {\n                                <span matTextPrefix>{{ prefix }}</span>\n                            }\n                            <input matInput type="number" [ngModel]="value" #numericStepper="ngModel" />\n                            @if(suffix) {\n                                <span matTextSuffix>{{ suffix }}</span>\n                            }\n                            <ngx-numeric-stepper (increment)="value = value + 5" (decrement)="value = value - 5" layout="horizontal-inlay" showOnInit></ngx-numeric-stepper>\n                        </mat-form-field>\n                    </div>\n                    <div ngx-numeric-stepper-container>\n                        <mat-form-field appearance="fill">\n                            <mat-label>horizontal-inlay layout</mat-label>\n                            @if(prefix) {\n                                <span matTextPrefix>{{ prefix }}</span>\n                            }\n                            <input matInput type="number" [ngModel]="value" #numericStepper="ngModel" />\n                            @if(suffix) {\n                                <span matTextSuffix>{{ suffix }}</span>\n                            }\n                            <ngx-numeric-stepper (increment)="value = value + 5" (decrement)="value = value - 5" layout="horizontal-inlay" showOnInit></ngx-numeric-stepper>\n                        </mat-form-field>\n                    </div>\n                </div>\n                <br />\n                <h4>Try your own suffixes and prefixes</h4>\n                <br />\n                <div class="grouped">\n                        <mat-form-field appearance="outline">\n                            <mat-label>prefix</mat-label>\n                            <input matInput type="string" [ngModel]="prefix" (ngModelChange)="prefixChanged($event)" />\n                        </mat-form-field>\n                        <mat-form-field appearance="outline">\n                            <mat-label>suffix</mat-label>\n                            <input matInput type="string" [ngModel]="suffix" (ngModelChange)="suffixChanged($event)" />\n                        </mat-form-field>\n                </div>\n            </section>\n          ',styles:["\n            section {\n                background-color: white;\n                font-family: 'Roboto';\n            }\n            .matButtonContainer {\n                padding-top: 20px;\n                display: flex;\n                justify-content: center;\n            }\n            .grouped {\n                display: flex;\n                gap: 5rem;\n            }\n          "]}),args:{layout:"vertical"}},__namedExportsOrder=["standard","layout","customArrowIcons","showOnInit","appearance","prefixAndSuffix"];standard.parameters={...standard.parameters,docs:{...standard.parameters?.docs,source:{originalSource:'{\n  render: args => ({\n    props: {\n      ...args,\n      value: 115,\n      appearance: \'outline\'\n    },\n    template: `\n            <section>\n                <div ngx-numeric-stepper-container>\n                    <mat-form-field [appearance]="appearance">\n                        <mat-label>This is my label</mat-label>\n                        <input matInput type="number" [ngModel]="value" #numericStepper="ngModel" />\n                        <ngx-numeric-stepper (increment)="value = value + 5" (decrement)="value = value - 5" [layout]="layout" [arrowIcons]="arrowIcons" [showOnInit]="showOnInit" [input]="input" showOnInit></ngx-numeric-stepper>\n                    </mat-form-field>\n                </div>\n            </section>\n          `,\n    styles: [`\n            section {\n                background-color: white;\n            }\n          `]\n  })\n}',...standard.parameters?.docs?.source}}},layout.parameters={...layout.parameters,docs:{...layout.parameters?.docs,source:{originalSource:'{\n  parameters: {\n    docs: {\n      description: {\n        story: \'This component supports several layouts: <ul><li><code>vertical</code></li><li><code>horizontal</code></li><li><code>horizontal-inlay</code></li></ul>\'\n      }\n    }\n  },\n  render: args => ({\n    props: {\n      ...args,\n      value: 115\n    },\n    template: `\n            <section>\n                <div class="grouped">\n                    <div ngx-numeric-stepper-container>\n                        <mat-form-field appearance="outline">\n                            <mat-label>vertical layout</mat-label>\n                            <input matInput type="number" [ngModel]="value" #numericStepper="ngModel" />\n                            <ngx-numeric-stepper (increment)="value = value + 5" (decrement)="value = value - 5" layout="vertical" showOnInit></ngx-numeric-stepper>\n                        </mat-form-field>\n                    </div>\n                     <div ngx-numeric-stepper-container>\n                        <mat-form-field appearance="fill">\n                            <mat-label>vertical layout</mat-label>\n                            <input matInput type="number" [ngModel]="value" #numericStepper="ngModel" />\n                            <ngx-numeric-stepper (increment)="value = value + 5" (decrement)="value = value - 5" layout="vertical" showOnInit></ngx-numeric-stepper>\n                        </mat-form-field>\n                    </div>\n                </div>\n                <br />\n                <div class="grouped">\n                    <div ngx-numeric-stepper-container>\n                        <mat-form-field appearance="outline">\n                            <mat-label>horizontal layout</mat-label>\n                            <input matInput type="number" [ngModel]="value" #numericStepper="ngModel" />\n                            <ngx-numeric-stepper (increment)="value = value + 5" (decrement)="value = value - 5" layout="horizontal" showOnInit></ngx-numeric-stepper>\n                        </mat-form-field>\n                    </div>\n                    <div ngx-numeric-stepper-container>\n                        <mat-form-field appearance="fill">\n                            <mat-label>horizontal layout</mat-label>\n                            <input matInput type="number" [ngModel]="value" #numericStepper="ngModel" />\n                            <ngx-numeric-stepper (increment)="value = value + 5" (decrement)="value = value - 5" layout="horizontal" showOnInit></ngx-numeric-stepper>\n                        </mat-form-field>\n                    </div>\n                </div>\n                <br />\n                <div class="grouped">\n                    <div ngx-numeric-stepper-container>\n                        <mat-form-field appearance="outline">\n                            <mat-label>horizontal-inlay layout</mat-label>\n                            <input matInput type="number" [ngModel]="value" #numericStepper="ngModel" />\n                            <ngx-numeric-stepper (increment)="value = value + 5" (decrement)="value = value - 5" layout="horizontal-inlay" showOnInit></ngx-numeric-stepper>\n                        </mat-form-field>\n                    </div>\n                    <div ngx-numeric-stepper-container>\n                        <mat-form-field appearance="fill">\n                            <mat-label>horizontal-inlay layout</mat-label>\n                            <input matInput type="number" [ngModel]="value" #numericStepper="ngModel" />\n                            <ngx-numeric-stepper (increment)="value = value + 5" (decrement)="value = value - 5" layout="horizontal-inlay" showOnInit></ngx-numeric-stepper>\n                        </mat-form-field>\n                    </div>\n                </div>\n            </section>\n          `,\n    styles: [`\n            section {\n                background-color: white;\n            }\n            .matButtonContainer {\n                padding-top: 20px;\n                display: flex;\n                justify-content: center;\n            }\n            .grouped {\n                display: flex;\n                gap: 5rem;\n            }\n          `]\n  }),\n  args: {\n    layout: \'vertical\'\n  }\n}',...layout.parameters?.docs?.source}}},customArrowIcons.parameters={...customArrowIcons.parameters,docs:{...customArrowIcons.parameters?.docs,source:{originalSource:'{\n  render: args => ({\n    props: {\n      ...args,\n      value: 115,\n      appearance: \'outline\'\n    },\n    template: `\n            <section>\n                <div ngx-numeric-stepper-container>\n                    <mat-form-field [appearance]="appearance">\n                <mat-label>Custom Arrow Icons</mat-label>\n                        <input matInput type="number" [ngModel]="value" #numericStepper="ngModel" />\n                        <ngx-numeric-stepper (increment)="value = value + 5" (decrement)="value = value - 5" [layout]="layout" [arrowIcons]="arrowIcons" [showOnInit]="showOnInit" [input]="input" showOnInit></ngx-numeric-stepper>\n                    </mat-form-field>\n                </div>\n            </section>\n          `,\n    styles: [`\n            section {\n                background-color: white;\n            }\n          `]\n  }),\n  args: {\n    arrowIcons: true\n  }\n}',...customArrowIcons.parameters?.docs?.source}}},showOnInit.parameters={...showOnInit.parameters,docs:{...showOnInit.parameters?.docs,source:{originalSource:'{\n  tags: [\'!dev\', \'!autodocs\'],\n  // Pour disable sur le menu à gauche !dev, et sur la doc !autodocs\n  render: args => ({\n    props: {\n      ...args,\n      value: 115,\n      appearance: \'outline\'\n    },\n    template: `\n            <section>\n                <div ngx-numeric-stepper-container>\n                    <mat-form-field [appearance]="appearance">\n                <mat-label>Show On Init True</mat-label>\n                        <input matInput type="number" [ngModel]="value" #numericStepper="ngModel" />\n                        <ngx-numeric-stepper (increment)="value = value + 5" (decrement)="value = value - 5" [layout]="layout" [arrowIcons]="arrowIcons" [showOnInit]="showOnInit" [input]="input" showOnInit></ngx-numeric-stepper>\n                    </mat-form-field>\n                </div>\n            </section>\n          `,\n    styles: [`\n            section {\n                background-color: white;\n            }\n          `]\n  }),\n  args: {\n    showOnInit: true\n  }\n}',...showOnInit.parameters?.docs?.source}}},appearance.parameters={...appearance.parameters,docs:{...appearance.parameters?.docs,source:{originalSource:'{\n  decorators: [moduleMetadata({\n    imports: [MatButtonToggle, MatButtonToggleGroup]\n  })],\n  parameters: {\n    docs: {\n      description: {\n        story: \'This component supports different appearances for `mat-form-field`.\'\n      }\n    }\n  },\n  render: args => ({\n    props: {\n      ...args,\n      value: 115,\n      appearance: \'fill\',\n      appearanceChanged(value: string): void {\n        this[\'appearance\'] = value;\n      }\n    },\n    template: `\n            <section>\n                <div ngx-numeric-stepper-container>\n                    <mat-form-field [appearance]="appearance">\n                        <mat-label>This is my label</mat-label>\n                        <input matInput type="number" [ngModel]="value" #numericStepper="ngModel" />\n                        <ngx-numeric-stepper (increment)="value = value + 5" (decrement)="value = value - 5" [layout]="layout" showOnInit></ngx-numeric-stepper>\n                    </mat-form-field>\n                </div>\n                <div class="matButtonContainer">\n                    <mat-button-toggle-group name="appearance" (change)="appearanceChanged($event.value)" [value]="appearance">\n                        <mat-button-toggle value="fill">Fill</mat-button-toggle>\n                        <mat-button-toggle value="outline">Outline</mat-button-toggle>\n                    </mat-button-toggle-group>\n                </div>\n            </section>\n          `,\n    styles: [`\n            section {\n                background-color: white;\n            }\n            .matButtonContainer {\n                padding-top: 20px;\n                display: flex;\n                justify-content: center;\n            }\n          `]\n  })\n}',...appearance.parameters?.docs?.source}}},prefixAndSuffix.parameters={...prefixAndSuffix.parameters,docs:{...prefixAndSuffix.parameters?.docs,source:{originalSource:'{\n  parameters: {\n    docs: {\n      description: {\n        story: \'This section allows you to visualize the component with different `mat-form-field` configurations, including custom prefixes and suffixes.\'\n      }\n    }\n  },\n  render: args => ({\n    props: {\n      ...args,\n      value: 115,\n      prefix: \'\',\n      suffix: \'cm\',\n      prefixChanged(value: string): void {\n        this[\'prefix\'] = value;\n      },\n      suffixChanged(value: string): void {\n        this[\'suffix\'] = value;\n      }\n    },\n    template: `\n            <section>\n                <div class="grouped">\n                    <div ngx-numeric-stepper-container>\n                        <mat-form-field appearance="outline">\n                            <mat-label>vertical layout</mat-label>\n                            @if(prefix) {\n                                <span matTextPrefix>{{ prefix }}</span>\n                            }\n                            <input matInput type="number" [ngModel]="value" #numericStepper="ngModel" />\n                            @if(suffix) {\n                                <span matTextSuffix>{{ suffix }}</span>\n                            }\n                            <ngx-numeric-stepper (increment)="value = value + 5" (decrement)="value = value - 5" layout="vertical" showOnInit></ngx-numeric-stepper>\n                        </mat-form-field>\n                    </div>\n                     <div ngx-numeric-stepper-container>\n                        <mat-form-field appearance="fill">\n                            <mat-label>vertical layout</mat-label>\n                            @if(prefix) {\n                                <span matTextPrefix>{{ prefix }}</span>\n                            }\n                            <input matInput type="number" [ngModel]="value" #numericStepper="ngModel" />\n                            @if(suffix) {\n                                <span matTextSuffix>{{ suffix }}</span>\n                            }\n                            <ngx-numeric-stepper (increment)="value = value + 5" (decrement)="value = value - 5" layout="vertical" showOnInit></ngx-numeric-stepper>\n                        </mat-form-field>\n                    </div>\n                </div>\n                <br />\n                <div class="grouped">\n                    <div ngx-numeric-stepper-container>\n                        <mat-form-field appearance="outline">\n                            <mat-label>horizontal layout</mat-label>\n                            @if(prefix) {\n                                <span matTextPrefix>{{ prefix }}</span>\n                            }\n                            <input matInput type="number" [ngModel]="value" #numericStepper="ngModel" />\n                            @if(suffix) {\n                                <span matTextSuffix>{{ suffix }}</span>\n                            }\n                            <ngx-numeric-stepper (increment)="value = value + 5" (decrement)="value = value - 5" layout="horizontal" showOnInit></ngx-numeric-stepper>\n                        </mat-form-field>\n                    </div>\n                    <div ngx-numeric-stepper-container>\n                        <mat-form-field appearance="fill">\n                            <mat-label>horizontal layout</mat-label>\n                            @if(prefix) {\n                                <span matTextPrefix>{{ prefix }}</span>\n                            }\n                            <input matInput type="number" [ngModel]="value" #numericStepper="ngModel" />\n                            @if(suffix) {\n                                <span matTextSuffix>{{ suffix }}</span>\n                            }\n                            <ngx-numeric-stepper (increment)="value = value + 5" (decrement)="value = value - 5" layout="horizontal" showOnInit></ngx-numeric-stepper>\n                        </mat-form-field>\n                    </div>\n                </div>\n                <br />\n                <div class="grouped">\n                    <div ngx-numeric-stepper-container>\n                        <mat-form-field appearance="outline">\n                            <mat-label>horizontal-inlay layout</mat-label>\n                            @if(prefix) {\n                                <span matTextPrefix>{{ prefix }}</span>\n                            }\n                            <input matInput type="number" [ngModel]="value" #numericStepper="ngModel" />\n                            @if(suffix) {\n                                <span matTextSuffix>{{ suffix }}</span>\n                            }\n                            <ngx-numeric-stepper (increment)="value = value + 5" (decrement)="value = value - 5" layout="horizontal-inlay" showOnInit></ngx-numeric-stepper>\n                        </mat-form-field>\n                    </div>\n                    <div ngx-numeric-stepper-container>\n                        <mat-form-field appearance="fill">\n                            <mat-label>horizontal-inlay layout</mat-label>\n                            @if(prefix) {\n                                <span matTextPrefix>{{ prefix }}</span>\n                            }\n                            <input matInput type="number" [ngModel]="value" #numericStepper="ngModel" />\n                            @if(suffix) {\n                                <span matTextSuffix>{{ suffix }}</span>\n                            }\n                            <ngx-numeric-stepper (increment)="value = value + 5" (decrement)="value = value - 5" layout="horizontal-inlay" showOnInit></ngx-numeric-stepper>\n                        </mat-form-field>\n                    </div>\n                </div>\n                <br />\n                <h4>Try your own suffixes and prefixes</h4>\n                <br />\n                <div class="grouped">\n                        <mat-form-field appearance="outline">\n                            <mat-label>prefix</mat-label>\n                            <input matInput type="string" [ngModel]="prefix" (ngModelChange)="prefixChanged($event)" />\n                        </mat-form-field>\n                        <mat-form-field appearance="outline">\n                            <mat-label>suffix</mat-label>\n                            <input matInput type="string" [ngModel]="suffix" (ngModelChange)="suffixChanged($event)" />\n                        </mat-form-field>\n                </div>\n            </section>\n          `,\n    styles: [`\n            section {\n                background-color: white;\n                font-family: \'Roboto\';\n            }\n            .matButtonContainer {\n                padding-top: 20px;\n                display: flex;\n                justify-content: center;\n            }\n            .grouped {\n                display: flex;\n                gap: 5rem;\n            }\n          `]\n  }),\n  args: {\n    layout: \'vertical\'\n  }\n}',...prefixAndSuffix.parameters?.docs?.source}}}}}]);