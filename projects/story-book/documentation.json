{
    "pipes": [],
    "interfaces": [],
    "injectables": [],
    "guards": [],
    "interceptors": [],
    "classes": [],
    "directives": [],
    "components": [],
    "modules": [],
    "miscellaneous": {
        "variables": [
            {
                "name": "actionsToolbar",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/story-book/src/layout/layout.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n    parameters: {\n        docs: {\n            description: {\n                story: 'The actions template inside the component adds buttons on the toolbar. You must have the <code>layoutToolbar</code> template for it to work correctly. <ul><li>The <code>layoutPrimaryAction</code> template allows you to add one primary button on the toolbar. Here my add icon button.</li><li>The <code>layoutActions</code> template allows you to add additional buttons to the toolbar. Here my refresh and my favorite icon button.</li></ul>'\n            }\n        }\n    },\n    render: args => ({\n        props: {\n            ...args,\n            log: (msg: string, event?: Event): void => {\n                console.log(msg, event);\n            }\n        },\n        template: `\n            <section>\n                <ngx-layout>\n                    <ng-template #layoutToolbar>\n                    </ng-template>\n\n                    <!-- Primary action -->\n                    <ng-template #layoutPrimaryAction>\n                        <button type=\"button\" mat-fab matTooltip=\"Add\" (click)=\"log('Add button clicked', $event)\">\n                            <mat-icon>add</mat-icon>\n                        </button>\n                    </ng-template>\n\n                    <!-- Actions panel -->\n                    <ng-template #layoutActions>\n                        <button type=\"button\" mat-icon-button matTooltip=\"Refresh\" (click)=\"log('Refresh button clicked', $event)\">\n                            <mat-icon>refresh</mat-icon>\n                        </button>\n\n                        <button type=\"button\" mat-icon-button matTooltip=\"Favorite\" (click)=\"log('Favorite button clicked', $event)\">\n                            <mat-icon>favorite</mat-icon>\n                        </button>\n                    </ng-template>\n                    <div class=\"content-container\">Layout content</div>\n                </ngx-layout>\n            </section>\n          `\n    })\n}"
            },
            {
                "name": "appearance",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/story-book/src/numeric-stepper/numeric-stepper.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n    parameters: {\n        docs: {\n            description: {\n                story: 'This component supports different appearances for `mat-form-field`.'\n            }\n        }\n    },\n    render: args => ({\n        props: {\n            ...args,\n            value: 115,\n            appearance: 'fill',\n            appearanceChanged(value: string): void {\n                this['appearance'] = value;\n            }\n        },\n        template: `\n            <section>\n                <div ngx-numeric-stepper-container>\n                    <mat-form-field [appearance]=\"appearance\">\n                        <mat-label>This is my label</mat-label>\n                        <input matInput type=\"number\" [ngModel]=\"value\" #numericStepper=\"ngModel\" />\n                        <ngx-numeric-stepper (increment)=\"value = value + 5\" (decrement)=\"value = value - 5\" [layout]=\"layout\" showOnInit></ngx-numeric-stepper>\n                    </mat-form-field>\n                </div>\n                <div class=\"matButtonContainer\">\n                    <mat-button-toggle-group name=\"appearance\" hideSingleSelectionIndicator=\"true\" (change)=\"appearanceChanged($event.value)\" [value]=\"appearance\">\n                        <mat-button-toggle value=\"fill\">Fill</mat-button-toggle>\n                        <mat-button-toggle value=\"outline\">Outline</mat-button-toggle>\n                    </mat-button-toggle-group>\n                </div>\n            </section>\n          `,\n        styles: [`\n            section {\n                background-color: white;\n            }\n            .matButtonContainer {\n                padding-top: 20px;\n                display: flex;\n                justify-content: center;\n            }\n          `]\n    })\n}"
            },
            {
                "name": "basicWarnHorizontal",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/story-book/src/message-box/message-box.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n    parameters: {\n        docs: {\n            description: {\n                story: 'This story demonstrates the NgxMessageBoxComponent with a \"warn\" type and horizontal layout. It shows a simple warning message with default settings.'\n            }\n        }\n    },\n    render: args => ({\n        props: {\n            ...args\n        },\n        template: `\n        <section class=\"message-box\">\n            <ngx-message-box\n                [type]=\"type\"\n                [title]=\"title\"\n                [horizontal]=\"horizontal\"\n                [attr.horizontal]=\"horizontal|| null\">\n                Un message \"warn\" <b>horizontal</b>\n            </ngx-message-box>\n        </section>\n      `\n    }),\n    args: {\n        type: 'warn',\n        horizontal: true,\n        showCloseIcon: false,\n        title: 'My title'\n    }\n}"
            },
            {
                "name": "combinedSplitters",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/story-book/src/splitter/splitter.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n    parameters: {\n        docs: {\n            description: {\n                story: 'This story presents a combination of two splitters: a vertical splitter nested inside a horizontal splitter. This allows creating a complex layout with resizable areas in both directions.'\n            }\n        }\n    },\n    render: args => ({\n        props: {\n            ...args\n        },\n        template: `\n        <section class=\"splitter combined\">\n            <!-- Horizontal Splitter -->\n            <ngx-splitter [direction]=\"'horizontal'\" [gutterSize]=\"gutterSize\" order=\"1\">\n                <!-- First Horizontal Area -->\n                <ngx-split-area size=\"50\" minSizePixel=\"100\">\n                    <!-- Vertical Splitter Inside the First Horizontal Area -->\n                    <ngx-splitter [direction]=\"'vertical'\" [gutterSize]=\"gutterSize\" order=\"1\">\n                        <!-- First Vertical Area -->\n                        <ngx-split-area size=\"50\" minSizePixel=\"100\">\n                            <p>Content in the first vertical area...</p>\n                        </ngx-split-area>\n                        <!-- Second Vertical Area -->\n                        <ngx-split-area size=\"50\" minSizePixel=\"100\">\n                            <p>Content in the second vertical area...</p>\n                        </ngx-split-area>\n                    </ngx-splitter>\n                </ngx-split-area>\n                <!-- Second Horizontal Area -->\n                <ngx-split-area size=\"50\" minSizePixel=\"100\">\n                    <p>Content in the second horizontal area...</p>\n                </ngx-split-area>\n            </ngx-splitter>\n        </section>\n        `\n    })\n}"
            },
            {
                "name": "complete",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/story-book/src/message-box/message-box.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n    parameters: {\n        docs: {\n            description: {\n                story: 'This story demonstrates the NgxMessageBoxComponent with all inputs configured, including actions, title, icon, and layout options. It shows how the component behaves with various properties and interactive elements.'\n            }\n        }\n    },\n    render: args => ({\n        props: {\n            ...args\n        },\n        template: `\n        <section class=\"message-box\">\n            <ngx-message-box\n                [type]=\"type\"\n                [title]=\"title\"\n                [icon]=\"icon\"\n                [actions]=\"actions\"\n                [horizontal]=\"horizontal\"\n                [attr.horizontal]=\"horizontal|| null\"\n                [showCloseIcon]=\"showCloseIcon\">\n                <p>Content inside the <b>message box</b></p>\n                <p>This is a default message box, in vertical layout.</p>\n            </ngx-message-box>\n        </section>\n      `\n    }),\n    args: {\n        type: 'info',\n        title: undefined,\n        icon: undefined,\n        actions: [\n            {\n                action: (): void => alert('remove action'),\n                icon: 'remove'\n            },\n            {\n                action: (): void => alert('add action'),\n                icon: 'add'\n            }\n        ],\n        horizontal: false,\n        showCloseIcon: false\n    }\n}"
            },
            {
                "name": "complete",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/story-book/src/status/status.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n    parameters: {\n        docs: {\n            description: {\n                story: 'This example showcases a `NgxStatusComponent` with all available features, including title, type, text, date, duration, custom CSS class, technical text, and multiple actions. Depending on the user\\'s \"familyCode\" property given, the UserCard can have a green, blue, red or gray colored badge.<br /><ul><li>Green : <code>Médico-technique</code>, <code>Social</code>, <code>Médico-thérapeutique</code>, <code>Pharmacie</code></li><li>Blue : <code>Soins</code>, <code>Infirmier-e</code></li><li>Red : <code>Médecin dentiste</code>, <code>Médecin</code></li><li>Gray : Any other text</li><li>Nothing : Empty familyCode</li></ul>'\n            }\n        }\n    },\n    render: args => ({\n        props: {\n            ...args\n        },\n        template: `\n        <section class=\"status\">\n          <ngx-status [status]=\"status\"></ngx-status>\n        </section>\n      `\n    }),\n    args: {\n        status: {\n            title: 'Sample Status Title',\n            type: 'info',\n            text: 'This is a sample status message.',\n            date: new Date(),\n            duration: 5000,\n            className: 'my-custom-css-class-2',\n            technicalText: 'Technical details about the status.',\n            actions: [\n                {\n                    label: 'Action 1',\n                    callback: (): void => console.log('Action 1 triggered.')\n                },\n                {\n                    label: 'Action 2',\n                    callback: (): void => console.log('Action 2 triggered.')\n                }\n            ]\n        }\n    }\n}"
            },
            {
                "name": "completeLayout",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/story-book/src/layout/layout.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n    parameters: {\n        docs: {\n            description: {\n                story: 'Here you can see everything that can be added to have this complete component. <ul><li>Template <code>layoutToolbar</code><br/><ul><li><code>toolbar-title</code>directive on span to add title</li><li><code>ngx-search-container</code>component for searching</li></ul></li><li>Template <code>layoutPrimaryAction</code></li><li>Template <code>layoutActions</code></li><li>Template <code>layoutRight</code><br/><ul><li><code>filters-chip-list</code>directive on div to contain mat-chip-listbox</li></ul></li><li>Template <code>layoutInfoBoxes</code></li></ul>'\n            }\n        }\n    },\n    render: args => ({\n        props: args,\n        template: '<storybook-layout-wrapper [toolbarColor]=\"toolbarColor\"></storybook-layout-wrapper>'\n    })\n}"
            },
            {
                "name": "customArrowIcons",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/story-book/src/numeric-stepper/numeric-stepper.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n    render: args => ({\n        props: {\n            ...args,\n            value: 115,\n            appearance: 'outline'\n        },\n        template: `\n            <section>\n                <div ngx-numeric-stepper-container>\n                    <mat-form-field [appearance]=\"appearance\">\n                <mat-label>Custom Arrow Icons</mat-label>\n                        <input matInput type=\"number\" [ngModel]=\"value\" #numericStepper=\"ngModel\" />\n                        <ngx-numeric-stepper (increment)=\"value = value + 5\" (decrement)=\"value = value - 5\" [layout]=\"layout\" [arrowIcons]=\"arrowIcons\" [showOnInit]=\"showOnInit\" [input]=\"input\" showOnInit></ngx-numeric-stepper>\n                    </mat-form-field>\n                </div>\n            </section>\n          `,\n        styles: [`\n            section {\n                background-color: white;\n            }\n          `]\n    }),\n    args: {\n        arrowIcons: true\n    }\n}"
            },
            {
                "name": "customIcon",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/story-book/src/message-box/message-box.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n    parameters: {\n        docs: {\n            description: {\n                story: 'It shows a simple success message with default settings but with custom agriculture icon.'\n            }\n        }\n    },\n    render: args => ({\n        props: {\n            ...args\n        },\n        template: `\n        <section class=\"message-box\">\n            <ngx-message-box\n                [type]=\"type\"\n                [title]=\"title\"\n                [icon]=\"icon\"\n                [horizontal]=\"horizontal\"\n                [attr.horizontal]=\"horizontal|| null\">\n                Un message \"success\" <b>horizontal</b>\n            </ngx-message-box>\n        </section>\n      `\n    }),\n    args: {\n        type: 'success',\n        icon: 'agriculture',\n        horizontal: true,\n        showCloseIcon: false,\n        title: 'My agriculture icon'\n    }\n}"
            },
            {
                "name": "customizableSplitAreas",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/story-book/src/splitter/splitter.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n    parameters: {\n        docs: {\n            description: {\n                story: 'This story provides an example of how to customize the properties of each split area dynamically. It allows changing the size and minimum size of each area through input fields.'\n            }\n        }\n    },\n    render: args => ({\n        props: {\n            ...args,\n            firstAreaSize: 50,\n            secondAreaSize: 50,\n            firstAreaMinSize: 100,\n            secondAreaMinSize: 10,\n            firstAreaSizeChanged(size: number): void {\n                if (size > 100) {\n                    size = 100;\n                } else if (size < 0) {\n                    size = 0;\n                }\n                this['firstAreaSize'] = size;\n                this['secondAreaSize'] = 100 - size;\n            },\n            secondAreaSizeChanged(size: number): void {\n                if (size > 100) {\n                    size = 100;\n                } else if (size < 0) {\n                    size = 0;\n                }\n                this['secondAreaSize'] = size;\n                this['firstAreaSize'] = 100 - size;\n            },\n            firstAreaMinSizeChanged(size: number): void {\n                this['firstAreaMinSize'] = size;\n            },\n            secondAreaMinSizeChanged(size: number): void {\n                this['secondAreaMinSize'] = size;\n            }\n        },\n        template: `\n        <section class=\"splitter bigger\">\n            <ngx-splitter [direction]=\"direction\" [gutterSize]=\"gutterSize\" [disabled]=\"disabled\" order=\"1\" class=\"colored\">\n                <ngx-split-area #firstSplitArea [size]=\"firstAreaSize\" [minSizePixel]=\"firstAreaMinSize\">\n                    Area 1\n                    <div class=\"minContainer left\" [style.width.px]=\"firstAreaMinSize\">FirstArea minSize</div>\n                </ngx-split-area>\n                <ngx-split-area #secondSplitArea [size]=\"secondAreaSize\" [minSizePixel]=\"secondAreaMinSize\">\n                    Area 2\n                    <div class=\"minContainer right\" [style.width.px]=\"secondAreaMinSize\">SecondArea minSize</div>\n                </ngx-split-area>\n            </ngx-splitter>\n            <br />\n            <div class=\"matButtonContainer\">\n                <div class=\"formfield\">\n                    <mat-form-field appearance=\"outline\">\n                        <mat-label>First Area Size (%)</mat-label>\n                        <input matInput type=\"number\" [ngModel]=\"firstAreaSize\" (ngModelChange)=\"firstAreaSizeChanged($event)\" />\n                    </mat-form-field>\n                    <mat-form-field appearance=\"outline\">\n                        <mat-label>Second Area Size (%)</mat-label>\n                        <input matInput type=\"number\" [ngModel]=\"secondAreaSize\" (ngModelChange)=\"secondAreaSizeChanged($event)\" />\n                    </mat-form-field>\n                </div>\n                <div class=\"formfield\">\n                    <mat-form-field appearance=\"outline\">\n                        <mat-label>First Area Minimum Size (px)</mat-label>\n                        <input matInput type=\"number\" [ngModel]=\"firstAreaMinSize\" (ngModelChange)=\"firstAreaMinSizeChanged($event)\" />\n                    </mat-form-field>\n                    <mat-form-field appearance=\"outline\">\n                        <mat-label>Second Area Minimum Size (px)</mat-label>\n                        <input matInput type=\"number\" [ngModel]=\"secondAreaMinSize\" (ngModelChange)=\"secondAreaMinSizeChanged($event)\" />\n                    </mat-form-field>\n                </div>\n            </div>\n        </section>\n        `\n    })\n}"
            },
            {
                "name": "customTooltips",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/story-book/src/search-container/search-container.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n    parameters: {\n        docs: {\n            description: {\n                story: 'Shows the search container with custom tooltip texts for clear, open, and close actions.'\n            }\n        }\n    },\n    ...standard,\n    args: {\n        clearTooltip: 'Clear search',\n        openSearchTooltip: 'Start searching',\n        closeSearchTooltip: 'Close search'\n    }\n}"
            },
            {
                "name": "disabledSplitter",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/story-book/src/splitter/splitter.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n    parameters: {\n        docs: {\n            description: {\n                story: 'In this story, the splitter is disabled, preventing the user from resizing the areas.'\n            }\n        }\n    },\n    render: args => ({\n        props: args,\n        template: `\n        <section class=\"splitter\">\n            <ngx-splitter [direction]=\"direction\" [gutterSize]=\"gutterSize\" [disabled]=\"disabled\" order=\"1\">\n                <ngx-split-area size=\"25\" minSizePixel=\"100\">Area 1</ngx-split-area>\n                <ngx-split-area size=\"75\" minSizePixel=\"100\">Area 2</ngx-split-area>\n            </ngx-splitter>\n        </section>\n        `\n    }),\n    args: {\n        disabled: true\n    }\n}"
            },
            {
                "name": "dynamicBadgeColor",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/story-book/src/user-card/user-card.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n    parameters: {\n        docs: {\n            description: {\n                story: 'Depending on the user\\'s \"familyCode\" property given, the UserCard can have a green, blue, red or gray colored badge.<br /><ul><li>Green : <code>Médico-technique</code>, <code>Social</code>, <code>Médico-thérapeutique</code>, <code>Pharmacie</code></li><li>Blue : <code>Soins</code>, <code>Infirmier-e</code></li><li>Red : <code>Médecin dentiste</code>, <code>Médecin</code></li><li>Gray : Any other text</li><li>Nothing : Empty familyCode</li></ul>'\n            }\n        }\n    },\n    render: args => ({\n        props: {\n            ...args,\n            familyCodeChanged(code: string): void {\n                this['user'] = {\n                    title: 'Professeur',\n                    firstname: 'Jean',\n                    lastname: 'PATATE',\n                    initials: 'jpat',\n                    type: 'Type',\n                    email: 'jean.patate@hug.ch',\n                    role: 'Medecin',\n                    groupFunctionLabel: 'Group',\n                    familyCode: code,\n                    functionSefName: 'SefNameFunction',\n                    functionSefCode: 'SefCodeFunction',\n                    organisation: 'HUG',\n                    speciality: 'Neurochirurgie',\n                    specialty1: 'Dermatologie',\n                    specialty2: 'Pedicure',\n                    esoN3Label: 'EsoN3Label',\n                    login: 'PatateLogin',\n                    phone: '+44 150 509 39',\n                    bip: '8859595',\n                    mobile: '+44 150 509 39',\n                    address: 'Carouge, 7 Rue St Julien',\n                    city: 'Carouge',\n                    zipCode: '1227'\n                };\n            }\n        },\n        template: `\n        <section>\n          <ngx-user-card [user]=\"user\" [expanded]=\"false\"></ngx-user-card>\n          <br />\n          <div class=\"matButtonContainer\">\n            <mat-button-toggle-group name=\"favoriteColor\" hideSingleSelectionIndicator=\"true\" (change)=\"familyCodeChanged($event.value)\" [value]=\"user.familyCode\">\n                <mat-button-toggle value=\"Social\">Social</mat-button-toggle>\n                <mat-button-toggle value=\"Infirmier-e\">Infirmier-e</mat-button-toggle>\n                <mat-button-toggle value=\"Médecin dentiste\">Médecin dentiste</mat-button-toggle>\n                <mat-button-toggle value=\"a text\">Custom text</mat-button-toggle>\n                <mat-button-toggle value=\"\">Empty</mat-button-toggle>\n            </mat-button-toggle-group>\n          </div>\n        </section>\n      `\n    }),\n    args: {\n        user: {\n            title: 'Professeur',\n            firstname: 'Jean',\n            lastname: 'PATATE',\n            initials: 'jpat',\n            type: 'Type',\n            email: 'jean.patate@hug.ch',\n            role: 'Medecin',\n            groupFunctionLabel: 'Group',\n            familyCode: 'Social',\n            functionSefName: 'SefNameFunction',\n            functionSefCode: 'SefCodeFunction',\n            organisation: 'HUG',\n            speciality: 'Neurochirurgie',\n            specialty1: 'Dermatologie',\n            specialty2: 'Pedicure',\n            esoN3Label: 'EsoN3Label',\n            login: 'PatateLogin',\n            phone: '+44 150 509 39',\n            bip: '8859595',\n            mobile: '+44 150 509 39',\n            address: 'Carouge, 7 Rue St Julien',\n            city: 'Carouge',\n            zipCode: '1227'\n        }\n    }\n}"
            },
            {
                "name": "gutterSizeControl",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/story-book/src/splitter/splitter.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n    parameters: {\n        docs: {\n            description: {\n                story: 'This story showcases the ability to control the gutter size dynamically. Use the buttons to change the gutter size between predefined values.'\n            }\n        }\n    },\n    render: args => ({\n        props: {\n            ...args,\n            changeGutterSize(size: number): void {\n                this['gutterSize'] = size;\n            }\n        },\n        template: `\n        <section class=\"splitter bigger\">\n            <ngx-splitter [direction]=\"direction\" [gutterSize]=\"gutterSize\" [disabled]=\"disabled\" order=\"1\">\n                <ngx-split-area size=\"25\" minSizePixel=\"100\">Area 1</ngx-split-area>\n                <ngx-split-area size=\"75\" minSizePixel=\"100\">Area 2</ngx-split-area>\n            </ngx-splitter>\n            <br />\n            <div class=\"matButtonContainer\">\n                <mat-button-toggle-group name=\"gutterSize\" hideSingleSelectionIndicator=\"true\" (change)=\"changeGutterSize($event.value)\" [value]=\"gutterSize\">\n                    <mat-button-toggle value=\"5\">5px</mat-button-toggle>\n                    <mat-button-toggle value=\"10\">10px</mat-button-toggle>\n                    <mat-button-toggle value=\"45\">45px</mat-button-toggle>\n                    <mat-button-toggle value=\"100\">100px</mat-button-toggle>\n                </mat-button-toggle-group>\n            </div>\n        </section>\n        `\n    })\n}"
            },
            {
                "name": "horizontalLayout",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/story-book/src/message-box/message-box.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n    parameters: {\n        docs: {\n            description: {\n                story: 'This story demonstrates the NgxMessageBoxComponent with a horizontal layout. The content and title are aligned horizontally, which may be useful for certain design requirements.'\n            }\n        }\n    },\n    render: args => ({\n        props: {\n            ...args\n        },\n        template: `\n        <section class=\"message-box\">\n            <ngx-message-box\n                [type]=\"type\"\n                [title]=\"title\"\n                [icon]=\"icon\"\n                [actions]=\"actions\"\n                [horizontal]=\"horizontal\"\n                [attr.horizontal]=\"horizontal|| null\"\n                [showCloseIcon]=\"showCloseIcon\">\n                <p>Content inside the <b>message box</b></p>\n                <p>This message box is in horizontal layout.</p>\n            </ngx-message-box>\n        </section>\n      `\n    }),\n    args: {\n        type: 'warn',\n        title: 'Warning Message',\n        icon: 'home',\n        actions: [\n            {\n                text: 'Acknowledge',\n                action: (): void => alert('Acknowledged'),\n                icon: 'check'\n            }\n        ],\n        horizontal: true,\n        showCloseIcon: true\n    }\n}"
            },
            {
                "name": "infosBoxes",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/story-book/src/layout/layout.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n    parameters: {\n        docs: {\n            description: {\n                story: 'The <code>layoutInfoBoxes</code> template inside the component allows you to add informations under the toolbar.'\n            }\n        }\n    },\n    render: args => ({\n        props: {\n            ...args,\n            log: (msg: string, event?: Event): void => {\n                console.log(msg, event);\n            }\n        },\n        template: `\n            <section>\n                <ngx-layout>\n                    <ng-template #layoutToolbar>\n                    </ng-template>\n\n                    <!-- Info boxes panel -->\n                    <ng-template #layoutInfoBoxes>\n                        <span class=\"info-box\">Info box</span>\n                        <span class=\"info-box primary\">Info box primary</span>\n                        <span class=\"info-box accent\">Info box accent</span>\n                    </ng-template>\n\n                    <div class=\"content-container\">Layout content</div>\n                </ngx-layout>\n            </section>\n          `\n    })\n}"
            },
            {
                "name": "infoVertical",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/story-book/src/message-box/message-box.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n    parameters: {\n        docs: {\n            description: {\n                story: 'This story shows the NgxMessageBoxComponent with an \"info\" type in vertical layout. It displays a basic informational message with default settings.'\n            }\n        }\n    },\n    render: args => ({\n        props: {\n            ...args\n        },\n        template: `\n        <section class=\"message-box\">\n            <ngx-message-box\n                [type]=\"type\"\n                [title]=\"title\"\n                [horizontal]=\"horizontal\"\n                [attr.horizontal]=\"horizontal|| null\">\n                Un message \"info\" <b>vertical</b>\n            </ngx-message-box>\n        </section>\n      `\n    }),\n    args: {\n        type: 'info',\n        horizontal: false,\n        showCloseIcon: true,\n        title: 'My title'\n    }\n}"
            },
            {
                "name": "layout",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/story-book/src/numeric-stepper/numeric-stepper.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n    parameters: {\n        docs: {\n            description: {\n                story: 'This component supports several layouts: <ul><li><code>vertical</code></li><li><code>horizontal</code></li><li><code>horizontal-inlay</code></li></ul>'\n            }\n        }\n    },\n    render: args => ({\n        props: {\n            ...args,\n            value: 115\n        },\n        template: `\n            <section>\n                <div class=\"grouped\">\n                    <div ngx-numeric-stepper-container>\n                        <mat-form-field appearance=\"outline\">\n                            <mat-label>vertical layout</mat-label>\n                            <input matInput type=\"number\" [ngModel]=\"value\" #numericStepper=\"ngModel\" />\n                            <ngx-numeric-stepper (increment)=\"value = value + 5\" (decrement)=\"value = value - 5\" layout=\"vertical\" showOnInit></ngx-numeric-stepper>\n                        </mat-form-field>\n                    </div>\n                     <div ngx-numeric-stepper-container>\n                        <mat-form-field appearance=\"fill\">\n                            <mat-label>vertical layout</mat-label>\n                            <input matInput type=\"number\" [ngModel]=\"value\" #numericStepper=\"ngModel\" />\n                            <ngx-numeric-stepper (increment)=\"value = value + 5\" (decrement)=\"value = value - 5\" layout=\"vertical\" showOnInit></ngx-numeric-stepper>\n                        </mat-form-field>\n                    </div>\n                </div>\n                <br />\n                <div class=\"grouped\">\n                    <div ngx-numeric-stepper-container>\n                        <mat-form-field appearance=\"outline\">\n                            <mat-label>horizontal layout</mat-label>\n                            <input matInput type=\"number\" [ngModel]=\"value\" #numericStepper=\"ngModel\" />\n                            <ngx-numeric-stepper (increment)=\"value = value + 5\" (decrement)=\"value = value - 5\" layout=\"horizontal\" showOnInit></ngx-numeric-stepper>\n                        </mat-form-field>\n                    </div>\n                    <div ngx-numeric-stepper-container>\n                        <mat-form-field appearance=\"fill\">\n                            <mat-label>horizontal layout</mat-label>\n                            <input matInput type=\"number\" [ngModel]=\"value\" #numericStepper=\"ngModel\" />\n                            <ngx-numeric-stepper (increment)=\"value = value + 5\" (decrement)=\"value = value - 5\" layout=\"horizontal\" showOnInit></ngx-numeric-stepper>\n                        </mat-form-field>\n                    </div>\n                </div>\n                <br />\n                <div class=\"grouped\">\n                    <div ngx-numeric-stepper-container>\n                        <mat-form-field appearance=\"outline\">\n                            <mat-label>horizontal-inlay layout</mat-label>\n                            <input matInput type=\"number\" [ngModel]=\"value\" #numericStepper=\"ngModel\" />\n                            <ngx-numeric-stepper (increment)=\"value = value + 5\" (decrement)=\"value = value - 5\" layout=\"horizontal-inlay\" showOnInit></ngx-numeric-stepper>\n                        </mat-form-field>\n                    </div>\n                    <div ngx-numeric-stepper-container>\n                        <mat-form-field appearance=\"fill\">\n                            <mat-label>horizontal-inlay layout</mat-label>\n                            <input matInput type=\"number\" [ngModel]=\"value\" #numericStepper=\"ngModel\" />\n                            <ngx-numeric-stepper (increment)=\"value = value + 5\" (decrement)=\"value = value - 5\" layout=\"horizontal-inlay\" showOnInit></ngx-numeric-stepper>\n                        </mat-form-field>\n                    </div>\n                </div>\n            </section>\n          `,\n        styles: [`\n            section {\n                background-color: white;\n            }\n            .matButtonContainer {\n                padding-top: 20px;\n                display: flex;\n                justify-content: center;\n            }\n            .grouped {\n                display: flex;\n                gap: 5rem;\n            }\n          `]\n    }),\n    args: {\n        layout: 'vertical'\n    }\n}"
            },
            {
                "name": "layoutToolbar",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/story-book/src/layout/layout.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n    parameters: {\n        docs: {\n            description: {\n                story: 'The <code>layoutToolbar</code> template inside the component adds a toolbar to it.<ul><li>The <code>toolbarColor</code> Input on the component allows you to define the color of the toolbar. Here I have <code>toolbarColor=\"accent\"</code></li><li>The span with directive <code>toolbar-title</code> allows you to add a title to the toolbar</li><li>You can add an <code>ngx-search-container</code> in the toolbar. Its size will fit by default</li></ul>'\n            }\n        }\n    },\n    render: args => ({\n        props: {\n            ...args,\n            search: '',\n            toolbarColor: 'accent',\n            log: (msg: string, event?: Event): void => {\n                console.log(msg, event);\n            }\n        },\n        template: `\n            <section>\n                <ngx-layout [toolbarColor]=\"toolbarColor\">\n                    <ng-template #layoutToolbar>\n                        <span toolbar-title>My toolbar-title</span>\n                        <ngx-search-container>\n                            <input type=\"text\" [(ngModel)]=\"search\" (ngModelChange)=\"log('Search changed', $event)\" placeholder=\"My ngx-search-container\" autocomplete=\"off\" ngx-search-input />\n                        </ngx-search-container>\n                    </ng-template>\n                    <div class=\"content-container\">Layout content</div>\n                </ngx-layout>\n            </section>\n          `\n    })\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/story-book/src/layout/layout.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<NgxLayoutComponent>",
                "defaultValue": "{\n    title: 'Components/Layout',\n    component: NgxLayoutComponent,\n    decorators: [\n        applicationConfig({\n            providers: [\n                provideAnimations() // Provides animations to the application\n            ]\n        }),\n        moduleMetadata({\n            imports: [\n                CommonModule,\n                FormsModule,\n                NgxLayoutComponent,\n                StorybookLayoutWrapperComponent,\n                NgxSearchContainerComponent,\n                MatChipsModule,\n                MatButtonModule,\n                MatIconModule,\n                NgxSearchInputDirective\n            ],\n            providers: [NgxStatusService]\n        })\n    ],\n    tags: ['autodocs'],\n    argTypes: {\n        toolbarColor: {\n            options: ['primary', 'accent'],\n            control: { type: 'select' },\n            description: 'Sets the color of the toolbar. Choose between primary or accent themes.',\n            table: {\n                defaultValue: {\n                    summary: 'primary'\n                },\n                type: { summary: 'primary | accent' }\n            }\n        }\n    },\n    args: {\n        toolbarColor: 'primary'\n    },\n    parameters: {\n        layout: 'fullscreen',\n        docs: {\n            description: {\n                component: 'The `NgxLayoutComponent` is a flexible layout component for creating application layouts at HUG. It includes options for toolbars, actions, and side panels, making it adaptable for various use cases.'\n            }\n        }\n    }\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/story-book/src/list-loader/list-loader.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<NgxListLoaderComponent>",
                "defaultValue": "{\n    title: 'Components/List Loader',\n    component: NgxListLoaderComponent,\n    tags: ['autodocs'],\n    parameters: {\n        docs: {\n            description: {\n                component: 'The `NgxListLoaderComponent` is used to display a loading indicator when fetching large amounts of data. It includes a spinner animation and an optional label for context.'\n            }\n        }\n    },\n    argTypes: {\n        label: {\n            description: 'The label text displayed alongside the loader.',\n            control: {\n                type: 'text'\n            },\n            table: {\n                type: { summary: 'string' },\n                defaultValue: { summary: '' }\n            }\n        }\n    }\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/story-book/src/message-box/message-box.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<NgxMessageBoxComponent>",
                "defaultValue": "{\n    title: 'Components/MessageBox',\n    component: NgxMessageBoxComponent,\n    decorators: [\n        moduleMetadata({\n            imports: [\n                CommonModule\n            ]\n        })\n    ],\n    tags: ['autodocs'],\n    argTypes: {\n        type: {\n            control: 'select',\n            options: ['info', 'primary', 'success', 'warn', 'danger'],\n            description: 'Determines the type of the message box. Options include \"info\", \"primary\", \"success\", \"warn\", and \"danger\". This also sets the default icon if none is provided.',\n            table: {\n                type: { summary: 'NgxMessageBoxType' },\n                defaultValue: { summary: 'undefined' }\n            }\n        },\n        title: {\n            control: 'text',\n            description: 'The title displayed in the message box. Used to provide a header or subject for the message.',\n            table: {\n                type: { summary: 'string' },\n                defaultValue: { summary: 'undefined' }\n            }\n        },\n        icon: {\n            control: 'text',\n            description: 'Icon associated with the message box. This can be the name of an icon or a path to an icon image. If not provided, a default icon based on the type will be used.',\n            table: {\n                type: { summary: 'string' },\n                defaultValue: { summary: 'undefined' }\n            }\n        },\n        actions: {\n            control: 'object',\n            description: 'List of actions available in the message box. Each action can include text, type, icon, and an action function to execute. Allows you to customize the actions displayed in the footer of the message box.',\n            table: {\n                type: { summary: 'readonly NgxMessageBoxAction[]' },\n                defaultValue: { summary: 'undefined' }\n            }\n        },\n        horizontal: {\n            control: 'boolean',\n            description: 'Determines whether the layout of the message box is horizontal (true) or vertical (false). This affects the alignment of the title and content.',\n            table: {\n                type: { summary: 'boolean' },\n                defaultValue: { summary: 'false' }\n            }\n        },\n        showCloseIcon: {\n            control: 'boolean',\n            description: 'Indicates whether the close icon should be displayed in the message box. True to show the close icon, false to hide it.',\n            table: {\n                type: { summary: 'boolean' },\n                defaultValue: { summary: 'false' }\n            }\n        }\n    },\n    parameters: {\n        docs: {\n            description: {\n                component: 'The `NgxMessageBoxComponent` is used to display informations to the user'\n            }\n        }\n    }\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/story-book/src/search-container/search-container.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<NgxSearchContainerComponent>",
                "defaultValue": "{\n    title: 'Components/Search Container',\n    component: NgxSearchContainerComponent,\n    decorators: [\n        moduleMetadata({\n            imports: [\n                CommonModule,\n                NgxSearchInputDirective,\n                FormsModule,\n                MatIconModule,\n                MatListModule,\n                MatTooltipModule\n            ]\n        })\n    ],\n    tags: ['autodocs'],\n    parameters: {\n        docs: {\n            description: {\n                component: 'The `NgxSearchContainerComponent` provides a flexible search interface with customizable tooltips for actions such as clearing, opening, and closing the search. It integrates with an input field via the `ngx-search-input` directive to enable search functionality.'\n            }\n        }\n    },\n    argTypes: {\n        clearTooltip: {\n            control: 'text',\n            description: 'Tooltip text for the clear button in the search container. This is displayed when the user hovers over the clear button.',\n            table: {\n                type: { summary: 'string' },\n                defaultValue: { summary: 'Effacer la recherche' }\n            }\n        },\n        openSearchTooltip: {\n            description: 'Tooltip text for the button that opens the search. This is displayed when the user hovers over the search button.',\n            control: 'text',\n            table: {\n                type: { summary: 'string' },\n                defaultValue: { summary: 'Ouvrir la recherche' }\n            }\n        },\n        closeSearchTooltip: {\n            description: 'Tooltip text for the button that closes the search. This is displayed when the user hovers over the close button.',\n            control: 'text',\n            table: {\n                type: { summary: 'string' },\n                defaultValue: { summary: 'Quitter la recherche' }\n            }\n        }\n    },\n    args: {\n        clearTooltip: 'Effacer la recherche',\n        openSearchTooltip: 'Ouvrir la recherche',\n        closeSearchTooltip: 'Quitter la recherche'\n    }\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/story-book/src/splitter/splitter.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<NgxSplitterComponent>",
                "defaultValue": "{\n    title: 'Components/Splitter',\n    component: NgxSplitterComponent,\n    decorators: [\n        applicationConfig({\n            providers: [\n                provideAnimations() // Provides animations to the application\n            ]\n        }),\n        moduleMetadata({\n            imports: [\n                CommonModule, MatButtonToggleModule, NgxSplitAreaDirective, MatFormFieldModule, FormsModule, MatInputModule, ReactiveFormsModule\n            ]\n        })\n    ],\n    tags: ['autodocs'],\n    argTypes: {\n        direction: {\n            description: 'Sets the direction of the split, which can either be `horizontal` or `vertical`.',\n            control: 'select',\n            options: ['horizontal', 'vertical'],\n            table: {\n                type: { summary: 'NgxSplitterDirection' },\n                defaultValue: { summary: 'horizontal' }\n            }\n        },\n        gutterSize: {\n            description: 'Specifies the width of the gutter in pixels.',\n            control: 'number',\n            table: {\n                type: { summary: 'number' },\n                defaultValue: { summary: '10' }\n            }\n        },\n        disabled: {\n            description: 'Determines whether the splitter is active or disabled.',\n            control: 'boolean',\n            table: {\n                type: { summary: 'boolean' },\n                defaultValue: { summary: 'false' }\n            }\n        },\n        dragStart: {\n            description: 'Event triggered when the user starts dragging the cursor.',\n            action: 'dragStart',\n            table: {\n                type: { summary: 'EventEmitter<void>' }\n            }\n        },\n        dragProgress: {\n            description: 'Event triggered during the cursor drag, providing the progress as a percentage.',\n            action: 'dragProgress',\n            table: {\n                type: { summary: 'EventEmitter<number>' }\n            }\n        },\n        dragEnd: {\n            description: 'Event triggered when the user stops dragging the cursor.',\n            action: 'dragEnd',\n            table: {\n                type: { summary: 'EventEmitter<void>' }\n            }\n        }\n    },\n    parameters: {\n        docs: {\n            description: {\n                component: 'The `NgxSplitterComponent` allows splitting a container into resizable parts either horizontally or vertically. It supports dynamic resizing, event callbacks during drag operations, and flexible gutter sizing.'\n            }\n        }\n    },\n    args: {\n        direction: 'horizontal',\n        gutterSize: '10',\n        disabled: false\n    }\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/story-book/src/overlay/overlay.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<NgxOverlayComponent>",
                "defaultValue": "{\n    title: 'Components/Overlay',\n    component: NgxOverlayComponent,\n    decorators: [\n        applicationConfig({\n            providers: [\n                provideAnimations() // Provides animations to the application\n            ]\n        }),\n        moduleMetadata({\n            imports: [\n                CommonModule, MatButtonModule, MatIconModule, MatFormFieldModule, FormsModule, MatInputModule, ReactiveFormsModule\n            ]\n        })\n    ],\n    tags: ['autodocs'],\n    argTypes: {\n        width: {\n            description: 'Defines the width of the overlay for desktop view.',\n            table: {\n                type: { summary: 'string' }\n            }\n        },\n        widthForMobile: {\n            description: 'Defines the width of the overlay for mobile view. It is only used when isMobile is true.',\n            table: {\n                type: { summary: 'string' },\n                disable: true\n            }\n        },\n        isMobile: {\n            description: 'Determines whether the overlay should use mobile-specific settings.',\n            table: {\n                type: { summary: 'boolean' },\n                disable: true\n            }\n        },\n        overlayBackdropClass: {\n            description: 'CSS class applied to the overlay backdrop. Can be used to style the backdrop.',\n            table: {\n                type: { summary: 'string' }\n            }\n        },\n        overlayContainerClass: {\n            description: 'CSS class applied to the overlay container. Allows customization of the overlay appearance.',\n            table: {\n                type: { summary: 'string' }\n            }\n        }\n    },\n    args: {\n        width: '400px',\n        widthForMobile: '200px',\n        isMobile: false,\n        overlayBackdropClass: '',\n        overlayContainerClass: ''\n    },\n    parameters: {\n        docs: {\n            description: {\n                component: 'The `NgxOverlayComponent` displays an overlay that appears above the page content. It supports custom widths, mobile-specific settings, and customizable CSS classes for both the container and backdrop.'\n            }\n        }\n    }\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/story-book/src/numeric-stepper/numeric-stepper.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<NgxNumericStepperComponent>",
                "defaultValue": "{\n    title: 'Components/Numeric Stepper',\n    component: NgxNumericStepperComponent,\n    decorators: [\n        applicationConfig({\n            providers: [\n                provideAnimations() // Provides animations to the application\n            ]\n        }),\n        moduleMetadata({\n            imports: [\n                CommonModule, NgxNumericStepperComponent, MatFormFieldModule, FormsModule, MatInputModule, ReactiveFormsModule, MatButtonToggleModule\n            ]\n        })\n    ],\n    tags: ['autodocs'],\n    argTypes: {\n        layout: {\n            options: ['vertical', 'horizontal', 'horizontal-inlay'],\n            control: { type: 'select' },\n            description: 'Layout of the stepper control.',\n            table: {\n                defaultValue: {\n                    summary: 'vertical'\n                },\n                type: { summary: 'NgxNumericStepperLayout' }\n            }\n        },\n        arrowIcons: {\n            control: { type: 'boolean' },\n            description: 'Whether to show arrow icons.',\n            table: {\n                defaultValue: {\n                    summary: 'false'\n                },\n                type: { summary: 'boolean' }\n            }\n        },\n        showOnInit: {\n            control: { type: 'boolean' },\n            description: 'Whether to show the stepper on initialization.',\n            table: {\n                defaultValue: {\n                    summary: 'false'\n                },\n                type: { summary: 'boolean' }\n            }\n        },\n        input: {\n            control: { type: 'object' },\n            description: 'The form field control input to be used.',\n            table: {\n                defaultValue: { summary: undefined },\n                type: { summary: 'MatFormFieldControl<unknown>' }\n            }\n        }\n    },\n    args: {\n        layout: 'vertical'\n    },\n    parameters: {\n        docs: {\n            description: {\n                component: 'The `NgxNumericStepperComponent` integrates with a `mat-form-field` containing an input. It provides a hover mask to allow custom increments or decrements using the `+` and `-` buttons. It can be configured with various layouts and options.'\n            }\n        }\n    }\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/story-book/src/status/status.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<NgxStatusComponent>",
                "defaultValue": "{\n    title: 'Components/Status',\n    component: NgxStatusComponent,\n    decorators: [\n        moduleMetadata({\n            imports: [\n                CommonModule, NgxSnackbarComponent, NgxStatusModule, MatButtonToggleModule\n            ],\n            providers: [NgxStatusService]\n        })\n    ],\n    tags: ['autodocs'],\n    argTypes: {\n        status: {\n            description: 'The object containing the status details to be displayed.',\n            control: {\n                type: 'object'\n            },\n            table: {\n                type: { summary: 'NgxStatus' },\n                defaultValue: { summary: 'undefined' }\n            }\n        }\n    },\n    args: {\n    },\n    parameters: {\n        docs: {\n            description: {\n                component: 'The `NgxStatusComponent` displays informational messages in a popup, leveraging the `NgxSnackbarComponent`. It supports various types of notifications, custom actions, and detailed technical information.'\n            }\n        }\n    }\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/story-book/src/user-card/user-card.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<NgxUserCardComponent>",
                "defaultValue": "{\n    title: 'Components/User Card',\n    component: NgxUserCardComponent,\n    tags: ['autodocs'],\n    decorators: [\n        moduleMetadata({\n            imports: [\n                MatButtonToggleModule\n            ]\n        })\n    ],\n    parameters: {\n        layout: 'centered',\n        docs: {\n            description: {\n                component: 'The `NgxUserCardComponent` displays user information. The UserCard can be expanded or compressed, showing or hiding additional details based on the `expanded` input.'\n            }\n        }\n    },\n    argTypes: {\n        expanded: {\n            control: 'boolean',\n            table: {\n                defaultValue: {\n                    summary: 'true'\n                },\n                type: { summary: 'boolean' }\n            },\n            description: 'Set to false to have a compressed UserCard with less information.'\n        },\n        user: {\n            control: 'object',\n            table: {\n                type: { summary: 'NgxUserCard' }\n            },\n            description: 'User information object for displaying in the card.'\n        }\n    },\n    args: {\n        user: {\n            title: 'Docteur',\n            firstname: 'Jean',\n            lastname: 'PATATE',\n            initials: 'jpat',\n            type: 'Type',\n            email: 'jean.patate@hug.ch',\n            role: 'Medecin',\n            groupFunctionLabel: 'Group',\n            familyCode: 'Infirmier-e', // This value will influence badge color\n            functionSefName: 'SefNameFunction',\n            functionSefCode: 'SefCodeFunction',\n            organisation: 'HUG',\n            speciality: 'Neurochirurgie',\n            specialty1: 'Dermatologie',\n            specialty2: 'Pedicure',\n            esoN3Label: 'EsoN3Label',\n            login: 'PatateLogin',\n            phone: '+44 150 509 39',\n            bip: '8859595',\n            mobile: '+44 150 509 39',\n            address: 'Carouge, 7 Rue St Julien',\n            city: 'Carouge',\n            zipCode: '1227'\n        },\n        expanded: false\n    }\n}"
            },
            {
                "name": "minimumRequired",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/story-book/src/status/status.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n    parameters: {\n        docs: {\n            description: {\n                story: 'This example demonstrates the `NgxStatusComponent` with only the required fields: `title` and `type`. Additional fields are optional.'\n            }\n        }\n    },\n    render: args => ({\n        props: {\n            ...args\n        },\n        template: `\n        <section class=\"status\">\n          <ngx-status [status]=\"status\"></ngx-status>\n        </section>\n      `\n    }),\n    args: {\n        status: {\n            title: 'Sample Status Title',\n            type: 'info'\n        }\n    }\n}"
            },
            {
                "name": "navigationExample",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/story-book/src/overlay/overlay.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n    parameters: {\n        docs: {\n            description: {\n                story: 'Here an example of navigation through the component'\n            }\n        }\n    },\n    render: args => ({\n        props: {\n            ...args,\n            selected: '',\n            items: [\n                { text: 'Refresh' },\n                { text: 'Settings' },\n                { text: 'Help', disabled: true },\n                { text: 'Sign Out' }\n            ],\n            select(text: string): void {\n                this['selected'] = text;\n            }\n        },\n        template: `\n        <section class=\"overlay\">\n            <span class=\"iconOverlayContainer\">\n                <button mat-icon-button (click)=\"anchorMenu.show($event)\">\n                    <mat-icon>more_vert</mat-icon>\n                </button>\n                Clicking these will navigate\n            </span>\n            <ngx-overlay #anchorMenu overlayContainerClass=\"ngx-menu\" positions=\"start top start bottom\">\n                <div class=\"ngx-menu-content anchor-menu\">\n                    <a class=\"ngx-menu-item\" *ngFor=\"let item of items\" href=\"http://www.google.com\" target=\"_blank\">{{ item.text }}</a>\n                </div>\n            </ngx-overlay>\n        </section>\n      `\n    })\n}"
            },
            {
                "name": "noActions",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/story-book/src/message-box/message-box.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n    parameters: {\n        docs: {\n            description: {\n                story: 'This story shows the NgxMessageBoxComponent without any actions. It demonstrates how the component looks and behaves when there are no interactive elements in the footer.'\n            }\n        }\n    },\n    render: args => ({\n        props: {\n            ...args\n        },\n        template: `\n        <section class=\"message-box\">\n            <ngx-message-box\n                [type]=\"type\"\n                [title]=\"title\"\n                [icon]=\"icon\"\n                [horizontal]=\"horizontal\"\n                [attr.horizontal]=\"horizontal|| null\"\n                [showCloseIcon]=\"showCloseIcon\">\n                <p>Content inside the <b>message box</b></p>\n                <p>No actions available in this example.</p>\n            </ngx-message-box>\n        </section>\n      `\n    }),\n    args: {\n        type: 'success',\n        title: 'Success Message',\n        icon: 'done',\n        horizontal: false,\n        showCloseIcon: true\n    }\n}"
            },
            {
                "name": "noCloseIcon",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/story-book/src/message-box/message-box.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n    parameters: {\n        docs: {\n            description: {\n                story: 'This story shows the NgxMessageBoxComponent without the close icon. This configuration is useful if you want to prevent the user from closing the message box manually.'\n            }\n        }\n    },\n    render: args => ({\n        props: {\n            ...args\n        },\n        template: `\n        <section class=\"message-box\">\n            <ngx-message-box\n                [type]=\"type\"\n                [title]=\"title\"\n                [icon]=\"icon\"\n                [actions]=\"actions\"\n                [horizontal]=\"horizontal\"\n                [attr.horizontal]=\"horizontal|| null\"\n                [showCloseIcon]=\"false\">\n                <p>Content inside the <b>message box</b></p>\n                <p>This message box does not have a close icon.</p>\n            </ngx-message-box>\n        </section>\n      `\n    }),\n    args: {\n        type: 'danger',\n        title: 'Error Message',\n        icon: 'error',\n        actions: [\n            {\n                text: 'Retry',\n                action: (): void => alert('Retry action'),\n                icon: 'refresh'\n            }\n        ],\n        horizontal: true,\n        showCloseIcon: false\n    }\n}"
            },
            {
                "name": "notExpandedUserCard",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/story-book/src/user-card/user-card.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n    parameters: {\n        docs: {\n            description: {\n                story: 'You can set the \"expanded\" property to false to have a compressed UserCard with less information.'\n            }\n        }\n    }\n}"
            },
            {
                "name": "overlayClass",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/story-book/src/overlay/overlay.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n    parameters: {\n        docs: {\n            description: {\n                story: 'Customize the overlay appearance by applying custom CSS classes. Use <code>overlayContainerClass</code> for the overlay itself and <code>overlayBackdropClass</code> for the backdrop.'\n            }\n        }\n    },\n    render: args => ({\n        props: {\n            ...args,\n            selected: '',\n            items: [\n                { text: 'Refresh' },\n                { text: 'Settings' },\n                { text: 'Help', disabled: true },\n                { text: 'Sign Out' }\n            ],\n            select(text: string): void {\n                this['selected'] = text;\n            }\n        },\n        template: `\n        <section class=\"overlay\">\n            <span class=\"iconOverlayContainer\">\n                <button mat-icon-button (click)=\"menu.show($event)\">\n                    <mat-icon>more_vert</mat-icon>\n                </button>\n                < Click here\n            </span>\n\n            <ngx-overlay #menu [overlayContainerClass]=\"overlayContainerClass\" [overlayBackdropClass]=\"overlayBackdropClass\">\n                <div class=\"ngx-menu-content button-menu\">\n                    <button mat-button class=\"ngx-menu-item\" *ngFor=\"let item of items\" (click)=\"select(item.text); menu.close()\">{{ item.text }}</button>\n                </div>\n            </ngx-overlay>\n        </section>\n      `\n    }),\n    args: {\n        overlayContainerClass: 'myCustomContainerClass',\n        overlayBackdropClass: 'myCustomBackdropClass'\n    }\n}"
            },
            {
                "name": "overlayForMobile",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/story-book/src/overlay/overlay.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n    tags: ['!dev', '!autodocs'], // Pour disable sur le menu à gauche !dev, et sur la doc !autodocs\n    parameters: {\n        docs: {\n            description: {\n                story: 'Set a <code>widthForMobile</code> that is used when <code>isMobile</code> is true to adjust the overlay width for mobile devices.'\n            }\n        }\n    },\n    render: args => ({\n        props: {\n            ...args\n        },\n        template: `\n        <section class=\"overlay\">\n            <button #owner mat-icon-button (click)=\"menu.show($event)\">\n                <mat-icon>more_vert</mat-icon>\n            </button>\n\n            <ngx-overlay #menu overlayContainerClass=\"ngx-menu\" [width]=\"width\" [widthForMobile]=\"widthForMobile\" [isMobile]=\"isMobile\" overlayContainerClass=\"customContainerForWidth\" [ownerElement]=\"owner\">\n                <div class=\"ngx-menu-content button-menu\">\n                    Try to modify the width of the NgxOverlay component this text will be limited in width by this value\n                    <br />\n                    <br />\n                    Current width: [{{menu.width}}]\n                </div>\n            </ngx-overlay>\n        </section>\n      `\n    }),\n    args: {\n        widthForMobile: '200px',\n        isMobile: true\n    }\n}"
            },
            {
                "name": "overlayWidth",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/story-book/src/overlay/overlay.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n    parameters: {\n        docs: {\n            description: {\n                story: 'Configure the width of the overlay using the <code>width</code> property. Adjust the input field to see changes in real-time.'\n            }\n        }\n    },\n    render: args => ({\n        props: {\n            ...args,\n            widthChanged(value: string): void {\n                this['width'] = value;\n            }\n        },\n        template: `\n        <section class=\"overlay\">\n            <button mat-icon-button (click)=\"menu.show($event)\">\n                <mat-icon>more_vert</mat-icon>\n            </button>\n\n            <ngx-overlay #menu overlayContainerClass=\"ngx-menu\" [width]=\"width\" overlayContainerClass=\"customContainerForWidth\">\n                <div class=\"ngx-menu-content button-menu\">\n                    Try to modify the width of the NgxOverlay component. This text will be limited in width by this value\n                    <br />\n                    <br />\n                    Current width: [{{menu.width}}]\n                </div>\n            </ngx-overlay>\n\n            <div class=\"grouped\">\n                <mat-form-field appearance=\"outline\">\n                    <mat-label>Width</mat-label>\n                    <input matInput type=\"string\" [ngModel]=\"width\" (ngModelChange)=\"widthChanged($event)\" />\n                    <mat-hint><strong>try 900</strong></mat-hint>\n                </mat-form-field>\n            </div>\n        </section>\n      `\n    })\n}"
            },
            {
                "name": "ownerElement",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/story-book/src/overlay/overlay.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n    tags: ['!dev', '!autodocs'], // Pour disable sur le menu à gauche !dev, et sur la doc !autodocs\n    parameters: {\n        docs: {\n            description: {\n                story: 'You can provide two custom css classes to the component: <ul><li><code>overlayContainerClass</code>allows you to customize the overlay itself</li><li><code>overlayBackdropClass</code>allows you to customize the overlay backdrop</li></ul>'\n            }\n        }\n    },\n    render: args => ({\n        props: {\n            ...args,\n            selected: '',\n            items: [\n                { text: 'Refresh' },\n                { text: 'Settings' },\n                { text: 'Help', disabled: true },\n                { text: 'Sign Out' }\n            ],\n            select(text: string): void {\n                this['selected'] = text;\n            }\n        },\n        template: `\n        <section class=\"overlay\">\n            <span class=\"iconOverlayContainer\">\n                <button mat-icon-button (click)=\"menu.show($event)\">\n                    <mat-icon>more_vert</mat-icon>\n                </button>\n                < Click here\n            </span>\n\n            <div class=\"ownerContainer\">\n                <span id=\"owner\" #owner>I am is owner</span>\n            </div>\n\n            <ngx-overlay #menu [overlayContainerClass]=\"overlayContainerClass\" [overlayBackdropClass]=\"overlayBackdropClass\" [ownerElement]=\"owner\">\n                <div class=\"ngx-menu-content button-menu\">\n                    <button mat-button class=\"ngx-menu-item\" *ngFor=\"let item of items\" (click)=\"select(item.text); menu.close()\">{{ item.text }}</button>\n                </div>\n            </ngx-overlay>\n        </section>\n      `\n    }),\n    args: {\n        overlayContainerClass: 'myCustomContainerClass',\n        overlayBackdropClass: 'myCustomBackdropClass'\n    }\n}"
            },
            {
                "name": "prefixAndSuffix",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/story-book/src/numeric-stepper/numeric-stepper.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n    parameters: {\n        docs: {\n            description: {\n                story: 'This section allows you to visualize the component with different `mat-form-field` configurations, including custom prefixes and suffixes.'\n            }\n        }\n    },\n    render: args => ({\n        props: {\n            ...args,\n            value: 115,\n            prefix: '',\n            suffix: 'cm',\n            prefixChanged(value: string): void {\n                this['prefix'] = value;\n            },\n            suffixChanged(value: string): void {\n                this['suffix'] = value;\n            }\n        },\n        template: `\n            <section>\n                <div class=\"grouped\">\n                    <div ngx-numeric-stepper-container>\n                        <mat-form-field appearance=\"outline\">\n                            <mat-label>vertical layout</mat-label>\n                            <span matTextPrefix=\"\" *ngIf=\"prefix\">{{ prefix }}</span>\n                            <input matInput type=\"number\" [ngModel]=\"value\" #numericStepper=\"ngModel\" />\n                            <span matTextSuffix *ngIf=\"suffix\">{{ suffix }}</span>\n                            <ngx-numeric-stepper (increment)=\"value = value + 5\" (decrement)=\"value = value - 5\" layout=\"vertical\" showOnInit></ngx-numeric-stepper>\n                        </mat-form-field>\n                    </div>\n                     <div ngx-numeric-stepper-container>\n                        <mat-form-field appearance=\"fill\">\n                            <mat-label>vertical layout</mat-label>\n                            <span matTextPrefix=\"\" *ngIf=\"prefix\">{{ prefix }}</span>\n                            <input matInput type=\"number\" [ngModel]=\"value\" #numericStepper=\"ngModel\" />\n                            <span matTextSuffix *ngIf=\"suffix\">{{ suffix }}</span>\n                            <ngx-numeric-stepper (increment)=\"value = value + 5\" (decrement)=\"value = value - 5\" layout=\"vertical\" showOnInit></ngx-numeric-stepper>\n                        </mat-form-field>\n                    </div>\n                </div>\n                <br />\n                <div class=\"grouped\">\n                    <div ngx-numeric-stepper-container>\n                        <mat-form-field appearance=\"outline\">\n                            <mat-label>horizontal layout</mat-label>\n                            <span matTextPrefix=\"\" *ngIf=\"prefix\">{{ prefix }}</span>\n                            <input matInput type=\"number\" [ngModel]=\"value\" #numericStepper=\"ngModel\" />\n                            <span matTextSuffix *ngIf=\"suffix\">{{ suffix }}</span>\n                            <ngx-numeric-stepper (increment)=\"value = value + 5\" (decrement)=\"value = value - 5\" layout=\"horizontal\" showOnInit></ngx-numeric-stepper>\n                        </mat-form-field>\n                    </div>\n                    <div ngx-numeric-stepper-container>\n                        <mat-form-field appearance=\"fill\">\n                            <mat-label>horizontal layout</mat-label>\n                            <span matTextPrefix=\"\" *ngIf=\"prefix\">{{ prefix }}</span>\n                            <input matInput type=\"number\" [ngModel]=\"value\" #numericStepper=\"ngModel\" />\n                            <span matTextSuffix *ngIf=\"suffix\">{{ suffix }}</span>\n                            <ngx-numeric-stepper (increment)=\"value = value + 5\" (decrement)=\"value = value - 5\" layout=\"horizontal\" showOnInit></ngx-numeric-stepper>\n                        </mat-form-field>\n                    </div>\n                </div>\n                <br />\n                <div class=\"grouped\">\n                    <div ngx-numeric-stepper-container>\n                        <mat-form-field appearance=\"outline\">\n                            <mat-label>horizontal-inlay layout</mat-label>\n                            <span matTextPrefix=\"\" *ngIf=\"prefix\">{{ prefix }}</span>\n                            <input matInput type=\"number\" [ngModel]=\"value\" #numericStepper=\"ngModel\" />\n                            <span matTextSuffix *ngIf=\"suffix\">{{ suffix }}</span>\n                            <ngx-numeric-stepper (increment)=\"value = value + 5\" (decrement)=\"value = value - 5\" layout=\"horizontal-inlay\" showOnInit></ngx-numeric-stepper>\n                        </mat-form-field>\n                    </div>\n                    <div ngx-numeric-stepper-container>\n                        <mat-form-field appearance=\"fill\">\n                            <mat-label>horizontal-inlay layout</mat-label>\n                            <span matTextPrefix=\"\" *ngIf=\"prefix\">{{ prefix }}</span>\n                            <input matInput type=\"number\" [ngModel]=\"value\" #numericStepper=\"ngModel\" />\n                            <span matTextSuffix *ngIf=\"suffix\">{{ suffix }}</span>\n                            <ngx-numeric-stepper (increment)=\"value = value + 5\" (decrement)=\"value = value - 5\" layout=\"horizontal-inlay\" showOnInit></ngx-numeric-stepper>\n                        </mat-form-field>\n                    </div>\n                </div>\n                <br />\n                <h4>Try your own suffixes and prefixes</h4>\n                <br />\n                <div class=\"grouped\">\n                        <mat-form-field appearance=\"outline\">\n                            <mat-label>prefix</mat-label>\n                            <input matInput type=\"string\" [ngModel]=\"prefix\" (ngModelChange)=\"prefixChanged($event)\" />\n                        </mat-form-field>\n                        <mat-form-field appearance=\"outline\">\n                            <mat-label>suffix</mat-label>\n                            <input matInput type=\"string\" [ngModel]=\"suffix\" (ngModelChange)=\"suffixChanged($event)\" />\n                        </mat-form-field>\n                </div>\n            </section>\n          `,\n        styles: [`\n            section {\n                background-color: white;\n                font-family: 'Roboto';\n            }\n            .matButtonContainer {\n                padding-top: 20px;\n                display: flex;\n                justify-content: center;\n            }\n            .grouped {\n                display: flex;\n                gap: 5rem;\n            }\n          `]\n    }),\n    args: {\n        layout: 'vertical'\n    }\n}"
            },
            {
                "name": "preview",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/story-book/preview.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Preview",
                "defaultValue": "{\n    parameters: {\n        controls: {\n            matchers: {\n                color: /(background|color)$/i,\n                date: /Date$/i\n            }\n        },\n        layout: 'centered'\n    }\n}"
            },
            {
                "name": "rightPanel",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/story-book/src/layout/layout.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n    parameters: {\n        docs: {\n            description: {\n                story: 'The <code>layoutRight</code> template inside the component adds a right panel to it.<ul><li>A button to Open/Close the right panel will be automatically added to the toolbar</li><li>>You can add a <code>filters-chip-list</code> directive that can manage your filters</li></ul>'\n            }\n        }\n    },\n    render: args => ({\n        props: {\n            ...args,\n            log: (msg: string, event?: Event): void => {\n                console.log(msg, event);\n            }\n        },\n        template: `\n            <section class=\"moreHeight\">\n                <ngx-layout>\n                    <ng-template #layoutToolbar>\n                    </ng-template>\n\n                    <!-- Right panel -->\n                    <ng-template #layoutRight>\n                        <div class=\"layout-right-container\">\n                            Layout right\n                            <div filters-chip-list>\n                                <mat-chip-listbox class=\"mat-mdc-chip-set-stacked\" aria-label=\"Color selection\">\n                                    <mat-chip-option>filter 1</mat-chip-option>\n                                    <mat-chip-option>filter 2</mat-chip-option>\n                                    <mat-chip-option>filter 3</mat-chip-option>\n                                    <mat-chip-option>filter 4</mat-chip-option>\n                                    <mat-chip-option>filter 5</mat-chip-option>\n                                </mat-chip-listbox>\n                            </div>\n                        </div>\n                    </ng-template>\n                    <div class=\"content-container\">Layout content</div>\n                </ngx-layout>\n            </section>\n          `\n    })\n}"
            },
            {
                "name": "searchWithLists",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/story-book/src/search-container/search-container.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n    parameters: {\n        docs: {\n            description: {\n                story: 'Demonstrates the search container with a full list and search functionality. The search input filters the list based on user input and displays the results in separate sections.'\n            }\n        }\n    },\n    render: args => ({\n        props: {\n            ...args,\n            fullList: ['lion',\n                'tigre',\n                'éléphant',\n                'giraffe',\n                'panda',\n                'koala',\n                'limace',\n                'cygne',\n                'chat',\n                'ours',\n                'faisan',\n                'dauphin',\n                'paon',\n                'furet',\n                'panda',\n                'phoque',\n                'crocodile',\n                'gorille',\n                'raie',\n                'chinchilla',\n                'cafard',\n                'faisan',\n                'corbeau',\n                'dromadaire',\n                'alpaga',\n                'aigle',\n                'espadon',\n                'canari',\n                'guépard'],\n            searchList: [],\n            searchModel: '',\n            searchQueryChanged(event: string): void {\n                // If search query is empty, reset searchList to fullList\n                if (!event || event === '') {\n                    this['searchList'] = this['fullList'] as string[];\n                } else {\n                    this['searchList'] = (this['fullList'] as string[]).filter((animal: string) => animal.includes(event));\n\n                }\n            }\n        },\n        template: `\n            <section>\n              <ngx-search-container [clearTooltip]=\"clearTooltip\">\n                <input ngx-search-input type=\"text\" placeholder=\"Rechercher dans la liste\" [(ngModel)]=\"searchModel\" (ngModelChange)=\"searchQueryChanged($event)\" />\n              </ngx-search-container>\n              <br />\n              <div class=\"listsContainer\">\n                <div class=\"fullList\">\n                  <span>Liste complète</span>\n                  <mat-list role=\"list\">\n                    <mat-list-item role=\"listitem\" *ngFor=\"let animal of fullList\">{{ animal }}</mat-list-item>\n                  </mat-list>\n                </div>\n                <div class=\"searchList\">\n                  <span>Liste issue de la recherche</span>\n                  <mat-list role=\"list\">\n                    <mat-list-item role=\"listitem\" *ngFor=\"let animal of searchList\">{{ animal }}</mat-list-item>\n                  </mat-list>\n                </div>\n              </div>\n            </section>\n          `,\n        styles: [`\n            section {\n              padding: 5rem;\n              font-family: 'Roboto';\n            }\n\n            .listsContainer {\n              display: flex;\n              gap: 5px;\n            }\n\n            .fullList,\n            .searchList {\n              flex: auto;\n            }\n\n            .mdc-list-item.mdc-list-item--with-one-line {\n              height: 24px;\n            }\n          `]\n    }),\n    args: {\n        clearTooltip: 'Effacer la recherche'\n    }\n}"
            },
            {
                "name": "showOnInit",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/story-book/src/numeric-stepper/numeric-stepper.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n    tags: ['!dev', '!autodocs'], // Pour disable sur le menu à gauche !dev, et sur la doc !autodocs\n    render: args => ({\n        props: {\n            ...args,\n            value: 115,\n            appearance: 'outline'\n        },\n        template: `\n            <section>\n                <div ngx-numeric-stepper-container>\n                    <mat-form-field [appearance]=\"appearance\">\n                <mat-label>Show On Init True</mat-label>\n                        <input matInput type=\"number\" [ngModel]=\"value\" #numericStepper=\"ngModel\" />\n                        <ngx-numeric-stepper (increment)=\"value = value + 5\" (decrement)=\"value = value - 5\" [layout]=\"layout\" [arrowIcons]=\"arrowIcons\" [showOnInit]=\"showOnInit\" [input]=\"input\" showOnInit></ngx-numeric-stepper>\n                    </mat-form-field>\n                </div>\n            </section>\n          `,\n        styles: [`\n            section {\n                background-color: white;\n            }\n          `]\n    }),\n    args: {\n        showOnInit: true\n    }\n}"
            },
            {
                "name": "standard",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/story-book/src/list-loader/list-loader.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n    parameters: {\n        docs: {\n            description: {\n                story: 'Displays the default loader without a label. This is useful when no additional context is needed.'\n            }\n        }\n    },\n    args: {\n        label: ''\n    }\n}"
            },
            {
                "name": "standard",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/story-book/src/search-container/search-container.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n    parameters: {\n        docs: {\n            description: {\n                story: 'Displays a basic search container with default tooltips. Includes an input field for search queries.'\n            }\n        }\n    },\n    render: args => ({\n        props: args,\n        template: `\n            <ngx-search-container\n              [clearTooltip]=\"clearTooltip\"\n              [openSearchTooltip]=\"openSearchTooltip\"\n              [closeSearchTooltip]=\"closeSearchTooltip\">\n              <input ngx-search-input type=\"text\" placeholder=\"Rechercher dans la liste\" [(ngModel)]=\"searchModel\" />\n            </ngx-search-container>\n          `\n    })\n}"
            },
            {
                "name": "standard",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/story-book/src/splitter/splitter.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n    parameters: {\n        docs: {\n            description: {\n                story: 'This story demonstrates the standard usage of `NgxSplitterComponent`, where the container is split into two resizable areas in a horizontal direction. The first area takes 25% of the space, while the second area takes 75%.'\n            }\n        }\n    },\n    render: args => ({\n        props: args,\n        template: `\n        <section class=\"splitter\">\n            <ngx-splitter [direction]=\"direction\" [gutterSize]=\"gutterSize\" [disabled]=\"disabled\" order=\"1\">\n                <ngx-split-area size=\"25\" minSizePixel=\"100\">\n                    <p>Lorem ipsum dolor sit amet...</p>\n                </ngx-split-area>\n                <ngx-split-area size=\"75\" minSizePixel=\"100\">\n                    <p>Sed ut perspiciatis unde omnis iste natus erro...</p>\n                </ngx-split-area>\n            </ngx-splitter>\n        </section>\n        `\n    }),\n    args: {\n        direction: 'horizontal'\n    }\n}"
            },
            {
                "name": "standard",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/story-book/src/overlay/overlay.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n    render: args => ({\n        props: {\n            ...args,\n            selected: '',\n            items: [\n                { text: 'Refresh' },\n                { text: 'Settings' },\n                { text: 'Help', disabled: true },\n                { text: 'Sign Out' }\n            ],\n            select(text: string): void {\n                this['selected'] = text;\n            }\n        },\n        template: `\n        <section class=\"overlay\">\n            <button mat-icon-button (click)=\"menu.show($event)\">\n                <mat-icon>more_vert</mat-icon>\n            </button>\n\n            <ngx-overlay #menu overlayContainerClass=\"ngx-menu\" [width]=\"width\" [widthForMobile]=\"widthForMobile\" [isMobile]=\"isMobile\">\n                <div class=\"ngx-menu-content button-menu\">\n                    <button mat-button class=\"ngx-menu-item\" *ngFor=\"let item of items\" (click)=\"select(item.text); menu.close()\">{{ item.text }}</button>\n                </div>\n            </ngx-overlay>\n        </section>\n      `\n    })\n}"
            },
            {
                "name": "standard",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/story-book/src/numeric-stepper/numeric-stepper.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n    render: args => ({\n        props: {\n            ...args,\n            value: 115,\n            appearance: 'outline'\n        },\n        template: `\n            <section>\n                <div ngx-numeric-stepper-container>\n                    <mat-form-field [appearance]=\"appearance\">\n                        <mat-label>This is my label</mat-label>\n                        <input matInput type=\"number\" [ngModel]=\"value\" #numericStepper=\"ngModel\" />\n                        <ngx-numeric-stepper (increment)=\"value = value + 5\" (decrement)=\"value = value - 5\" [layout]=\"layout\" [arrowIcons]=\"arrowIcons\" [showOnInit]=\"showOnInit\" [input]=\"input\" showOnInit></ngx-numeric-stepper>\n                    </mat-form-field>\n                </div>\n            </section>\n          `,\n        styles: [`\n            section {\n                background-color: white;\n            }\n          `]\n    })\n}"
            },
            {
                "name": "standard",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/story-book/src/user-card/user-card.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n    args: {\n        expanded: true\n    }\n}"
            },
            {
                "name": "statusActions",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/story-book/src/status/status.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n    parameters: {\n        docs: {\n            description: {\n                story: 'This example demonstrates how to add actions to the `NgxStatusComponent`. Each action can be triggered with a callback.'\n            }\n        }\n    },\n    render: args => ({\n        props: {\n            ...args\n        },\n        template: `\n        <section class=\"status\">\n          <ngx-status [status]=\"status\"></ngx-status>\n        </section>\n      `\n    }),\n    args: {\n        status: {\n            title: 'Sample Status Title',\n            type: 'info',\n            text: 'Message with multiple actions.',\n            actions: [\n                {\n                    label: 'Action 1',\n                    callback: (): void => alert('Action 1 executed.')\n                },\n                {\n                    label: 'Action 2',\n                    callback: (): void => alert('Action 2 executed.')\n                }\n            ]\n        }\n    }\n}"
            },
            {
                "name": "statusCustomCssClass",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/story-book/src/status/status.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n    parameters: {\n        docs: {\n            description: {\n                story: 'This example shows how to apply custom CSS styles to the `NgxStatusComponent` using the `className` property.'\n            }\n        }\n    },\n    render: args => ({\n        props: {\n            ...args\n        },\n        template: `\n        <section class=\"status\">\n            <ngx-status [status]=\"status\"></ngx-status>\n        </section>\n      `\n    }),\n    args: {\n        status: {\n            title: 'Sample Status Title',\n            type: 'info',\n            text: 'Message with custom CSS class.',\n            className: 'my-custom-css-class'\n        }\n    }\n}"
            },
            {
                "name": "statusDuration",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/story-book/src/status/status.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n    parameters: {\n        docs: {\n            description: {\n                story: 'This example demonstrates setting a custom `duration` for the `NgxStatusComponent`. By default, the duration is 30 seconds for danger types and 8 seconds for other types.'\n            }\n        }\n    },\n    render: args => ({\n        props: {\n            ...args\n        },\n        template: `\n        <section class=\"status\">\n            <ngx-status [status]=\"status\"></ngx-status>\n        </section>\n      `\n    }),\n    args: {\n        status: {\n            title: 'Sample Status Title',\n            type: 'info',\n            text: 'Message with custom duration.',\n            duration: 3000 // Duration in milliseconds\n        }\n    }\n}"
            },
            {
                "name": "statusTechnicalText",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/story-book/src/status/status.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n    parameters: {\n        docs: {\n            description: {\n                story: 'This example shows how to include `technicalText` and `date` in the `NgxStatusComponent`. An info icon will appear, and clicking it will show the technical details in a dialog.'\n            }\n        }\n    },\n    render: args => ({\n        props: {\n            ...args\n        },\n        template: `\n        <section class=\"status\">\n            <ngx-status [status]=\"status\"></ngx-status>\n        </section>\n      `\n    }),\n    args: {\n        status: {\n            title: 'Error Status',\n            type: 'danger',\n            date: new Date(),\n            text: 'This is an error message.',\n            technicalText: 'Detailed technical information about the error.'\n        }\n    }\n}"
            },
            {
                "name": "statusText",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/story-book/src/status/status.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n    parameters: {\n        docs: {\n            description: {\n                story: 'This example demonstrates how to use the `text` property to display additional information in the status component.'\n            }\n        }\n    },\n    render: args => ({\n        props: {\n            ...args\n        },\n        template: `\n        <section class=\"status\">\n          <ngx-status [status]=\"status\"></ngx-status>\n        </section>\n      `\n    }),\n    args: {\n        status: {\n            title: 'Sample Status Title',\n            type: 'info',\n            text: 'Detailed message providing more context about the status.'\n        }\n    }\n}"
            },
            {
                "name": "statusType",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/story-book/src/status/status.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n    parameters: {\n        docs: {\n            description: {\n                story: 'This example illustrates the different `type` values that the `NgxStatusComponent` can have: `primary`, `info`, `success`, `warn`, and `danger`. Use the buttons to switch between types.'\n            }\n        }\n    },\n    render: args => ({\n        props: {\n            ...args,\n            typeChanged(type: string): void {\n                this['status'] = {\n                    title: 'Sample Status Title',\n                    type: type,\n                    text: 'Sample text for the status message.'\n                };\n            }\n        },\n        template: `\n        <section class=\"status\">\n            <ngx-status [status]=\"status\"></ngx-status>\n            <br />\n            <div class=\"matButtonContainer\">\n                <mat-button-toggle-group name=\"type\" hideSingleSelectionIndicator=\"true\" (change)=\"typeChanged($event.value)\" [value]=\"status.type\">\n                    <mat-button-toggle value=\"primary\">primary</mat-button-toggle>\n                    <mat-button-toggle value=\"info\">info</mat-button-toggle>\n                    <mat-button-toggle value=\"success\">success</mat-button-toggle>\n                    <mat-button-toggle value=\"warn\">warn</mat-button-toggle>\n                    <mat-button-toggle value=\"danger\">danger</mat-button-toggle>\n                </mat-button-toggle-group>\n            </div>\n        </section>\n      `\n    }),\n    args: {\n        status: {\n            title: 'Sample Status Title',\n            type: 'success',\n            text: 'Sample text for the status message.'\n        }\n    }\n}"
            },
            {
                "name": "successWithActions",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/story-book/src/message-box/message-box.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n    parameters: {\n        docs: {\n            description: {\n                story: 'This story shows the NgxMessageBoxComponent with a \"success\" type, horizontal layout, and a list of actions. It illustrates how actions can be used within the message box.'\n            }\n        }\n    },\n    render: args => ({\n        props: {\n            ...args\n        },\n        template: `\n        <section class=\"message-box\">\n            <ngx-message-box\n                [type]=\"type\"\n                [title]=\"title\"\n                [horizontal]=\"horizontal\"\n                [attr.horizontal]=\"horizontal|| null\"\n                [actions]=\"actions\">\n                Un message \"success\" avec <b>actions</b>\n            </ngx-message-box>\n        </section>\n      `\n    }),\n    args: {\n        type: 'success',\n        horizontal: true,\n        actions: [\n            {\n                text: 'OK',\n                action: (): void => alert('OK clicked'),\n                icon: 'check'\n            },\n            {\n                text: 'Cancel',\n                action: (): void => alert('Cancel clicked'),\n                icon: 'cancel'\n            }\n        ],\n        showCloseIcon: true\n    }\n}"
            },
            {
                "name": "textContainerExample",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/story-book/src/overlay/overlay.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n    parameters: {\n        docs: {\n            description: {\n                story: 'An example demonstrating the NgxOverlay component with a large block of text and a custom style.'\n            }\n        }\n    },\n    render: args => ({\n        props: {\n            ...args,\n            selected: '',\n            items: [\n                { text: 'Refresh' },\n                { text: 'Settings' },\n                { text: 'Help', disabled: true },\n                { text: 'Sign Out' }\n            ],\n            select(text: string): void {\n                this['selected'] = text;\n            }\n        },\n        template: `\n        <section class=\"overlay\">\n            <span class=\"iconOverlayContainer\">\n                Click here >\n\n                <button mat-icon-button (click)=\"ipsum.show($event)\">\n                    <mat-icon>more_vert</mat-icon>\n                </button>\n            </span>\n\n            <ngx-overlay #ipsum [overlayContainerClass]=\"overlayContainerClass\" [overlayBackdropClass]=\"overlayBackdropClass\">\n                <div class=\"ngx-menu-content\">\n                    Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla euismod, lacus nec imperdiet pretium, purus nisi hendrerit velit, non laoreet est velit sit amet arcu. Cras eget malesuada tortor. Aliquam vitae libero tellus. Quisque at velit sed arcu feugiat imperdiet ut quis augue. Cras laoreet eleifend tellus varius laoreet. Vestibulum vulputate sagittis sapien, eget euismod metus. Sed ut lacus at risus tristique blandit. Cras at nibh augue. Nam felis felis, facilisis sed fringilla a, porta id magna. Interdum et malesuada fames ac ante ipsum primis in faucibus. Nunc eget velit a enim pharetra volutpat quis eget lacus. Donec imperdiet magna metus, auctor pretium nibh dictum eu. Sed pharetra tristique sodales. Nam dapibus porta imperdiet. Pellentesque elementum tristique\n                    molestie. Sed at dolor et mauris vehicula vestibulum. Maecenas cursus vulputate convallis. Quisque eu imperdiet nunc. Nunc ut feugiat eros. Integer aliquam nibh nec est sollicitudin dictum at et diam. Aliquam neque magna, condimentum non dolor in, faucibus malesuada mauris. Sed dictum massa neque, quis venenatis justo consequat sed. Fusce imperdiet purus nec neque vestibulum, vel placerat enim porta. Duis turpis purus, suscipit vitae scelerisque sed, sollicitudin a sem. Nullam orci risus, suscipit non mollis non, semper sit amet enim. In vel eros justo. Etiam gravida dolor vitae commodo tincidunt. Ut consequat id odio ac scelerisque. Phasellus fringilla et nisi at convallis. Nunc efficitur est in luctus interdum. Curabitur risus turpis, gravida in ex id, elementum convallis\n                    augue. Duis laoreet condimentum purus, sit amet vulputate dolor finibus ac. Proin consectetur ullamcorper orci ut ullamcorper. Vivamus ornare leo vel urna molestie porta. Vivamus malesuada velit eros, non rutrum urna elementum ut. Pellentesque sed lorem tempor, consectetur sem in, condimentum justo. Vivamus eu nunc interdum, mattis turpis nec, accumsan neque. Integer convallis porttitor turpis feugiat placerat. Nulla sodales ex in neque lobortis, vel mollis turpis interdum. Mauris pharetra ex a justo maximus, at semper metus feugiat. Nullam aliquet tortor nec tortor auctor venenatis. Proin id laoreet eros, id sodales mi. Vestibulum mollis orci nec orci posuere dapibus. Integer placerat, nisl id aliquam interdum, diam est vestibulum purus, non venenatis turpis lacus in felis.\n                    Vestibulum pulvinar velit tortor, ut convallis turpis condimentum ut. Nunc auctor hendrerit augue, sed malesuada quam. Etiam varius interdum risus, eget gravida libero convallis sed. Aliquam tempor orci at ex ullamcorper mollis. Fusce imperdiet ut ex in gravida. Curabitur iaculis non diam vel consequat. Praesent a magna posuere, feugiat mauris nec, sollicitudin ligula. Sed faucibus viverra velit eget porttitor. Suspendisse a sem gravida, tincidunt lacus vitae, lobortis ante. Nulla nisl quam, ultrices non nunc eget, commodo luctus metus. Curabitur nulla erat, gravida in nulla vel, commodo vestibulum ligula. Quisque quis lectus vel urna luctus gravida eget id risus.\n                </div>\n            </ngx-overlay>\n        </section>\n      `\n    }),\n    args: {\n        overlayContainerClass: 'customContainerForLorem',\n        overlayBackdropClass: 'myCustomBackdropClass',\n        width: '100vw'\n    }\n}"
            },
            {
                "name": "userAbbreviationTitle",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/story-book/src/user-card/user-card.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n    parameters: {\n        docs: {\n            description: {\n                story: 'Depending on the user\\'s \"title\" property given, the UserCard will display its abbreviation.<br /><ul><li>Docteur / Docteure : <code>Dr</code>, <code>Dre</code></li><li>Monsieur / Madame : <code>M</code>, <code>Mme</code></li><li>Professeur / Professeure : <code>Pr</code>, <code>Pre</code></li></ul>Any other text in the \"title\" property will be displayed entirely.'\n            }\n        }\n    },\n    render: args => ({\n        props: {\n            ...args,\n            titleChanged(code: string): void {\n                this['user'] = {\n                    title: code,\n                    firstname: 'Jean',\n                    lastname: 'PATATE',\n                    initials: 'jpat',\n                    type: 'Type',\n                    email: 'jean.patate@hug.ch',\n                    role: 'Medecin',\n                    groupFunctionLabel: 'Group',\n                    familyCode: 'Soins',\n                    functionSefName: 'SefNameFunction',\n                    functionSefCode: 'SefCodeFunction',\n                    organisation: 'HUG',\n                    speciality: 'Neurochirurgie',\n                    specialty1: 'Dermatologie',\n                    specialty2: 'Pedicure',\n                    esoN3Label: 'EsoN3Label',\n                    login: 'PatateLogin',\n                    phone: '+44 150 509 39',\n                    bip: '8859595',\n                    mobile: '+44 150 509 39',\n                    address: 'Carouge, 7 Rue St Julien',\n                    city: 'Carouge',\n                    zipCode: '1227'\n                };\n            }\n        },\n        template: `\n        <section>\n          <ngx-user-card [user]=\"user\" [expanded]=\"false\"></ngx-user-card>\n          <br />\n          <div class=\"matButtonContainer\">\n            <mat-button-toggle-group name=\"title\" hideSingleSelectionIndicator=\"true\" (change)=\"titleChanged($event.value)\" [value]=\"user.title\">\n                <mat-button-toggle value=\"Docteur\">Docteur</mat-button-toggle>\n                <mat-button-toggle value=\"Docteure\">Docteure</mat-button-toggle>\n                <mat-button-toggle value=\"Monsieur\">Monsieur</mat-button-toggle>\n                <mat-button-toggle value=\"Madame\">Madame</mat-button-toggle>\n                <mat-button-toggle value=\"Professeur\">Professeur</mat-button-toggle>\n                <mat-button-toggle value=\"Professeure\">Professeure</mat-button-toggle>\n                <mat-button-toggle value=\"OtherTitle\">OtherTitle</mat-button-toggle>\n            </mat-button-toggle-group>\n          </div>\n        </section>\n      `\n    }),\n    args: {\n        user: {\n            title: 'Professeur',\n            firstname: 'Jean',\n            lastname: 'PATATE',\n            initials: 'jpat',\n            type: 'Type',\n            email: 'jean.patate@hug.ch',\n            role: 'Medecin',\n            groupFunctionLabel: 'Group',\n            familyCode: 'Infirmier-e',\n            functionSefName: 'SefNameFunction',\n            functionSefCode: 'SefCodeFunction',\n            organisation: 'HUG',\n            speciality: 'Neurochirurgie',\n            specialty1: 'Dermatologie',\n            specialty2: 'Pedicure',\n            esoN3Label: 'EsoN3Label',\n            login: 'PatateLogin',\n            phone: '+44 150 509 39',\n            bip: '8859595',\n            mobile: '+44 150 509 39',\n            address: 'Carouge, 7 Rue St Julien',\n            city: 'Carouge',\n            zipCode: '1227'\n        }\n    }\n}"
            },
            {
                "name": "userWithMissingInfo",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/story-book/src/user-card/user-card.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n    parameters: {\n        docs: {\n            description: {\n                story: 'Displays the component when certain user information is missing. This helps ensure that the rendering remains consistent even with incomplete data.'\n            }\n        }\n    },\n    args: {\n        user: {\n            title: 'Professor',\n            firstname: 'Jean',\n            lastname: 'PATATE',\n            initials: 'jpat',\n            email: 'jean.patate@hug.ch'\n            // Phone number and address are missing\n        },\n        expanded: true\n    }\n}"
            },
            {
                "name": "verticalSplit",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/story-book/src/splitter/splitter.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n    parameters: {\n        docs: {\n            description: {\n                story: 'This story illustrates a vertical splitter, dividing the container into two areas. The first area occupies 25% of the height, while the second takes 75%.'\n            }\n        }\n    },\n    render: args => ({\n        props: args,\n        template: `\n        <section class=\"splitter\">\n            <ngx-splitter [direction]=\"direction\" [gutterSize]=\"gutterSize\" [disabled]=\"disabled\" order=\"1\">\n                <ngx-split-area size=\"25\" minSizePixel=\"100\">Area 1</ngx-split-area>\n                <ngx-split-area size=\"75\" minSizePixel=\"100\">Area 2</ngx-split-area>\n            </ngx-splitter>\n        </section>\n        `\n    }),\n    args: {\n        direction: 'vertical'\n    }\n}"
            },
            {
                "name": "withLabel",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/story-book/src/list-loader/list-loader.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n    parameters: {\n        docs: {\n            description: {\n                story: 'Shows the loader with a custom label. This can be used to provide additional information or context while the data is loading.'\n            }\n        }\n    },\n    args: {\n        label: 'Loading data, please wait...'\n    }\n}"
            },
            {
                "name": "withLongLabel",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/story-book/src/list-loader/list-loader.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n    parameters: {\n        docs: {\n            description: {\n                story: 'Displays the loader with a long label to test how it handles extended text. This is useful to ensure that the layout accommodates longer messages.'\n            }\n        }\n    },\n    args: {\n        label: 'This is a very long label that we use to test how the loader handles extended text. It should wrap or truncate gracefully depending on the design.'\n    }\n}"
            }
        ],
        "functions": [],
        "typealiases": [
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<NgxLayoutComponent>",
                "file": "projects/story-book/src/layout/layout.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<NgxListLoaderComponent>",
                "file": "projects/story-book/src/list-loader/list-loader.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<NgxMessageBoxComponent>",
                "file": "projects/story-book/src/message-box/message-box.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<NgxSearchContainerComponent>",
                "file": "projects/story-book/src/search-container/search-container.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<NgxSplitterComponent>",
                "file": "projects/story-book/src/splitter/splitter.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<NgxOverlayComponent>",
                "file": "projects/story-book/src/overlay/overlay.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<NgxNumericStepperComponent>",
                "file": "projects/story-book/src/numeric-stepper/numeric-stepper.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<NgxStatusComponent>",
                "file": "projects/story-book/src/status/status.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<NgxUserCardComponent>",
                "file": "projects/story-book/src/user-card/user-card.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            }
        ],
        "enumerations": [],
        "groupedVariables": {
            "projects/story-book/src/layout/layout.stories.ts": [
                {
                    "name": "actionsToolbar",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/story-book/src/layout/layout.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n    parameters: {\n        docs: {\n            description: {\n                story: 'The actions template inside the component adds buttons on the toolbar. You must have the <code>layoutToolbar</code> template for it to work correctly. <ul><li>The <code>layoutPrimaryAction</code> template allows you to add one primary button on the toolbar. Here my add icon button.</li><li>The <code>layoutActions</code> template allows you to add additional buttons to the toolbar. Here my refresh and my favorite icon button.</li></ul>'\n            }\n        }\n    },\n    render: args => ({\n        props: {\n            ...args,\n            log: (msg: string, event?: Event): void => {\n                console.log(msg, event);\n            }\n        },\n        template: `\n            <section>\n                <ngx-layout>\n                    <ng-template #layoutToolbar>\n                    </ng-template>\n\n                    <!-- Primary action -->\n                    <ng-template #layoutPrimaryAction>\n                        <button type=\"button\" mat-fab matTooltip=\"Add\" (click)=\"log('Add button clicked', $event)\">\n                            <mat-icon>add</mat-icon>\n                        </button>\n                    </ng-template>\n\n                    <!-- Actions panel -->\n                    <ng-template #layoutActions>\n                        <button type=\"button\" mat-icon-button matTooltip=\"Refresh\" (click)=\"log('Refresh button clicked', $event)\">\n                            <mat-icon>refresh</mat-icon>\n                        </button>\n\n                        <button type=\"button\" mat-icon-button matTooltip=\"Favorite\" (click)=\"log('Favorite button clicked', $event)\">\n                            <mat-icon>favorite</mat-icon>\n                        </button>\n                    </ng-template>\n                    <div class=\"content-container\">Layout content</div>\n                </ngx-layout>\n            </section>\n          `\n    })\n}"
                },
                {
                    "name": "completeLayout",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/story-book/src/layout/layout.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n    parameters: {\n        docs: {\n            description: {\n                story: 'Here you can see everything that can be added to have this complete component. <ul><li>Template <code>layoutToolbar</code><br/><ul><li><code>toolbar-title</code>directive on span to add title</li><li><code>ngx-search-container</code>component for searching</li></ul></li><li>Template <code>layoutPrimaryAction</code></li><li>Template <code>layoutActions</code></li><li>Template <code>layoutRight</code><br/><ul><li><code>filters-chip-list</code>directive on div to contain mat-chip-listbox</li></ul></li><li>Template <code>layoutInfoBoxes</code></li></ul>'\n            }\n        }\n    },\n    render: args => ({\n        props: args,\n        template: '<storybook-layout-wrapper [toolbarColor]=\"toolbarColor\"></storybook-layout-wrapper>'\n    })\n}"
                },
                {
                    "name": "infosBoxes",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/story-book/src/layout/layout.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n    parameters: {\n        docs: {\n            description: {\n                story: 'The <code>layoutInfoBoxes</code> template inside the component allows you to add informations under the toolbar.'\n            }\n        }\n    },\n    render: args => ({\n        props: {\n            ...args,\n            log: (msg: string, event?: Event): void => {\n                console.log(msg, event);\n            }\n        },\n        template: `\n            <section>\n                <ngx-layout>\n                    <ng-template #layoutToolbar>\n                    </ng-template>\n\n                    <!-- Info boxes panel -->\n                    <ng-template #layoutInfoBoxes>\n                        <span class=\"info-box\">Info box</span>\n                        <span class=\"info-box primary\">Info box primary</span>\n                        <span class=\"info-box accent\">Info box accent</span>\n                    </ng-template>\n\n                    <div class=\"content-container\">Layout content</div>\n                </ngx-layout>\n            </section>\n          `\n    })\n}"
                },
                {
                    "name": "layoutToolbar",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/story-book/src/layout/layout.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n    parameters: {\n        docs: {\n            description: {\n                story: 'The <code>layoutToolbar</code> template inside the component adds a toolbar to it.<ul><li>The <code>toolbarColor</code> Input on the component allows you to define the color of the toolbar. Here I have <code>toolbarColor=\"accent\"</code></li><li>The span with directive <code>toolbar-title</code> allows you to add a title to the toolbar</li><li>You can add an <code>ngx-search-container</code> in the toolbar. Its size will fit by default</li></ul>'\n            }\n        }\n    },\n    render: args => ({\n        props: {\n            ...args,\n            search: '',\n            toolbarColor: 'accent',\n            log: (msg: string, event?: Event): void => {\n                console.log(msg, event);\n            }\n        },\n        template: `\n            <section>\n                <ngx-layout [toolbarColor]=\"toolbarColor\">\n                    <ng-template #layoutToolbar>\n                        <span toolbar-title>My toolbar-title</span>\n                        <ngx-search-container>\n                            <input type=\"text\" [(ngModel)]=\"search\" (ngModelChange)=\"log('Search changed', $event)\" placeholder=\"My ngx-search-container\" autocomplete=\"off\" ngx-search-input />\n                        </ngx-search-container>\n                    </ng-template>\n                    <div class=\"content-container\">Layout content</div>\n                </ngx-layout>\n            </section>\n          `\n    })\n}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/story-book/src/layout/layout.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<NgxLayoutComponent>",
                    "defaultValue": "{\n    title: 'Components/Layout',\n    component: NgxLayoutComponent,\n    decorators: [\n        applicationConfig({\n            providers: [\n                provideAnimations() // Provides animations to the application\n            ]\n        }),\n        moduleMetadata({\n            imports: [\n                CommonModule,\n                FormsModule,\n                NgxLayoutComponent,\n                StorybookLayoutWrapperComponent,\n                NgxSearchContainerComponent,\n                MatChipsModule,\n                MatButtonModule,\n                MatIconModule,\n                NgxSearchInputDirective\n            ],\n            providers: [NgxStatusService]\n        })\n    ],\n    tags: ['autodocs'],\n    argTypes: {\n        toolbarColor: {\n            options: ['primary', 'accent'],\n            control: { type: 'select' },\n            description: 'Sets the color of the toolbar. Choose between primary or accent themes.',\n            table: {\n                defaultValue: {\n                    summary: 'primary'\n                },\n                type: { summary: 'primary | accent' }\n            }\n        }\n    },\n    args: {\n        toolbarColor: 'primary'\n    },\n    parameters: {\n        layout: 'fullscreen',\n        docs: {\n            description: {\n                component: 'The `NgxLayoutComponent` is a flexible layout component for creating application layouts at HUG. It includes options for toolbars, actions, and side panels, making it adaptable for various use cases.'\n            }\n        }\n    }\n}"
                },
                {
                    "name": "rightPanel",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/story-book/src/layout/layout.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n    parameters: {\n        docs: {\n            description: {\n                story: 'The <code>layoutRight</code> template inside the component adds a right panel to it.<ul><li>A button to Open/Close the right panel will be automatically added to the toolbar</li><li>>You can add a <code>filters-chip-list</code> directive that can manage your filters</li></ul>'\n            }\n        }\n    },\n    render: args => ({\n        props: {\n            ...args,\n            log: (msg: string, event?: Event): void => {\n                console.log(msg, event);\n            }\n        },\n        template: `\n            <section class=\"moreHeight\">\n                <ngx-layout>\n                    <ng-template #layoutToolbar>\n                    </ng-template>\n\n                    <!-- Right panel -->\n                    <ng-template #layoutRight>\n                        <div class=\"layout-right-container\">\n                            Layout right\n                            <div filters-chip-list>\n                                <mat-chip-listbox class=\"mat-mdc-chip-set-stacked\" aria-label=\"Color selection\">\n                                    <mat-chip-option>filter 1</mat-chip-option>\n                                    <mat-chip-option>filter 2</mat-chip-option>\n                                    <mat-chip-option>filter 3</mat-chip-option>\n                                    <mat-chip-option>filter 4</mat-chip-option>\n                                    <mat-chip-option>filter 5</mat-chip-option>\n                                </mat-chip-listbox>\n                            </div>\n                        </div>\n                    </ng-template>\n                    <div class=\"content-container\">Layout content</div>\n                </ngx-layout>\n            </section>\n          `\n    })\n}"
                }
            ],
            "projects/story-book/src/numeric-stepper/numeric-stepper.stories.ts": [
                {
                    "name": "appearance",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/story-book/src/numeric-stepper/numeric-stepper.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n    parameters: {\n        docs: {\n            description: {\n                story: 'This component supports different appearances for `mat-form-field`.'\n            }\n        }\n    },\n    render: args => ({\n        props: {\n            ...args,\n            value: 115,\n            appearance: 'fill',\n            appearanceChanged(value: string): void {\n                this['appearance'] = value;\n            }\n        },\n        template: `\n            <section>\n                <div ngx-numeric-stepper-container>\n                    <mat-form-field [appearance]=\"appearance\">\n                        <mat-label>This is my label</mat-label>\n                        <input matInput type=\"number\" [ngModel]=\"value\" #numericStepper=\"ngModel\" />\n                        <ngx-numeric-stepper (increment)=\"value = value + 5\" (decrement)=\"value = value - 5\" [layout]=\"layout\" showOnInit></ngx-numeric-stepper>\n                    </mat-form-field>\n                </div>\n                <div class=\"matButtonContainer\">\n                    <mat-button-toggle-group name=\"appearance\" hideSingleSelectionIndicator=\"true\" (change)=\"appearanceChanged($event.value)\" [value]=\"appearance\">\n                        <mat-button-toggle value=\"fill\">Fill</mat-button-toggle>\n                        <mat-button-toggle value=\"outline\">Outline</mat-button-toggle>\n                    </mat-button-toggle-group>\n                </div>\n            </section>\n          `,\n        styles: [`\n            section {\n                background-color: white;\n            }\n            .matButtonContainer {\n                padding-top: 20px;\n                display: flex;\n                justify-content: center;\n            }\n          `]\n    })\n}"
                },
                {
                    "name": "customArrowIcons",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/story-book/src/numeric-stepper/numeric-stepper.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n    render: args => ({\n        props: {\n            ...args,\n            value: 115,\n            appearance: 'outline'\n        },\n        template: `\n            <section>\n                <div ngx-numeric-stepper-container>\n                    <mat-form-field [appearance]=\"appearance\">\n                <mat-label>Custom Arrow Icons</mat-label>\n                        <input matInput type=\"number\" [ngModel]=\"value\" #numericStepper=\"ngModel\" />\n                        <ngx-numeric-stepper (increment)=\"value = value + 5\" (decrement)=\"value = value - 5\" [layout]=\"layout\" [arrowIcons]=\"arrowIcons\" [showOnInit]=\"showOnInit\" [input]=\"input\" showOnInit></ngx-numeric-stepper>\n                    </mat-form-field>\n                </div>\n            </section>\n          `,\n        styles: [`\n            section {\n                background-color: white;\n            }\n          `]\n    }),\n    args: {\n        arrowIcons: true\n    }\n}"
                },
                {
                    "name": "layout",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/story-book/src/numeric-stepper/numeric-stepper.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n    parameters: {\n        docs: {\n            description: {\n                story: 'This component supports several layouts: <ul><li><code>vertical</code></li><li><code>horizontal</code></li><li><code>horizontal-inlay</code></li></ul>'\n            }\n        }\n    },\n    render: args => ({\n        props: {\n            ...args,\n            value: 115\n        },\n        template: `\n            <section>\n                <div class=\"grouped\">\n                    <div ngx-numeric-stepper-container>\n                        <mat-form-field appearance=\"outline\">\n                            <mat-label>vertical layout</mat-label>\n                            <input matInput type=\"number\" [ngModel]=\"value\" #numericStepper=\"ngModel\" />\n                            <ngx-numeric-stepper (increment)=\"value = value + 5\" (decrement)=\"value = value - 5\" layout=\"vertical\" showOnInit></ngx-numeric-stepper>\n                        </mat-form-field>\n                    </div>\n                     <div ngx-numeric-stepper-container>\n                        <mat-form-field appearance=\"fill\">\n                            <mat-label>vertical layout</mat-label>\n                            <input matInput type=\"number\" [ngModel]=\"value\" #numericStepper=\"ngModel\" />\n                            <ngx-numeric-stepper (increment)=\"value = value + 5\" (decrement)=\"value = value - 5\" layout=\"vertical\" showOnInit></ngx-numeric-stepper>\n                        </mat-form-field>\n                    </div>\n                </div>\n                <br />\n                <div class=\"grouped\">\n                    <div ngx-numeric-stepper-container>\n                        <mat-form-field appearance=\"outline\">\n                            <mat-label>horizontal layout</mat-label>\n                            <input matInput type=\"number\" [ngModel]=\"value\" #numericStepper=\"ngModel\" />\n                            <ngx-numeric-stepper (increment)=\"value = value + 5\" (decrement)=\"value = value - 5\" layout=\"horizontal\" showOnInit></ngx-numeric-stepper>\n                        </mat-form-field>\n                    </div>\n                    <div ngx-numeric-stepper-container>\n                        <mat-form-field appearance=\"fill\">\n                            <mat-label>horizontal layout</mat-label>\n                            <input matInput type=\"number\" [ngModel]=\"value\" #numericStepper=\"ngModel\" />\n                            <ngx-numeric-stepper (increment)=\"value = value + 5\" (decrement)=\"value = value - 5\" layout=\"horizontal\" showOnInit></ngx-numeric-stepper>\n                        </mat-form-field>\n                    </div>\n                </div>\n                <br />\n                <div class=\"grouped\">\n                    <div ngx-numeric-stepper-container>\n                        <mat-form-field appearance=\"outline\">\n                            <mat-label>horizontal-inlay layout</mat-label>\n                            <input matInput type=\"number\" [ngModel]=\"value\" #numericStepper=\"ngModel\" />\n                            <ngx-numeric-stepper (increment)=\"value = value + 5\" (decrement)=\"value = value - 5\" layout=\"horizontal-inlay\" showOnInit></ngx-numeric-stepper>\n                        </mat-form-field>\n                    </div>\n                    <div ngx-numeric-stepper-container>\n                        <mat-form-field appearance=\"fill\">\n                            <mat-label>horizontal-inlay layout</mat-label>\n                            <input matInput type=\"number\" [ngModel]=\"value\" #numericStepper=\"ngModel\" />\n                            <ngx-numeric-stepper (increment)=\"value = value + 5\" (decrement)=\"value = value - 5\" layout=\"horizontal-inlay\" showOnInit></ngx-numeric-stepper>\n                        </mat-form-field>\n                    </div>\n                </div>\n            </section>\n          `,\n        styles: [`\n            section {\n                background-color: white;\n            }\n            .matButtonContainer {\n                padding-top: 20px;\n                display: flex;\n                justify-content: center;\n            }\n            .grouped {\n                display: flex;\n                gap: 5rem;\n            }\n          `]\n    }),\n    args: {\n        layout: 'vertical'\n    }\n}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/story-book/src/numeric-stepper/numeric-stepper.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<NgxNumericStepperComponent>",
                    "defaultValue": "{\n    title: 'Components/Numeric Stepper',\n    component: NgxNumericStepperComponent,\n    decorators: [\n        applicationConfig({\n            providers: [\n                provideAnimations() // Provides animations to the application\n            ]\n        }),\n        moduleMetadata({\n            imports: [\n                CommonModule, NgxNumericStepperComponent, MatFormFieldModule, FormsModule, MatInputModule, ReactiveFormsModule, MatButtonToggleModule\n            ]\n        })\n    ],\n    tags: ['autodocs'],\n    argTypes: {\n        layout: {\n            options: ['vertical', 'horizontal', 'horizontal-inlay'],\n            control: { type: 'select' },\n            description: 'Layout of the stepper control.',\n            table: {\n                defaultValue: {\n                    summary: 'vertical'\n                },\n                type: { summary: 'NgxNumericStepperLayout' }\n            }\n        },\n        arrowIcons: {\n            control: { type: 'boolean' },\n            description: 'Whether to show arrow icons.',\n            table: {\n                defaultValue: {\n                    summary: 'false'\n                },\n                type: { summary: 'boolean' }\n            }\n        },\n        showOnInit: {\n            control: { type: 'boolean' },\n            description: 'Whether to show the stepper on initialization.',\n            table: {\n                defaultValue: {\n                    summary: 'false'\n                },\n                type: { summary: 'boolean' }\n            }\n        },\n        input: {\n            control: { type: 'object' },\n            description: 'The form field control input to be used.',\n            table: {\n                defaultValue: { summary: undefined },\n                type: { summary: 'MatFormFieldControl<unknown>' }\n            }\n        }\n    },\n    args: {\n        layout: 'vertical'\n    },\n    parameters: {\n        docs: {\n            description: {\n                component: 'The `NgxNumericStepperComponent` integrates with a `mat-form-field` containing an input. It provides a hover mask to allow custom increments or decrements using the `+` and `-` buttons. It can be configured with various layouts and options.'\n            }\n        }\n    }\n}"
                },
                {
                    "name": "prefixAndSuffix",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/story-book/src/numeric-stepper/numeric-stepper.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n    parameters: {\n        docs: {\n            description: {\n                story: 'This section allows you to visualize the component with different `mat-form-field` configurations, including custom prefixes and suffixes.'\n            }\n        }\n    },\n    render: args => ({\n        props: {\n            ...args,\n            value: 115,\n            prefix: '',\n            suffix: 'cm',\n            prefixChanged(value: string): void {\n                this['prefix'] = value;\n            },\n            suffixChanged(value: string): void {\n                this['suffix'] = value;\n            }\n        },\n        template: `\n            <section>\n                <div class=\"grouped\">\n                    <div ngx-numeric-stepper-container>\n                        <mat-form-field appearance=\"outline\">\n                            <mat-label>vertical layout</mat-label>\n                            <span matTextPrefix=\"\" *ngIf=\"prefix\">{{ prefix }}</span>\n                            <input matInput type=\"number\" [ngModel]=\"value\" #numericStepper=\"ngModel\" />\n                            <span matTextSuffix *ngIf=\"suffix\">{{ suffix }}</span>\n                            <ngx-numeric-stepper (increment)=\"value = value + 5\" (decrement)=\"value = value - 5\" layout=\"vertical\" showOnInit></ngx-numeric-stepper>\n                        </mat-form-field>\n                    </div>\n                     <div ngx-numeric-stepper-container>\n                        <mat-form-field appearance=\"fill\">\n                            <mat-label>vertical layout</mat-label>\n                            <span matTextPrefix=\"\" *ngIf=\"prefix\">{{ prefix }}</span>\n                            <input matInput type=\"number\" [ngModel]=\"value\" #numericStepper=\"ngModel\" />\n                            <span matTextSuffix *ngIf=\"suffix\">{{ suffix }}</span>\n                            <ngx-numeric-stepper (increment)=\"value = value + 5\" (decrement)=\"value = value - 5\" layout=\"vertical\" showOnInit></ngx-numeric-stepper>\n                        </mat-form-field>\n                    </div>\n                </div>\n                <br />\n                <div class=\"grouped\">\n                    <div ngx-numeric-stepper-container>\n                        <mat-form-field appearance=\"outline\">\n                            <mat-label>horizontal layout</mat-label>\n                            <span matTextPrefix=\"\" *ngIf=\"prefix\">{{ prefix }}</span>\n                            <input matInput type=\"number\" [ngModel]=\"value\" #numericStepper=\"ngModel\" />\n                            <span matTextSuffix *ngIf=\"suffix\">{{ suffix }}</span>\n                            <ngx-numeric-stepper (increment)=\"value = value + 5\" (decrement)=\"value = value - 5\" layout=\"horizontal\" showOnInit></ngx-numeric-stepper>\n                        </mat-form-field>\n                    </div>\n                    <div ngx-numeric-stepper-container>\n                        <mat-form-field appearance=\"fill\">\n                            <mat-label>horizontal layout</mat-label>\n                            <span matTextPrefix=\"\" *ngIf=\"prefix\">{{ prefix }}</span>\n                            <input matInput type=\"number\" [ngModel]=\"value\" #numericStepper=\"ngModel\" />\n                            <span matTextSuffix *ngIf=\"suffix\">{{ suffix }}</span>\n                            <ngx-numeric-stepper (increment)=\"value = value + 5\" (decrement)=\"value = value - 5\" layout=\"horizontal\" showOnInit></ngx-numeric-stepper>\n                        </mat-form-field>\n                    </div>\n                </div>\n                <br />\n                <div class=\"grouped\">\n                    <div ngx-numeric-stepper-container>\n                        <mat-form-field appearance=\"outline\">\n                            <mat-label>horizontal-inlay layout</mat-label>\n                            <span matTextPrefix=\"\" *ngIf=\"prefix\">{{ prefix }}</span>\n                            <input matInput type=\"number\" [ngModel]=\"value\" #numericStepper=\"ngModel\" />\n                            <span matTextSuffix *ngIf=\"suffix\">{{ suffix }}</span>\n                            <ngx-numeric-stepper (increment)=\"value = value + 5\" (decrement)=\"value = value - 5\" layout=\"horizontal-inlay\" showOnInit></ngx-numeric-stepper>\n                        </mat-form-field>\n                    </div>\n                    <div ngx-numeric-stepper-container>\n                        <mat-form-field appearance=\"fill\">\n                            <mat-label>horizontal-inlay layout</mat-label>\n                            <span matTextPrefix=\"\" *ngIf=\"prefix\">{{ prefix }}</span>\n                            <input matInput type=\"number\" [ngModel]=\"value\" #numericStepper=\"ngModel\" />\n                            <span matTextSuffix *ngIf=\"suffix\">{{ suffix }}</span>\n                            <ngx-numeric-stepper (increment)=\"value = value + 5\" (decrement)=\"value = value - 5\" layout=\"horizontal-inlay\" showOnInit></ngx-numeric-stepper>\n                        </mat-form-field>\n                    </div>\n                </div>\n                <br />\n                <h4>Try your own suffixes and prefixes</h4>\n                <br />\n                <div class=\"grouped\">\n                        <mat-form-field appearance=\"outline\">\n                            <mat-label>prefix</mat-label>\n                            <input matInput type=\"string\" [ngModel]=\"prefix\" (ngModelChange)=\"prefixChanged($event)\" />\n                        </mat-form-field>\n                        <mat-form-field appearance=\"outline\">\n                            <mat-label>suffix</mat-label>\n                            <input matInput type=\"string\" [ngModel]=\"suffix\" (ngModelChange)=\"suffixChanged($event)\" />\n                        </mat-form-field>\n                </div>\n            </section>\n          `,\n        styles: [`\n            section {\n                background-color: white;\n                font-family: 'Roboto';\n            }\n            .matButtonContainer {\n                padding-top: 20px;\n                display: flex;\n                justify-content: center;\n            }\n            .grouped {\n                display: flex;\n                gap: 5rem;\n            }\n          `]\n    }),\n    args: {\n        layout: 'vertical'\n    }\n}"
                },
                {
                    "name": "showOnInit",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/story-book/src/numeric-stepper/numeric-stepper.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n    tags: ['!dev', '!autodocs'], // Pour disable sur le menu à gauche !dev, et sur la doc !autodocs\n    render: args => ({\n        props: {\n            ...args,\n            value: 115,\n            appearance: 'outline'\n        },\n        template: `\n            <section>\n                <div ngx-numeric-stepper-container>\n                    <mat-form-field [appearance]=\"appearance\">\n                <mat-label>Show On Init True</mat-label>\n                        <input matInput type=\"number\" [ngModel]=\"value\" #numericStepper=\"ngModel\" />\n                        <ngx-numeric-stepper (increment)=\"value = value + 5\" (decrement)=\"value = value - 5\" [layout]=\"layout\" [arrowIcons]=\"arrowIcons\" [showOnInit]=\"showOnInit\" [input]=\"input\" showOnInit></ngx-numeric-stepper>\n                    </mat-form-field>\n                </div>\n            </section>\n          `,\n        styles: [`\n            section {\n                background-color: white;\n            }\n          `]\n    }),\n    args: {\n        showOnInit: true\n    }\n}"
                },
                {
                    "name": "standard",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/story-book/src/numeric-stepper/numeric-stepper.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n    render: args => ({\n        props: {\n            ...args,\n            value: 115,\n            appearance: 'outline'\n        },\n        template: `\n            <section>\n                <div ngx-numeric-stepper-container>\n                    <mat-form-field [appearance]=\"appearance\">\n                        <mat-label>This is my label</mat-label>\n                        <input matInput type=\"number\" [ngModel]=\"value\" #numericStepper=\"ngModel\" />\n                        <ngx-numeric-stepper (increment)=\"value = value + 5\" (decrement)=\"value = value - 5\" [layout]=\"layout\" [arrowIcons]=\"arrowIcons\" [showOnInit]=\"showOnInit\" [input]=\"input\" showOnInit></ngx-numeric-stepper>\n                    </mat-form-field>\n                </div>\n            </section>\n          `,\n        styles: [`\n            section {\n                background-color: white;\n            }\n          `]\n    })\n}"
                }
            ],
            "projects/story-book/src/message-box/message-box.stories.ts": [
                {
                    "name": "basicWarnHorizontal",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/story-book/src/message-box/message-box.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n    parameters: {\n        docs: {\n            description: {\n                story: 'This story demonstrates the NgxMessageBoxComponent with a \"warn\" type and horizontal layout. It shows a simple warning message with default settings.'\n            }\n        }\n    },\n    render: args => ({\n        props: {\n            ...args\n        },\n        template: `\n        <section class=\"message-box\">\n            <ngx-message-box\n                [type]=\"type\"\n                [title]=\"title\"\n                [horizontal]=\"horizontal\"\n                [attr.horizontal]=\"horizontal|| null\">\n                Un message \"warn\" <b>horizontal</b>\n            </ngx-message-box>\n        </section>\n      `\n    }),\n    args: {\n        type: 'warn',\n        horizontal: true,\n        showCloseIcon: false,\n        title: 'My title'\n    }\n}"
                },
                {
                    "name": "complete",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/story-book/src/message-box/message-box.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n    parameters: {\n        docs: {\n            description: {\n                story: 'This story demonstrates the NgxMessageBoxComponent with all inputs configured, including actions, title, icon, and layout options. It shows how the component behaves with various properties and interactive elements.'\n            }\n        }\n    },\n    render: args => ({\n        props: {\n            ...args\n        },\n        template: `\n        <section class=\"message-box\">\n            <ngx-message-box\n                [type]=\"type\"\n                [title]=\"title\"\n                [icon]=\"icon\"\n                [actions]=\"actions\"\n                [horizontal]=\"horizontal\"\n                [attr.horizontal]=\"horizontal|| null\"\n                [showCloseIcon]=\"showCloseIcon\">\n                <p>Content inside the <b>message box</b></p>\n                <p>This is a default message box, in vertical layout.</p>\n            </ngx-message-box>\n        </section>\n      `\n    }),\n    args: {\n        type: 'info',\n        title: undefined,\n        icon: undefined,\n        actions: [\n            {\n                action: (): void => alert('remove action'),\n                icon: 'remove'\n            },\n            {\n                action: (): void => alert('add action'),\n                icon: 'add'\n            }\n        ],\n        horizontal: false,\n        showCloseIcon: false\n    }\n}"
                },
                {
                    "name": "customIcon",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/story-book/src/message-box/message-box.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n    parameters: {\n        docs: {\n            description: {\n                story: 'It shows a simple success message with default settings but with custom agriculture icon.'\n            }\n        }\n    },\n    render: args => ({\n        props: {\n            ...args\n        },\n        template: `\n        <section class=\"message-box\">\n            <ngx-message-box\n                [type]=\"type\"\n                [title]=\"title\"\n                [icon]=\"icon\"\n                [horizontal]=\"horizontal\"\n                [attr.horizontal]=\"horizontal|| null\">\n                Un message \"success\" <b>horizontal</b>\n            </ngx-message-box>\n        </section>\n      `\n    }),\n    args: {\n        type: 'success',\n        icon: 'agriculture',\n        horizontal: true,\n        showCloseIcon: false,\n        title: 'My agriculture icon'\n    }\n}"
                },
                {
                    "name": "horizontalLayout",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/story-book/src/message-box/message-box.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n    parameters: {\n        docs: {\n            description: {\n                story: 'This story demonstrates the NgxMessageBoxComponent with a horizontal layout. The content and title are aligned horizontally, which may be useful for certain design requirements.'\n            }\n        }\n    },\n    render: args => ({\n        props: {\n            ...args\n        },\n        template: `\n        <section class=\"message-box\">\n            <ngx-message-box\n                [type]=\"type\"\n                [title]=\"title\"\n                [icon]=\"icon\"\n                [actions]=\"actions\"\n                [horizontal]=\"horizontal\"\n                [attr.horizontal]=\"horizontal|| null\"\n                [showCloseIcon]=\"showCloseIcon\">\n                <p>Content inside the <b>message box</b></p>\n                <p>This message box is in horizontal layout.</p>\n            </ngx-message-box>\n        </section>\n      `\n    }),\n    args: {\n        type: 'warn',\n        title: 'Warning Message',\n        icon: 'home',\n        actions: [\n            {\n                text: 'Acknowledge',\n                action: (): void => alert('Acknowledged'),\n                icon: 'check'\n            }\n        ],\n        horizontal: true,\n        showCloseIcon: true\n    }\n}"
                },
                {
                    "name": "infoVertical",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/story-book/src/message-box/message-box.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n    parameters: {\n        docs: {\n            description: {\n                story: 'This story shows the NgxMessageBoxComponent with an \"info\" type in vertical layout. It displays a basic informational message with default settings.'\n            }\n        }\n    },\n    render: args => ({\n        props: {\n            ...args\n        },\n        template: `\n        <section class=\"message-box\">\n            <ngx-message-box\n                [type]=\"type\"\n                [title]=\"title\"\n                [horizontal]=\"horizontal\"\n                [attr.horizontal]=\"horizontal|| null\">\n                Un message \"info\" <b>vertical</b>\n            </ngx-message-box>\n        </section>\n      `\n    }),\n    args: {\n        type: 'info',\n        horizontal: false,\n        showCloseIcon: true,\n        title: 'My title'\n    }\n}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/story-book/src/message-box/message-box.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<NgxMessageBoxComponent>",
                    "defaultValue": "{\n    title: 'Components/MessageBox',\n    component: NgxMessageBoxComponent,\n    decorators: [\n        moduleMetadata({\n            imports: [\n                CommonModule\n            ]\n        })\n    ],\n    tags: ['autodocs'],\n    argTypes: {\n        type: {\n            control: 'select',\n            options: ['info', 'primary', 'success', 'warn', 'danger'],\n            description: 'Determines the type of the message box. Options include \"info\", \"primary\", \"success\", \"warn\", and \"danger\". This also sets the default icon if none is provided.',\n            table: {\n                type: { summary: 'NgxMessageBoxType' },\n                defaultValue: { summary: 'undefined' }\n            }\n        },\n        title: {\n            control: 'text',\n            description: 'The title displayed in the message box. Used to provide a header or subject for the message.',\n            table: {\n                type: { summary: 'string' },\n                defaultValue: { summary: 'undefined' }\n            }\n        },\n        icon: {\n            control: 'text',\n            description: 'Icon associated with the message box. This can be the name of an icon or a path to an icon image. If not provided, a default icon based on the type will be used.',\n            table: {\n                type: { summary: 'string' },\n                defaultValue: { summary: 'undefined' }\n            }\n        },\n        actions: {\n            control: 'object',\n            description: 'List of actions available in the message box. Each action can include text, type, icon, and an action function to execute. Allows you to customize the actions displayed in the footer of the message box.',\n            table: {\n                type: { summary: 'readonly NgxMessageBoxAction[]' },\n                defaultValue: { summary: 'undefined' }\n            }\n        },\n        horizontal: {\n            control: 'boolean',\n            description: 'Determines whether the layout of the message box is horizontal (true) or vertical (false). This affects the alignment of the title and content.',\n            table: {\n                type: { summary: 'boolean' },\n                defaultValue: { summary: 'false' }\n            }\n        },\n        showCloseIcon: {\n            control: 'boolean',\n            description: 'Indicates whether the close icon should be displayed in the message box. True to show the close icon, false to hide it.',\n            table: {\n                type: { summary: 'boolean' },\n                defaultValue: { summary: 'false' }\n            }\n        }\n    },\n    parameters: {\n        docs: {\n            description: {\n                component: 'The `NgxMessageBoxComponent` is used to display informations to the user'\n            }\n        }\n    }\n}"
                },
                {
                    "name": "noActions",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/story-book/src/message-box/message-box.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n    parameters: {\n        docs: {\n            description: {\n                story: 'This story shows the NgxMessageBoxComponent without any actions. It demonstrates how the component looks and behaves when there are no interactive elements in the footer.'\n            }\n        }\n    },\n    render: args => ({\n        props: {\n            ...args\n        },\n        template: `\n        <section class=\"message-box\">\n            <ngx-message-box\n                [type]=\"type\"\n                [title]=\"title\"\n                [icon]=\"icon\"\n                [horizontal]=\"horizontal\"\n                [attr.horizontal]=\"horizontal|| null\"\n                [showCloseIcon]=\"showCloseIcon\">\n                <p>Content inside the <b>message box</b></p>\n                <p>No actions available in this example.</p>\n            </ngx-message-box>\n        </section>\n      `\n    }),\n    args: {\n        type: 'success',\n        title: 'Success Message',\n        icon: 'done',\n        horizontal: false,\n        showCloseIcon: true\n    }\n}"
                },
                {
                    "name": "noCloseIcon",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/story-book/src/message-box/message-box.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n    parameters: {\n        docs: {\n            description: {\n                story: 'This story shows the NgxMessageBoxComponent without the close icon. This configuration is useful if you want to prevent the user from closing the message box manually.'\n            }\n        }\n    },\n    render: args => ({\n        props: {\n            ...args\n        },\n        template: `\n        <section class=\"message-box\">\n            <ngx-message-box\n                [type]=\"type\"\n                [title]=\"title\"\n                [icon]=\"icon\"\n                [actions]=\"actions\"\n                [horizontal]=\"horizontal\"\n                [attr.horizontal]=\"horizontal|| null\"\n                [showCloseIcon]=\"false\">\n                <p>Content inside the <b>message box</b></p>\n                <p>This message box does not have a close icon.</p>\n            </ngx-message-box>\n        </section>\n      `\n    }),\n    args: {\n        type: 'danger',\n        title: 'Error Message',\n        icon: 'error',\n        actions: [\n            {\n                text: 'Retry',\n                action: (): void => alert('Retry action'),\n                icon: 'refresh'\n            }\n        ],\n        horizontal: true,\n        showCloseIcon: false\n    }\n}"
                },
                {
                    "name": "successWithActions",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/story-book/src/message-box/message-box.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n    parameters: {\n        docs: {\n            description: {\n                story: 'This story shows the NgxMessageBoxComponent with a \"success\" type, horizontal layout, and a list of actions. It illustrates how actions can be used within the message box.'\n            }\n        }\n    },\n    render: args => ({\n        props: {\n            ...args\n        },\n        template: `\n        <section class=\"message-box\">\n            <ngx-message-box\n                [type]=\"type\"\n                [title]=\"title\"\n                [horizontal]=\"horizontal\"\n                [attr.horizontal]=\"horizontal|| null\"\n                [actions]=\"actions\">\n                Un message \"success\" avec <b>actions</b>\n            </ngx-message-box>\n        </section>\n      `\n    }),\n    args: {\n        type: 'success',\n        horizontal: true,\n        actions: [\n            {\n                text: 'OK',\n                action: (): void => alert('OK clicked'),\n                icon: 'check'\n            },\n            {\n                text: 'Cancel',\n                action: (): void => alert('Cancel clicked'),\n                icon: 'cancel'\n            }\n        ],\n        showCloseIcon: true\n    }\n}"
                }
            ],
            "projects/story-book/src/splitter/splitter.stories.ts": [
                {
                    "name": "combinedSplitters",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/story-book/src/splitter/splitter.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n    parameters: {\n        docs: {\n            description: {\n                story: 'This story presents a combination of two splitters: a vertical splitter nested inside a horizontal splitter. This allows creating a complex layout with resizable areas in both directions.'\n            }\n        }\n    },\n    render: args => ({\n        props: {\n            ...args\n        },\n        template: `\n        <section class=\"splitter combined\">\n            <!-- Horizontal Splitter -->\n            <ngx-splitter [direction]=\"'horizontal'\" [gutterSize]=\"gutterSize\" order=\"1\">\n                <!-- First Horizontal Area -->\n                <ngx-split-area size=\"50\" minSizePixel=\"100\">\n                    <!-- Vertical Splitter Inside the First Horizontal Area -->\n                    <ngx-splitter [direction]=\"'vertical'\" [gutterSize]=\"gutterSize\" order=\"1\">\n                        <!-- First Vertical Area -->\n                        <ngx-split-area size=\"50\" minSizePixel=\"100\">\n                            <p>Content in the first vertical area...</p>\n                        </ngx-split-area>\n                        <!-- Second Vertical Area -->\n                        <ngx-split-area size=\"50\" minSizePixel=\"100\">\n                            <p>Content in the second vertical area...</p>\n                        </ngx-split-area>\n                    </ngx-splitter>\n                </ngx-split-area>\n                <!-- Second Horizontal Area -->\n                <ngx-split-area size=\"50\" minSizePixel=\"100\">\n                    <p>Content in the second horizontal area...</p>\n                </ngx-split-area>\n            </ngx-splitter>\n        </section>\n        `\n    })\n}"
                },
                {
                    "name": "customizableSplitAreas",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/story-book/src/splitter/splitter.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n    parameters: {\n        docs: {\n            description: {\n                story: 'This story provides an example of how to customize the properties of each split area dynamically. It allows changing the size and minimum size of each area through input fields.'\n            }\n        }\n    },\n    render: args => ({\n        props: {\n            ...args,\n            firstAreaSize: 50,\n            secondAreaSize: 50,\n            firstAreaMinSize: 100,\n            secondAreaMinSize: 10,\n            firstAreaSizeChanged(size: number): void {\n                if (size > 100) {\n                    size = 100;\n                } else if (size < 0) {\n                    size = 0;\n                }\n                this['firstAreaSize'] = size;\n                this['secondAreaSize'] = 100 - size;\n            },\n            secondAreaSizeChanged(size: number): void {\n                if (size > 100) {\n                    size = 100;\n                } else if (size < 0) {\n                    size = 0;\n                }\n                this['secondAreaSize'] = size;\n                this['firstAreaSize'] = 100 - size;\n            },\n            firstAreaMinSizeChanged(size: number): void {\n                this['firstAreaMinSize'] = size;\n            },\n            secondAreaMinSizeChanged(size: number): void {\n                this['secondAreaMinSize'] = size;\n            }\n        },\n        template: `\n        <section class=\"splitter bigger\">\n            <ngx-splitter [direction]=\"direction\" [gutterSize]=\"gutterSize\" [disabled]=\"disabled\" order=\"1\" class=\"colored\">\n                <ngx-split-area #firstSplitArea [size]=\"firstAreaSize\" [minSizePixel]=\"firstAreaMinSize\">\n                    Area 1\n                    <div class=\"minContainer left\" [style.width.px]=\"firstAreaMinSize\">FirstArea minSize</div>\n                </ngx-split-area>\n                <ngx-split-area #secondSplitArea [size]=\"secondAreaSize\" [minSizePixel]=\"secondAreaMinSize\">\n                    Area 2\n                    <div class=\"minContainer right\" [style.width.px]=\"secondAreaMinSize\">SecondArea minSize</div>\n                </ngx-split-area>\n            </ngx-splitter>\n            <br />\n            <div class=\"matButtonContainer\">\n                <div class=\"formfield\">\n                    <mat-form-field appearance=\"outline\">\n                        <mat-label>First Area Size (%)</mat-label>\n                        <input matInput type=\"number\" [ngModel]=\"firstAreaSize\" (ngModelChange)=\"firstAreaSizeChanged($event)\" />\n                    </mat-form-field>\n                    <mat-form-field appearance=\"outline\">\n                        <mat-label>Second Area Size (%)</mat-label>\n                        <input matInput type=\"number\" [ngModel]=\"secondAreaSize\" (ngModelChange)=\"secondAreaSizeChanged($event)\" />\n                    </mat-form-field>\n                </div>\n                <div class=\"formfield\">\n                    <mat-form-field appearance=\"outline\">\n                        <mat-label>First Area Minimum Size (px)</mat-label>\n                        <input matInput type=\"number\" [ngModel]=\"firstAreaMinSize\" (ngModelChange)=\"firstAreaMinSizeChanged($event)\" />\n                    </mat-form-field>\n                    <mat-form-field appearance=\"outline\">\n                        <mat-label>Second Area Minimum Size (px)</mat-label>\n                        <input matInput type=\"number\" [ngModel]=\"secondAreaMinSize\" (ngModelChange)=\"secondAreaMinSizeChanged($event)\" />\n                    </mat-form-field>\n                </div>\n            </div>\n        </section>\n        `\n    })\n}"
                },
                {
                    "name": "disabledSplitter",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/story-book/src/splitter/splitter.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n    parameters: {\n        docs: {\n            description: {\n                story: 'In this story, the splitter is disabled, preventing the user from resizing the areas.'\n            }\n        }\n    },\n    render: args => ({\n        props: args,\n        template: `\n        <section class=\"splitter\">\n            <ngx-splitter [direction]=\"direction\" [gutterSize]=\"gutterSize\" [disabled]=\"disabled\" order=\"1\">\n                <ngx-split-area size=\"25\" minSizePixel=\"100\">Area 1</ngx-split-area>\n                <ngx-split-area size=\"75\" minSizePixel=\"100\">Area 2</ngx-split-area>\n            </ngx-splitter>\n        </section>\n        `\n    }),\n    args: {\n        disabled: true\n    }\n}"
                },
                {
                    "name": "gutterSizeControl",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/story-book/src/splitter/splitter.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n    parameters: {\n        docs: {\n            description: {\n                story: 'This story showcases the ability to control the gutter size dynamically. Use the buttons to change the gutter size between predefined values.'\n            }\n        }\n    },\n    render: args => ({\n        props: {\n            ...args,\n            changeGutterSize(size: number): void {\n                this['gutterSize'] = size;\n            }\n        },\n        template: `\n        <section class=\"splitter bigger\">\n            <ngx-splitter [direction]=\"direction\" [gutterSize]=\"gutterSize\" [disabled]=\"disabled\" order=\"1\">\n                <ngx-split-area size=\"25\" minSizePixel=\"100\">Area 1</ngx-split-area>\n                <ngx-split-area size=\"75\" minSizePixel=\"100\">Area 2</ngx-split-area>\n            </ngx-splitter>\n            <br />\n            <div class=\"matButtonContainer\">\n                <mat-button-toggle-group name=\"gutterSize\" hideSingleSelectionIndicator=\"true\" (change)=\"changeGutterSize($event.value)\" [value]=\"gutterSize\">\n                    <mat-button-toggle value=\"5\">5px</mat-button-toggle>\n                    <mat-button-toggle value=\"10\">10px</mat-button-toggle>\n                    <mat-button-toggle value=\"45\">45px</mat-button-toggle>\n                    <mat-button-toggle value=\"100\">100px</mat-button-toggle>\n                </mat-button-toggle-group>\n            </div>\n        </section>\n        `\n    })\n}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/story-book/src/splitter/splitter.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<NgxSplitterComponent>",
                    "defaultValue": "{\n    title: 'Components/Splitter',\n    component: NgxSplitterComponent,\n    decorators: [\n        applicationConfig({\n            providers: [\n                provideAnimations() // Provides animations to the application\n            ]\n        }),\n        moduleMetadata({\n            imports: [\n                CommonModule, MatButtonToggleModule, NgxSplitAreaDirective, MatFormFieldModule, FormsModule, MatInputModule, ReactiveFormsModule\n            ]\n        })\n    ],\n    tags: ['autodocs'],\n    argTypes: {\n        direction: {\n            description: 'Sets the direction of the split, which can either be `horizontal` or `vertical`.',\n            control: 'select',\n            options: ['horizontal', 'vertical'],\n            table: {\n                type: { summary: 'NgxSplitterDirection' },\n                defaultValue: { summary: 'horizontal' }\n            }\n        },\n        gutterSize: {\n            description: 'Specifies the width of the gutter in pixels.',\n            control: 'number',\n            table: {\n                type: { summary: 'number' },\n                defaultValue: { summary: '10' }\n            }\n        },\n        disabled: {\n            description: 'Determines whether the splitter is active or disabled.',\n            control: 'boolean',\n            table: {\n                type: { summary: 'boolean' },\n                defaultValue: { summary: 'false' }\n            }\n        },\n        dragStart: {\n            description: 'Event triggered when the user starts dragging the cursor.',\n            action: 'dragStart',\n            table: {\n                type: { summary: 'EventEmitter<void>' }\n            }\n        },\n        dragProgress: {\n            description: 'Event triggered during the cursor drag, providing the progress as a percentage.',\n            action: 'dragProgress',\n            table: {\n                type: { summary: 'EventEmitter<number>' }\n            }\n        },\n        dragEnd: {\n            description: 'Event triggered when the user stops dragging the cursor.',\n            action: 'dragEnd',\n            table: {\n                type: { summary: 'EventEmitter<void>' }\n            }\n        }\n    },\n    parameters: {\n        docs: {\n            description: {\n                component: 'The `NgxSplitterComponent` allows splitting a container into resizable parts either horizontally or vertically. It supports dynamic resizing, event callbacks during drag operations, and flexible gutter sizing.'\n            }\n        }\n    },\n    args: {\n        direction: 'horizontal',\n        gutterSize: '10',\n        disabled: false\n    }\n}"
                },
                {
                    "name": "standard",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/story-book/src/splitter/splitter.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n    parameters: {\n        docs: {\n            description: {\n                story: 'This story demonstrates the standard usage of `NgxSplitterComponent`, where the container is split into two resizable areas in a horizontal direction. The first area takes 25% of the space, while the second area takes 75%.'\n            }\n        }\n    },\n    render: args => ({\n        props: args,\n        template: `\n        <section class=\"splitter\">\n            <ngx-splitter [direction]=\"direction\" [gutterSize]=\"gutterSize\" [disabled]=\"disabled\" order=\"1\">\n                <ngx-split-area size=\"25\" minSizePixel=\"100\">\n                    <p>Lorem ipsum dolor sit amet...</p>\n                </ngx-split-area>\n                <ngx-split-area size=\"75\" minSizePixel=\"100\">\n                    <p>Sed ut perspiciatis unde omnis iste natus erro...</p>\n                </ngx-split-area>\n            </ngx-splitter>\n        </section>\n        `\n    }),\n    args: {\n        direction: 'horizontal'\n    }\n}"
                },
                {
                    "name": "verticalSplit",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/story-book/src/splitter/splitter.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n    parameters: {\n        docs: {\n            description: {\n                story: 'This story illustrates a vertical splitter, dividing the container into two areas. The first area occupies 25% of the height, while the second takes 75%.'\n            }\n        }\n    },\n    render: args => ({\n        props: args,\n        template: `\n        <section class=\"splitter\">\n            <ngx-splitter [direction]=\"direction\" [gutterSize]=\"gutterSize\" [disabled]=\"disabled\" order=\"1\">\n                <ngx-split-area size=\"25\" minSizePixel=\"100\">Area 1</ngx-split-area>\n                <ngx-split-area size=\"75\" minSizePixel=\"100\">Area 2</ngx-split-area>\n            </ngx-splitter>\n        </section>\n        `\n    }),\n    args: {\n        direction: 'vertical'\n    }\n}"
                }
            ],
            "projects/story-book/src/status/status.stories.ts": [
                {
                    "name": "complete",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/story-book/src/status/status.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n    parameters: {\n        docs: {\n            description: {\n                story: 'This example showcases a `NgxStatusComponent` with all available features, including title, type, text, date, duration, custom CSS class, technical text, and multiple actions. Depending on the user\\'s \"familyCode\" property given, the UserCard can have a green, blue, red or gray colored badge.<br /><ul><li>Green : <code>Médico-technique</code>, <code>Social</code>, <code>Médico-thérapeutique</code>, <code>Pharmacie</code></li><li>Blue : <code>Soins</code>, <code>Infirmier-e</code></li><li>Red : <code>Médecin dentiste</code>, <code>Médecin</code></li><li>Gray : Any other text</li><li>Nothing : Empty familyCode</li></ul>'\n            }\n        }\n    },\n    render: args => ({\n        props: {\n            ...args\n        },\n        template: `\n        <section class=\"status\">\n          <ngx-status [status]=\"status\"></ngx-status>\n        </section>\n      `\n    }),\n    args: {\n        status: {\n            title: 'Sample Status Title',\n            type: 'info',\n            text: 'This is a sample status message.',\n            date: new Date(),\n            duration: 5000,\n            className: 'my-custom-css-class-2',\n            technicalText: 'Technical details about the status.',\n            actions: [\n                {\n                    label: 'Action 1',\n                    callback: (): void => console.log('Action 1 triggered.')\n                },\n                {\n                    label: 'Action 2',\n                    callback: (): void => console.log('Action 2 triggered.')\n                }\n            ]\n        }\n    }\n}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/story-book/src/status/status.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<NgxStatusComponent>",
                    "defaultValue": "{\n    title: 'Components/Status',\n    component: NgxStatusComponent,\n    decorators: [\n        moduleMetadata({\n            imports: [\n                CommonModule, NgxSnackbarComponent, NgxStatusModule, MatButtonToggleModule\n            ],\n            providers: [NgxStatusService]\n        })\n    ],\n    tags: ['autodocs'],\n    argTypes: {\n        status: {\n            description: 'The object containing the status details to be displayed.',\n            control: {\n                type: 'object'\n            },\n            table: {\n                type: { summary: 'NgxStatus' },\n                defaultValue: { summary: 'undefined' }\n            }\n        }\n    },\n    args: {\n    },\n    parameters: {\n        docs: {\n            description: {\n                component: 'The `NgxStatusComponent` displays informational messages in a popup, leveraging the `NgxSnackbarComponent`. It supports various types of notifications, custom actions, and detailed technical information.'\n            }\n        }\n    }\n}"
                },
                {
                    "name": "minimumRequired",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/story-book/src/status/status.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n    parameters: {\n        docs: {\n            description: {\n                story: 'This example demonstrates the `NgxStatusComponent` with only the required fields: `title` and `type`. Additional fields are optional.'\n            }\n        }\n    },\n    render: args => ({\n        props: {\n            ...args\n        },\n        template: `\n        <section class=\"status\">\n          <ngx-status [status]=\"status\"></ngx-status>\n        </section>\n      `\n    }),\n    args: {\n        status: {\n            title: 'Sample Status Title',\n            type: 'info'\n        }\n    }\n}"
                },
                {
                    "name": "statusActions",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/story-book/src/status/status.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n    parameters: {\n        docs: {\n            description: {\n                story: 'This example demonstrates how to add actions to the `NgxStatusComponent`. Each action can be triggered with a callback.'\n            }\n        }\n    },\n    render: args => ({\n        props: {\n            ...args\n        },\n        template: `\n        <section class=\"status\">\n          <ngx-status [status]=\"status\"></ngx-status>\n        </section>\n      `\n    }),\n    args: {\n        status: {\n            title: 'Sample Status Title',\n            type: 'info',\n            text: 'Message with multiple actions.',\n            actions: [\n                {\n                    label: 'Action 1',\n                    callback: (): void => alert('Action 1 executed.')\n                },\n                {\n                    label: 'Action 2',\n                    callback: (): void => alert('Action 2 executed.')\n                }\n            ]\n        }\n    }\n}"
                },
                {
                    "name": "statusCustomCssClass",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/story-book/src/status/status.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n    parameters: {\n        docs: {\n            description: {\n                story: 'This example shows how to apply custom CSS styles to the `NgxStatusComponent` using the `className` property.'\n            }\n        }\n    },\n    render: args => ({\n        props: {\n            ...args\n        },\n        template: `\n        <section class=\"status\">\n            <ngx-status [status]=\"status\"></ngx-status>\n        </section>\n      `\n    }),\n    args: {\n        status: {\n            title: 'Sample Status Title',\n            type: 'info',\n            text: 'Message with custom CSS class.',\n            className: 'my-custom-css-class'\n        }\n    }\n}"
                },
                {
                    "name": "statusDuration",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/story-book/src/status/status.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n    parameters: {\n        docs: {\n            description: {\n                story: 'This example demonstrates setting a custom `duration` for the `NgxStatusComponent`. By default, the duration is 30 seconds for danger types and 8 seconds for other types.'\n            }\n        }\n    },\n    render: args => ({\n        props: {\n            ...args\n        },\n        template: `\n        <section class=\"status\">\n            <ngx-status [status]=\"status\"></ngx-status>\n        </section>\n      `\n    }),\n    args: {\n        status: {\n            title: 'Sample Status Title',\n            type: 'info',\n            text: 'Message with custom duration.',\n            duration: 3000 // Duration in milliseconds\n        }\n    }\n}"
                },
                {
                    "name": "statusTechnicalText",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/story-book/src/status/status.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n    parameters: {\n        docs: {\n            description: {\n                story: 'This example shows how to include `technicalText` and `date` in the `NgxStatusComponent`. An info icon will appear, and clicking it will show the technical details in a dialog.'\n            }\n        }\n    },\n    render: args => ({\n        props: {\n            ...args\n        },\n        template: `\n        <section class=\"status\">\n            <ngx-status [status]=\"status\"></ngx-status>\n        </section>\n      `\n    }),\n    args: {\n        status: {\n            title: 'Error Status',\n            type: 'danger',\n            date: new Date(),\n            text: 'This is an error message.',\n            technicalText: 'Detailed technical information about the error.'\n        }\n    }\n}"
                },
                {
                    "name": "statusText",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/story-book/src/status/status.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n    parameters: {\n        docs: {\n            description: {\n                story: 'This example demonstrates how to use the `text` property to display additional information in the status component.'\n            }\n        }\n    },\n    render: args => ({\n        props: {\n            ...args\n        },\n        template: `\n        <section class=\"status\">\n          <ngx-status [status]=\"status\"></ngx-status>\n        </section>\n      `\n    }),\n    args: {\n        status: {\n            title: 'Sample Status Title',\n            type: 'info',\n            text: 'Detailed message providing more context about the status.'\n        }\n    }\n}"
                },
                {
                    "name": "statusType",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/story-book/src/status/status.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n    parameters: {\n        docs: {\n            description: {\n                story: 'This example illustrates the different `type` values that the `NgxStatusComponent` can have: `primary`, `info`, `success`, `warn`, and `danger`. Use the buttons to switch between types.'\n            }\n        }\n    },\n    render: args => ({\n        props: {\n            ...args,\n            typeChanged(type: string): void {\n                this['status'] = {\n                    title: 'Sample Status Title',\n                    type: type,\n                    text: 'Sample text for the status message.'\n                };\n            }\n        },\n        template: `\n        <section class=\"status\">\n            <ngx-status [status]=\"status\"></ngx-status>\n            <br />\n            <div class=\"matButtonContainer\">\n                <mat-button-toggle-group name=\"type\" hideSingleSelectionIndicator=\"true\" (change)=\"typeChanged($event.value)\" [value]=\"status.type\">\n                    <mat-button-toggle value=\"primary\">primary</mat-button-toggle>\n                    <mat-button-toggle value=\"info\">info</mat-button-toggle>\n                    <mat-button-toggle value=\"success\">success</mat-button-toggle>\n                    <mat-button-toggle value=\"warn\">warn</mat-button-toggle>\n                    <mat-button-toggle value=\"danger\">danger</mat-button-toggle>\n                </mat-button-toggle-group>\n            </div>\n        </section>\n      `\n    }),\n    args: {\n        status: {\n            title: 'Sample Status Title',\n            type: 'success',\n            text: 'Sample text for the status message.'\n        }\n    }\n}"
                }
            ],
            "projects/story-book/src/search-container/search-container.stories.ts": [
                {
                    "name": "customTooltips",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/story-book/src/search-container/search-container.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n    parameters: {\n        docs: {\n            description: {\n                story: 'Shows the search container with custom tooltip texts for clear, open, and close actions.'\n            }\n        }\n    },\n    ...standard,\n    args: {\n        clearTooltip: 'Clear search',\n        openSearchTooltip: 'Start searching',\n        closeSearchTooltip: 'Close search'\n    }\n}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/story-book/src/search-container/search-container.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<NgxSearchContainerComponent>",
                    "defaultValue": "{\n    title: 'Components/Search Container',\n    component: NgxSearchContainerComponent,\n    decorators: [\n        moduleMetadata({\n            imports: [\n                CommonModule,\n                NgxSearchInputDirective,\n                FormsModule,\n                MatIconModule,\n                MatListModule,\n                MatTooltipModule\n            ]\n        })\n    ],\n    tags: ['autodocs'],\n    parameters: {\n        docs: {\n            description: {\n                component: 'The `NgxSearchContainerComponent` provides a flexible search interface with customizable tooltips for actions such as clearing, opening, and closing the search. It integrates with an input field via the `ngx-search-input` directive to enable search functionality.'\n            }\n        }\n    },\n    argTypes: {\n        clearTooltip: {\n            control: 'text',\n            description: 'Tooltip text for the clear button in the search container. This is displayed when the user hovers over the clear button.',\n            table: {\n                type: { summary: 'string' },\n                defaultValue: { summary: 'Effacer la recherche' }\n            }\n        },\n        openSearchTooltip: {\n            description: 'Tooltip text for the button that opens the search. This is displayed when the user hovers over the search button.',\n            control: 'text',\n            table: {\n                type: { summary: 'string' },\n                defaultValue: { summary: 'Ouvrir la recherche' }\n            }\n        },\n        closeSearchTooltip: {\n            description: 'Tooltip text for the button that closes the search. This is displayed when the user hovers over the close button.',\n            control: 'text',\n            table: {\n                type: { summary: 'string' },\n                defaultValue: { summary: 'Quitter la recherche' }\n            }\n        }\n    },\n    args: {\n        clearTooltip: 'Effacer la recherche',\n        openSearchTooltip: 'Ouvrir la recherche',\n        closeSearchTooltip: 'Quitter la recherche'\n    }\n}"
                },
                {
                    "name": "searchWithLists",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/story-book/src/search-container/search-container.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n    parameters: {\n        docs: {\n            description: {\n                story: 'Demonstrates the search container with a full list and search functionality. The search input filters the list based on user input and displays the results in separate sections.'\n            }\n        }\n    },\n    render: args => ({\n        props: {\n            ...args,\n            fullList: ['lion',\n                'tigre',\n                'éléphant',\n                'giraffe',\n                'panda',\n                'koala',\n                'limace',\n                'cygne',\n                'chat',\n                'ours',\n                'faisan',\n                'dauphin',\n                'paon',\n                'furet',\n                'panda',\n                'phoque',\n                'crocodile',\n                'gorille',\n                'raie',\n                'chinchilla',\n                'cafard',\n                'faisan',\n                'corbeau',\n                'dromadaire',\n                'alpaga',\n                'aigle',\n                'espadon',\n                'canari',\n                'guépard'],\n            searchList: [],\n            searchModel: '',\n            searchQueryChanged(event: string): void {\n                // If search query is empty, reset searchList to fullList\n                if (!event || event === '') {\n                    this['searchList'] = this['fullList'] as string[];\n                } else {\n                    this['searchList'] = (this['fullList'] as string[]).filter((animal: string) => animal.includes(event));\n\n                }\n            }\n        },\n        template: `\n            <section>\n              <ngx-search-container [clearTooltip]=\"clearTooltip\">\n                <input ngx-search-input type=\"text\" placeholder=\"Rechercher dans la liste\" [(ngModel)]=\"searchModel\" (ngModelChange)=\"searchQueryChanged($event)\" />\n              </ngx-search-container>\n              <br />\n              <div class=\"listsContainer\">\n                <div class=\"fullList\">\n                  <span>Liste complète</span>\n                  <mat-list role=\"list\">\n                    <mat-list-item role=\"listitem\" *ngFor=\"let animal of fullList\">{{ animal }}</mat-list-item>\n                  </mat-list>\n                </div>\n                <div class=\"searchList\">\n                  <span>Liste issue de la recherche</span>\n                  <mat-list role=\"list\">\n                    <mat-list-item role=\"listitem\" *ngFor=\"let animal of searchList\">{{ animal }}</mat-list-item>\n                  </mat-list>\n                </div>\n              </div>\n            </section>\n          `,\n        styles: [`\n            section {\n              padding: 5rem;\n              font-family: 'Roboto';\n            }\n\n            .listsContainer {\n              display: flex;\n              gap: 5px;\n            }\n\n            .fullList,\n            .searchList {\n              flex: auto;\n            }\n\n            .mdc-list-item.mdc-list-item--with-one-line {\n              height: 24px;\n            }\n          `]\n    }),\n    args: {\n        clearTooltip: 'Effacer la recherche'\n    }\n}"
                },
                {
                    "name": "standard",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/story-book/src/search-container/search-container.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n    parameters: {\n        docs: {\n            description: {\n                story: 'Displays a basic search container with default tooltips. Includes an input field for search queries.'\n            }\n        }\n    },\n    render: args => ({\n        props: args,\n        template: `\n            <ngx-search-container\n              [clearTooltip]=\"clearTooltip\"\n              [openSearchTooltip]=\"openSearchTooltip\"\n              [closeSearchTooltip]=\"closeSearchTooltip\">\n              <input ngx-search-input type=\"text\" placeholder=\"Rechercher dans la liste\" [(ngModel)]=\"searchModel\" />\n            </ngx-search-container>\n          `\n    })\n}"
                }
            ],
            "projects/story-book/src/user-card/user-card.stories.ts": [
                {
                    "name": "dynamicBadgeColor",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/story-book/src/user-card/user-card.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n    parameters: {\n        docs: {\n            description: {\n                story: 'Depending on the user\\'s \"familyCode\" property given, the UserCard can have a green, blue, red or gray colored badge.<br /><ul><li>Green : <code>Médico-technique</code>, <code>Social</code>, <code>Médico-thérapeutique</code>, <code>Pharmacie</code></li><li>Blue : <code>Soins</code>, <code>Infirmier-e</code></li><li>Red : <code>Médecin dentiste</code>, <code>Médecin</code></li><li>Gray : Any other text</li><li>Nothing : Empty familyCode</li></ul>'\n            }\n        }\n    },\n    render: args => ({\n        props: {\n            ...args,\n            familyCodeChanged(code: string): void {\n                this['user'] = {\n                    title: 'Professeur',\n                    firstname: 'Jean',\n                    lastname: 'PATATE',\n                    initials: 'jpat',\n                    type: 'Type',\n                    email: 'jean.patate@hug.ch',\n                    role: 'Medecin',\n                    groupFunctionLabel: 'Group',\n                    familyCode: code,\n                    functionSefName: 'SefNameFunction',\n                    functionSefCode: 'SefCodeFunction',\n                    organisation: 'HUG',\n                    speciality: 'Neurochirurgie',\n                    specialty1: 'Dermatologie',\n                    specialty2: 'Pedicure',\n                    esoN3Label: 'EsoN3Label',\n                    login: 'PatateLogin',\n                    phone: '+44 150 509 39',\n                    bip: '8859595',\n                    mobile: '+44 150 509 39',\n                    address: 'Carouge, 7 Rue St Julien',\n                    city: 'Carouge',\n                    zipCode: '1227'\n                };\n            }\n        },\n        template: `\n        <section>\n          <ngx-user-card [user]=\"user\" [expanded]=\"false\"></ngx-user-card>\n          <br />\n          <div class=\"matButtonContainer\">\n            <mat-button-toggle-group name=\"favoriteColor\" hideSingleSelectionIndicator=\"true\" (change)=\"familyCodeChanged($event.value)\" [value]=\"user.familyCode\">\n                <mat-button-toggle value=\"Social\">Social</mat-button-toggle>\n                <mat-button-toggle value=\"Infirmier-e\">Infirmier-e</mat-button-toggle>\n                <mat-button-toggle value=\"Médecin dentiste\">Médecin dentiste</mat-button-toggle>\n                <mat-button-toggle value=\"a text\">Custom text</mat-button-toggle>\n                <mat-button-toggle value=\"\">Empty</mat-button-toggle>\n            </mat-button-toggle-group>\n          </div>\n        </section>\n      `\n    }),\n    args: {\n        user: {\n            title: 'Professeur',\n            firstname: 'Jean',\n            lastname: 'PATATE',\n            initials: 'jpat',\n            type: 'Type',\n            email: 'jean.patate@hug.ch',\n            role: 'Medecin',\n            groupFunctionLabel: 'Group',\n            familyCode: 'Social',\n            functionSefName: 'SefNameFunction',\n            functionSefCode: 'SefCodeFunction',\n            organisation: 'HUG',\n            speciality: 'Neurochirurgie',\n            specialty1: 'Dermatologie',\n            specialty2: 'Pedicure',\n            esoN3Label: 'EsoN3Label',\n            login: 'PatateLogin',\n            phone: '+44 150 509 39',\n            bip: '8859595',\n            mobile: '+44 150 509 39',\n            address: 'Carouge, 7 Rue St Julien',\n            city: 'Carouge',\n            zipCode: '1227'\n        }\n    }\n}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/story-book/src/user-card/user-card.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<NgxUserCardComponent>",
                    "defaultValue": "{\n    title: 'Components/User Card',\n    component: NgxUserCardComponent,\n    tags: ['autodocs'],\n    decorators: [\n        moduleMetadata({\n            imports: [\n                MatButtonToggleModule\n            ]\n        })\n    ],\n    parameters: {\n        layout: 'centered',\n        docs: {\n            description: {\n                component: 'The `NgxUserCardComponent` displays user information. The UserCard can be expanded or compressed, showing or hiding additional details based on the `expanded` input.'\n            }\n        }\n    },\n    argTypes: {\n        expanded: {\n            control: 'boolean',\n            table: {\n                defaultValue: {\n                    summary: 'true'\n                },\n                type: { summary: 'boolean' }\n            },\n            description: 'Set to false to have a compressed UserCard with less information.'\n        },\n        user: {\n            control: 'object',\n            table: {\n                type: { summary: 'NgxUserCard' }\n            },\n            description: 'User information object for displaying in the card.'\n        }\n    },\n    args: {\n        user: {\n            title: 'Docteur',\n            firstname: 'Jean',\n            lastname: 'PATATE',\n            initials: 'jpat',\n            type: 'Type',\n            email: 'jean.patate@hug.ch',\n            role: 'Medecin',\n            groupFunctionLabel: 'Group',\n            familyCode: 'Infirmier-e', // This value will influence badge color\n            functionSefName: 'SefNameFunction',\n            functionSefCode: 'SefCodeFunction',\n            organisation: 'HUG',\n            speciality: 'Neurochirurgie',\n            specialty1: 'Dermatologie',\n            specialty2: 'Pedicure',\n            esoN3Label: 'EsoN3Label',\n            login: 'PatateLogin',\n            phone: '+44 150 509 39',\n            bip: '8859595',\n            mobile: '+44 150 509 39',\n            address: 'Carouge, 7 Rue St Julien',\n            city: 'Carouge',\n            zipCode: '1227'\n        },\n        expanded: false\n    }\n}"
                },
                {
                    "name": "notExpandedUserCard",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/story-book/src/user-card/user-card.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n    parameters: {\n        docs: {\n            description: {\n                story: 'You can set the \"expanded\" property to false to have a compressed UserCard with less information.'\n            }\n        }\n    }\n}"
                },
                {
                    "name": "standard",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/story-book/src/user-card/user-card.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n    args: {\n        expanded: true\n    }\n}"
                },
                {
                    "name": "userAbbreviationTitle",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/story-book/src/user-card/user-card.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n    parameters: {\n        docs: {\n            description: {\n                story: 'Depending on the user\\'s \"title\" property given, the UserCard will display its abbreviation.<br /><ul><li>Docteur / Docteure : <code>Dr</code>, <code>Dre</code></li><li>Monsieur / Madame : <code>M</code>, <code>Mme</code></li><li>Professeur / Professeure : <code>Pr</code>, <code>Pre</code></li></ul>Any other text in the \"title\" property will be displayed entirely.'\n            }\n        }\n    },\n    render: args => ({\n        props: {\n            ...args,\n            titleChanged(code: string): void {\n                this['user'] = {\n                    title: code,\n                    firstname: 'Jean',\n                    lastname: 'PATATE',\n                    initials: 'jpat',\n                    type: 'Type',\n                    email: 'jean.patate@hug.ch',\n                    role: 'Medecin',\n                    groupFunctionLabel: 'Group',\n                    familyCode: 'Soins',\n                    functionSefName: 'SefNameFunction',\n                    functionSefCode: 'SefCodeFunction',\n                    organisation: 'HUG',\n                    speciality: 'Neurochirurgie',\n                    specialty1: 'Dermatologie',\n                    specialty2: 'Pedicure',\n                    esoN3Label: 'EsoN3Label',\n                    login: 'PatateLogin',\n                    phone: '+44 150 509 39',\n                    bip: '8859595',\n                    mobile: '+44 150 509 39',\n                    address: 'Carouge, 7 Rue St Julien',\n                    city: 'Carouge',\n                    zipCode: '1227'\n                };\n            }\n        },\n        template: `\n        <section>\n          <ngx-user-card [user]=\"user\" [expanded]=\"false\"></ngx-user-card>\n          <br />\n          <div class=\"matButtonContainer\">\n            <mat-button-toggle-group name=\"title\" hideSingleSelectionIndicator=\"true\" (change)=\"titleChanged($event.value)\" [value]=\"user.title\">\n                <mat-button-toggle value=\"Docteur\">Docteur</mat-button-toggle>\n                <mat-button-toggle value=\"Docteure\">Docteure</mat-button-toggle>\n                <mat-button-toggle value=\"Monsieur\">Monsieur</mat-button-toggle>\n                <mat-button-toggle value=\"Madame\">Madame</mat-button-toggle>\n                <mat-button-toggle value=\"Professeur\">Professeur</mat-button-toggle>\n                <mat-button-toggle value=\"Professeure\">Professeure</mat-button-toggle>\n                <mat-button-toggle value=\"OtherTitle\">OtherTitle</mat-button-toggle>\n            </mat-button-toggle-group>\n          </div>\n        </section>\n      `\n    }),\n    args: {\n        user: {\n            title: 'Professeur',\n            firstname: 'Jean',\n            lastname: 'PATATE',\n            initials: 'jpat',\n            type: 'Type',\n            email: 'jean.patate@hug.ch',\n            role: 'Medecin',\n            groupFunctionLabel: 'Group',\n            familyCode: 'Infirmier-e',\n            functionSefName: 'SefNameFunction',\n            functionSefCode: 'SefCodeFunction',\n            organisation: 'HUG',\n            speciality: 'Neurochirurgie',\n            specialty1: 'Dermatologie',\n            specialty2: 'Pedicure',\n            esoN3Label: 'EsoN3Label',\n            login: 'PatateLogin',\n            phone: '+44 150 509 39',\n            bip: '8859595',\n            mobile: '+44 150 509 39',\n            address: 'Carouge, 7 Rue St Julien',\n            city: 'Carouge',\n            zipCode: '1227'\n        }\n    }\n}"
                },
                {
                    "name": "userWithMissingInfo",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/story-book/src/user-card/user-card.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n    parameters: {\n        docs: {\n            description: {\n                story: 'Displays the component when certain user information is missing. This helps ensure that the rendering remains consistent even with incomplete data.'\n            }\n        }\n    },\n    args: {\n        user: {\n            title: 'Professor',\n            firstname: 'Jean',\n            lastname: 'PATATE',\n            initials: 'jpat',\n            email: 'jean.patate@hug.ch'\n            // Phone number and address are missing\n        },\n        expanded: true\n    }\n}"
                }
            ],
            "projects/story-book/src/list-loader/list-loader.stories.ts": [
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/story-book/src/list-loader/list-loader.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<NgxListLoaderComponent>",
                    "defaultValue": "{\n    title: 'Components/List Loader',\n    component: NgxListLoaderComponent,\n    tags: ['autodocs'],\n    parameters: {\n        docs: {\n            description: {\n                component: 'The `NgxListLoaderComponent` is used to display a loading indicator when fetching large amounts of data. It includes a spinner animation and an optional label for context.'\n            }\n        }\n    },\n    argTypes: {\n        label: {\n            description: 'The label text displayed alongside the loader.',\n            control: {\n                type: 'text'\n            },\n            table: {\n                type: { summary: 'string' },\n                defaultValue: { summary: '' }\n            }\n        }\n    }\n}"
                },
                {
                    "name": "standard",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/story-book/src/list-loader/list-loader.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n    parameters: {\n        docs: {\n            description: {\n                story: 'Displays the default loader without a label. This is useful when no additional context is needed.'\n            }\n        }\n    },\n    args: {\n        label: ''\n    }\n}"
                },
                {
                    "name": "withLabel",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/story-book/src/list-loader/list-loader.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n    parameters: {\n        docs: {\n            description: {\n                story: 'Shows the loader with a custom label. This can be used to provide additional information or context while the data is loading.'\n            }\n        }\n    },\n    args: {\n        label: 'Loading data, please wait...'\n    }\n}"
                },
                {
                    "name": "withLongLabel",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/story-book/src/list-loader/list-loader.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n    parameters: {\n        docs: {\n            description: {\n                story: 'Displays the loader with a long label to test how it handles extended text. This is useful to ensure that the layout accommodates longer messages.'\n            }\n        }\n    },\n    args: {\n        label: 'This is a very long label that we use to test how the loader handles extended text. It should wrap or truncate gracefully depending on the design.'\n    }\n}"
                }
            ],
            "projects/story-book/src/overlay/overlay.stories.ts": [
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/story-book/src/overlay/overlay.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<NgxOverlayComponent>",
                    "defaultValue": "{\n    title: 'Components/Overlay',\n    component: NgxOverlayComponent,\n    decorators: [\n        applicationConfig({\n            providers: [\n                provideAnimations() // Provides animations to the application\n            ]\n        }),\n        moduleMetadata({\n            imports: [\n                CommonModule, MatButtonModule, MatIconModule, MatFormFieldModule, FormsModule, MatInputModule, ReactiveFormsModule\n            ]\n        })\n    ],\n    tags: ['autodocs'],\n    argTypes: {\n        width: {\n            description: 'Defines the width of the overlay for desktop view.',\n            table: {\n                type: { summary: 'string' }\n            }\n        },\n        widthForMobile: {\n            description: 'Defines the width of the overlay for mobile view. It is only used when isMobile is true.',\n            table: {\n                type: { summary: 'string' },\n                disable: true\n            }\n        },\n        isMobile: {\n            description: 'Determines whether the overlay should use mobile-specific settings.',\n            table: {\n                type: { summary: 'boolean' },\n                disable: true\n            }\n        },\n        overlayBackdropClass: {\n            description: 'CSS class applied to the overlay backdrop. Can be used to style the backdrop.',\n            table: {\n                type: { summary: 'string' }\n            }\n        },\n        overlayContainerClass: {\n            description: 'CSS class applied to the overlay container. Allows customization of the overlay appearance.',\n            table: {\n                type: { summary: 'string' }\n            }\n        }\n    },\n    args: {\n        width: '400px',\n        widthForMobile: '200px',\n        isMobile: false,\n        overlayBackdropClass: '',\n        overlayContainerClass: ''\n    },\n    parameters: {\n        docs: {\n            description: {\n                component: 'The `NgxOverlayComponent` displays an overlay that appears above the page content. It supports custom widths, mobile-specific settings, and customizable CSS classes for both the container and backdrop.'\n            }\n        }\n    }\n}"
                },
                {
                    "name": "navigationExample",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/story-book/src/overlay/overlay.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n    parameters: {\n        docs: {\n            description: {\n                story: 'Here an example of navigation through the component'\n            }\n        }\n    },\n    render: args => ({\n        props: {\n            ...args,\n            selected: '',\n            items: [\n                { text: 'Refresh' },\n                { text: 'Settings' },\n                { text: 'Help', disabled: true },\n                { text: 'Sign Out' }\n            ],\n            select(text: string): void {\n                this['selected'] = text;\n            }\n        },\n        template: `\n        <section class=\"overlay\">\n            <span class=\"iconOverlayContainer\">\n                <button mat-icon-button (click)=\"anchorMenu.show($event)\">\n                    <mat-icon>more_vert</mat-icon>\n                </button>\n                Clicking these will navigate\n            </span>\n            <ngx-overlay #anchorMenu overlayContainerClass=\"ngx-menu\" positions=\"start top start bottom\">\n                <div class=\"ngx-menu-content anchor-menu\">\n                    <a class=\"ngx-menu-item\" *ngFor=\"let item of items\" href=\"http://www.google.com\" target=\"_blank\">{{ item.text }}</a>\n                </div>\n            </ngx-overlay>\n        </section>\n      `\n    })\n}"
                },
                {
                    "name": "overlayClass",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/story-book/src/overlay/overlay.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n    parameters: {\n        docs: {\n            description: {\n                story: 'Customize the overlay appearance by applying custom CSS classes. Use <code>overlayContainerClass</code> for the overlay itself and <code>overlayBackdropClass</code> for the backdrop.'\n            }\n        }\n    },\n    render: args => ({\n        props: {\n            ...args,\n            selected: '',\n            items: [\n                { text: 'Refresh' },\n                { text: 'Settings' },\n                { text: 'Help', disabled: true },\n                { text: 'Sign Out' }\n            ],\n            select(text: string): void {\n                this['selected'] = text;\n            }\n        },\n        template: `\n        <section class=\"overlay\">\n            <span class=\"iconOverlayContainer\">\n                <button mat-icon-button (click)=\"menu.show($event)\">\n                    <mat-icon>more_vert</mat-icon>\n                </button>\n                < Click here\n            </span>\n\n            <ngx-overlay #menu [overlayContainerClass]=\"overlayContainerClass\" [overlayBackdropClass]=\"overlayBackdropClass\">\n                <div class=\"ngx-menu-content button-menu\">\n                    <button mat-button class=\"ngx-menu-item\" *ngFor=\"let item of items\" (click)=\"select(item.text); menu.close()\">{{ item.text }}</button>\n                </div>\n            </ngx-overlay>\n        </section>\n      `\n    }),\n    args: {\n        overlayContainerClass: 'myCustomContainerClass',\n        overlayBackdropClass: 'myCustomBackdropClass'\n    }\n}"
                },
                {
                    "name": "overlayForMobile",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/story-book/src/overlay/overlay.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n    tags: ['!dev', '!autodocs'], // Pour disable sur le menu à gauche !dev, et sur la doc !autodocs\n    parameters: {\n        docs: {\n            description: {\n                story: 'Set a <code>widthForMobile</code> that is used when <code>isMobile</code> is true to adjust the overlay width for mobile devices.'\n            }\n        }\n    },\n    render: args => ({\n        props: {\n            ...args\n        },\n        template: `\n        <section class=\"overlay\">\n            <button #owner mat-icon-button (click)=\"menu.show($event)\">\n                <mat-icon>more_vert</mat-icon>\n            </button>\n\n            <ngx-overlay #menu overlayContainerClass=\"ngx-menu\" [width]=\"width\" [widthForMobile]=\"widthForMobile\" [isMobile]=\"isMobile\" overlayContainerClass=\"customContainerForWidth\" [ownerElement]=\"owner\">\n                <div class=\"ngx-menu-content button-menu\">\n                    Try to modify the width of the NgxOverlay component this text will be limited in width by this value\n                    <br />\n                    <br />\n                    Current width: [{{menu.width}}]\n                </div>\n            </ngx-overlay>\n        </section>\n      `\n    }),\n    args: {\n        widthForMobile: '200px',\n        isMobile: true\n    }\n}"
                },
                {
                    "name": "overlayWidth",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/story-book/src/overlay/overlay.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n    parameters: {\n        docs: {\n            description: {\n                story: 'Configure the width of the overlay using the <code>width</code> property. Adjust the input field to see changes in real-time.'\n            }\n        }\n    },\n    render: args => ({\n        props: {\n            ...args,\n            widthChanged(value: string): void {\n                this['width'] = value;\n            }\n        },\n        template: `\n        <section class=\"overlay\">\n            <button mat-icon-button (click)=\"menu.show($event)\">\n                <mat-icon>more_vert</mat-icon>\n            </button>\n\n            <ngx-overlay #menu overlayContainerClass=\"ngx-menu\" [width]=\"width\" overlayContainerClass=\"customContainerForWidth\">\n                <div class=\"ngx-menu-content button-menu\">\n                    Try to modify the width of the NgxOverlay component. This text will be limited in width by this value\n                    <br />\n                    <br />\n                    Current width: [{{menu.width}}]\n                </div>\n            </ngx-overlay>\n\n            <div class=\"grouped\">\n                <mat-form-field appearance=\"outline\">\n                    <mat-label>Width</mat-label>\n                    <input matInput type=\"string\" [ngModel]=\"width\" (ngModelChange)=\"widthChanged($event)\" />\n                    <mat-hint><strong>try 900</strong></mat-hint>\n                </mat-form-field>\n            </div>\n        </section>\n      `\n    })\n}"
                },
                {
                    "name": "ownerElement",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/story-book/src/overlay/overlay.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n    tags: ['!dev', '!autodocs'], // Pour disable sur le menu à gauche !dev, et sur la doc !autodocs\n    parameters: {\n        docs: {\n            description: {\n                story: 'You can provide two custom css classes to the component: <ul><li><code>overlayContainerClass</code>allows you to customize the overlay itself</li><li><code>overlayBackdropClass</code>allows you to customize the overlay backdrop</li></ul>'\n            }\n        }\n    },\n    render: args => ({\n        props: {\n            ...args,\n            selected: '',\n            items: [\n                { text: 'Refresh' },\n                { text: 'Settings' },\n                { text: 'Help', disabled: true },\n                { text: 'Sign Out' }\n            ],\n            select(text: string): void {\n                this['selected'] = text;\n            }\n        },\n        template: `\n        <section class=\"overlay\">\n            <span class=\"iconOverlayContainer\">\n                <button mat-icon-button (click)=\"menu.show($event)\">\n                    <mat-icon>more_vert</mat-icon>\n                </button>\n                < Click here\n            </span>\n\n            <div class=\"ownerContainer\">\n                <span id=\"owner\" #owner>I am is owner</span>\n            </div>\n\n            <ngx-overlay #menu [overlayContainerClass]=\"overlayContainerClass\" [overlayBackdropClass]=\"overlayBackdropClass\" [ownerElement]=\"owner\">\n                <div class=\"ngx-menu-content button-menu\">\n                    <button mat-button class=\"ngx-menu-item\" *ngFor=\"let item of items\" (click)=\"select(item.text); menu.close()\">{{ item.text }}</button>\n                </div>\n            </ngx-overlay>\n        </section>\n      `\n    }),\n    args: {\n        overlayContainerClass: 'myCustomContainerClass',\n        overlayBackdropClass: 'myCustomBackdropClass'\n    }\n}"
                },
                {
                    "name": "standard",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/story-book/src/overlay/overlay.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n    render: args => ({\n        props: {\n            ...args,\n            selected: '',\n            items: [\n                { text: 'Refresh' },\n                { text: 'Settings' },\n                { text: 'Help', disabled: true },\n                { text: 'Sign Out' }\n            ],\n            select(text: string): void {\n                this['selected'] = text;\n            }\n        },\n        template: `\n        <section class=\"overlay\">\n            <button mat-icon-button (click)=\"menu.show($event)\">\n                <mat-icon>more_vert</mat-icon>\n            </button>\n\n            <ngx-overlay #menu overlayContainerClass=\"ngx-menu\" [width]=\"width\" [widthForMobile]=\"widthForMobile\" [isMobile]=\"isMobile\">\n                <div class=\"ngx-menu-content button-menu\">\n                    <button mat-button class=\"ngx-menu-item\" *ngFor=\"let item of items\" (click)=\"select(item.text); menu.close()\">{{ item.text }}</button>\n                </div>\n            </ngx-overlay>\n        </section>\n      `\n    })\n}"
                },
                {
                    "name": "textContainerExample",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/story-book/src/overlay/overlay.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n    parameters: {\n        docs: {\n            description: {\n                story: 'An example demonstrating the NgxOverlay component with a large block of text and a custom style.'\n            }\n        }\n    },\n    render: args => ({\n        props: {\n            ...args,\n            selected: '',\n            items: [\n                { text: 'Refresh' },\n                { text: 'Settings' },\n                { text: 'Help', disabled: true },\n                { text: 'Sign Out' }\n            ],\n            select(text: string): void {\n                this['selected'] = text;\n            }\n        },\n        template: `\n        <section class=\"overlay\">\n            <span class=\"iconOverlayContainer\">\n                Click here >\n\n                <button mat-icon-button (click)=\"ipsum.show($event)\">\n                    <mat-icon>more_vert</mat-icon>\n                </button>\n            </span>\n\n            <ngx-overlay #ipsum [overlayContainerClass]=\"overlayContainerClass\" [overlayBackdropClass]=\"overlayBackdropClass\">\n                <div class=\"ngx-menu-content\">\n                    Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla euismod, lacus nec imperdiet pretium, purus nisi hendrerit velit, non laoreet est velit sit amet arcu. Cras eget malesuada tortor. Aliquam vitae libero tellus. Quisque at velit sed arcu feugiat imperdiet ut quis augue. Cras laoreet eleifend tellus varius laoreet. Vestibulum vulputate sagittis sapien, eget euismod metus. Sed ut lacus at risus tristique blandit. Cras at nibh augue. Nam felis felis, facilisis sed fringilla a, porta id magna. Interdum et malesuada fames ac ante ipsum primis in faucibus. Nunc eget velit a enim pharetra volutpat quis eget lacus. Donec imperdiet magna metus, auctor pretium nibh dictum eu. Sed pharetra tristique sodales. Nam dapibus porta imperdiet. Pellentesque elementum tristique\n                    molestie. Sed at dolor et mauris vehicula vestibulum. Maecenas cursus vulputate convallis. Quisque eu imperdiet nunc. Nunc ut feugiat eros. Integer aliquam nibh nec est sollicitudin dictum at et diam. Aliquam neque magna, condimentum non dolor in, faucibus malesuada mauris. Sed dictum massa neque, quis venenatis justo consequat sed. Fusce imperdiet purus nec neque vestibulum, vel placerat enim porta. Duis turpis purus, suscipit vitae scelerisque sed, sollicitudin a sem. Nullam orci risus, suscipit non mollis non, semper sit amet enim. In vel eros justo. Etiam gravida dolor vitae commodo tincidunt. Ut consequat id odio ac scelerisque. Phasellus fringilla et nisi at convallis. Nunc efficitur est in luctus interdum. Curabitur risus turpis, gravida in ex id, elementum convallis\n                    augue. Duis laoreet condimentum purus, sit amet vulputate dolor finibus ac. Proin consectetur ullamcorper orci ut ullamcorper. Vivamus ornare leo vel urna molestie porta. Vivamus malesuada velit eros, non rutrum urna elementum ut. Pellentesque sed lorem tempor, consectetur sem in, condimentum justo. Vivamus eu nunc interdum, mattis turpis nec, accumsan neque. Integer convallis porttitor turpis feugiat placerat. Nulla sodales ex in neque lobortis, vel mollis turpis interdum. Mauris pharetra ex a justo maximus, at semper metus feugiat. Nullam aliquet tortor nec tortor auctor venenatis. Proin id laoreet eros, id sodales mi. Vestibulum mollis orci nec orci posuere dapibus. Integer placerat, nisl id aliquam interdum, diam est vestibulum purus, non venenatis turpis lacus in felis.\n                    Vestibulum pulvinar velit tortor, ut convallis turpis condimentum ut. Nunc auctor hendrerit augue, sed malesuada quam. Etiam varius interdum risus, eget gravida libero convallis sed. Aliquam tempor orci at ex ullamcorper mollis. Fusce imperdiet ut ex in gravida. Curabitur iaculis non diam vel consequat. Praesent a magna posuere, feugiat mauris nec, sollicitudin ligula. Sed faucibus viverra velit eget porttitor. Suspendisse a sem gravida, tincidunt lacus vitae, lobortis ante. Nulla nisl quam, ultrices non nunc eget, commodo luctus metus. Curabitur nulla erat, gravida in nulla vel, commodo vestibulum ligula. Quisque quis lectus vel urna luctus gravida eget id risus.\n                </div>\n            </ngx-overlay>\n        </section>\n      `\n    }),\n    args: {\n        overlayContainerClass: 'customContainerForLorem',\n        overlayBackdropClass: 'myCustomBackdropClass',\n        width: '100vw'\n    }\n}"
                }
            ],
            "projects/story-book/preview.ts": [
                {
                    "name": "preview",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/story-book/preview.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Preview",
                    "defaultValue": "{\n    parameters: {\n        controls: {\n            matchers: {\n                color: /(background|color)$/i,\n                date: /Date$/i\n            }\n        },\n        layout: 'centered'\n    }\n}"
                }
            ]
        },
        "groupedFunctions": {},
        "groupedEnumerations": {},
        "groupedTypeAliases": {
            "projects/story-book/src/layout/layout.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<NgxLayoutComponent>",
                    "file": "projects/story-book/src/layout/layout.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "projects/story-book/src/list-loader/list-loader.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<NgxListLoaderComponent>",
                    "file": "projects/story-book/src/list-loader/list-loader.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "projects/story-book/src/message-box/message-box.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<NgxMessageBoxComponent>",
                    "file": "projects/story-book/src/message-box/message-box.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "projects/story-book/src/search-container/search-container.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<NgxSearchContainerComponent>",
                    "file": "projects/story-book/src/search-container/search-container.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "projects/story-book/src/splitter/splitter.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<NgxSplitterComponent>",
                    "file": "projects/story-book/src/splitter/splitter.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "projects/story-book/src/overlay/overlay.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<NgxOverlayComponent>",
                    "file": "projects/story-book/src/overlay/overlay.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "projects/story-book/src/numeric-stepper/numeric-stepper.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<NgxNumericStepperComponent>",
                    "file": "projects/story-book/src/numeric-stepper/numeric-stepper.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "projects/story-book/src/status/status.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<NgxStatusComponent>",
                    "file": "projects/story-book/src/status/status.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "projects/story-book/src/user-card/user-card.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<NgxUserCardComponent>",
                    "file": "projects/story-book/src/user-card/user-card.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ]
        }
    },
    "routes": [],
    "coverage": {
        "count": 0,
        "status": "low",
        "files": [
            {
                "filePath": "projects/story-book/preview.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "preview",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/story-book/src/layout/layout.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "actionsToolbar",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/story-book/src/layout/layout.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "completeLayout",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/story-book/src/layout/layout.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "infosBoxes",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/story-book/src/layout/layout.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "layoutToolbar",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/story-book/src/layout/layout.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/story-book/src/layout/layout.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "rightPanel",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/story-book/src/list-loader/list-loader.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/story-book/src/list-loader/list-loader.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "standard",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/story-book/src/list-loader/list-loader.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "withLabel",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/story-book/src/list-loader/list-loader.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "withLongLabel",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/story-book/src/message-box/message-box.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "basicWarnHorizontal",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/story-book/src/message-box/message-box.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "complete",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/story-book/src/message-box/message-box.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "customIcon",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/story-book/src/message-box/message-box.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "horizontalLayout",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/story-book/src/message-box/message-box.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "infoVertical",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/story-book/src/message-box/message-box.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/story-book/src/message-box/message-box.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "noActions",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/story-book/src/message-box/message-box.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "noCloseIcon",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/story-book/src/message-box/message-box.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "successWithActions",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/story-book/src/numeric-stepper/numeric-stepper.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "appearance",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/story-book/src/numeric-stepper/numeric-stepper.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "customArrowIcons",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/story-book/src/numeric-stepper/numeric-stepper.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "layout",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/story-book/src/numeric-stepper/numeric-stepper.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/story-book/src/numeric-stepper/numeric-stepper.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "prefixAndSuffix",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/story-book/src/numeric-stepper/numeric-stepper.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "showOnInit",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/story-book/src/numeric-stepper/numeric-stepper.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "standard",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/story-book/src/overlay/overlay.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/story-book/src/overlay/overlay.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "navigationExample",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/story-book/src/overlay/overlay.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "overlayClass",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/story-book/src/overlay/overlay.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "overlayForMobile",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/story-book/src/overlay/overlay.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "overlayWidth",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/story-book/src/overlay/overlay.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ownerElement",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/story-book/src/overlay/overlay.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "standard",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/story-book/src/overlay/overlay.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "textContainerExample",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/story-book/src/search-container/search-container.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "customTooltips",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/story-book/src/search-container/search-container.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/story-book/src/search-container/search-container.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "searchWithLists",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/story-book/src/search-container/search-container.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "standard",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/story-book/src/splitter/splitter.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "combinedSplitters",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/story-book/src/splitter/splitter.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "customizableSplitAreas",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/story-book/src/splitter/splitter.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "disabledSplitter",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/story-book/src/splitter/splitter.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "gutterSizeControl",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/story-book/src/splitter/splitter.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/story-book/src/splitter/splitter.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "standard",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/story-book/src/splitter/splitter.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "verticalSplit",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/story-book/src/status/status.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "complete",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/story-book/src/status/status.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/story-book/src/status/status.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "minimumRequired",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/story-book/src/status/status.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "statusActions",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/story-book/src/status/status.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "statusCustomCssClass",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/story-book/src/status/status.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "statusDuration",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/story-book/src/status/status.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "statusTechnicalText",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/story-book/src/status/status.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "statusText",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/story-book/src/status/status.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "statusType",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/story-book/src/user-card/user-card.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "dynamicBadgeColor",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/story-book/src/user-card/user-card.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/story-book/src/user-card/user-card.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "notExpandedUserCard",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/story-book/src/user-card/user-card.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "standard",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/story-book/src/user-card/user-card.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "userAbbreviationTitle",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/story-book/src/user-card/user-card.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "userWithMissingInfo",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            }
        ]
    }
}
