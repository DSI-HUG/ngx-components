(self.webpackChunk=self.webpackChunk||[]).push([[888],{"./projects/core/src/services/lazy-loader.service.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.d(__webpack_exports__,{U:()=>NgxAbstractLazyModule,e:()=>NgxLazyLoaderService});var tslib__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__("./node_modules/tslib/tslib.es6.mjs"),_angular_core__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./node_modules/@angular/core/fesm2022/core.mjs"),rxjs__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/rxjs/dist/esm5/internal/observable/from.js"),rxjs__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./node_modules/rxjs/dist/esm5/internal/operators/map.js");class NgxAbstractLazyModule{componentType;constructor(componentType){this.componentType=componentType}}let NgxLazyLoaderService=class NgxLazyLoaderService{injector;constructor(injector){this.injector=injector}loadModule$(path,parentInjector){return(0,rxjs__WEBPACK_IMPORTED_MODULE_0__.H)(path).pipe((0,rxjs__WEBPACK_IMPORTED_MODULE_1__.T)((elementModuleOrFactory=>{const injector=(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__["ÉµcreateInjector"])(elementModuleOrFactory,parentInjector??this.injector);return{injector,module:injector.get(elementModuleOrFactory)}})))}static ctorParameters=()=>[{type:_angular_core__WEBPACK_IMPORTED_MODULE_2__.Injector}]};NgxLazyLoaderService=(0,tslib__WEBPACK_IMPORTED_MODULE_3__.Cg)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Injectable)({providedIn:"root"})],NgxLazyLoaderService)},"./projects/core/src/services/media.service.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.d(__webpack_exports__,{Lp:()=>NgxMediaService});var tslib__WEBPACK_IMPORTED_MODULE_5__=__webpack_require__("./node_modules/tslib/tslib.es6.mjs"),_angular_core__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/@angular/core/fesm2022/core.mjs"),rxjs__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./node_modules/rxjs/dist/esm5/internal/BehaviorSubject.js"),rxjs__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./node_modules/rxjs/dist/esm5/internal/operators/map.js"),rxjs__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__("./node_modules/rxjs/dist/esm5/internal/operators/distinctUntilChanged.js"),rxjs__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__("./node_modules/rxjs/dist/esm5/internal/operators/shareReplay.js");const mediaQueryDefinitions=new _angular_core__WEBPACK_IMPORTED_MODULE_0__.InjectionToken("MEDIA_QUERY_DEFINITIONS"),simplifiedMediaQueryDefinitions=[{alias:"xs",mediaQuery:"(max-width: 599px)"},{alias:"sm",mediaQuery:"(min-width: 600px) and (max-width: 959px)"},{alias:"md",mediaQuery:"(min-width: 860px) and (max-width: 1279px)"},{alias:"lg",mediaQuery:"(min-width: 1280px)"}];let NgxMediaService=class NgxMediaService{zone;isHandset$;isMobile$;mediaChanged$=new rxjs__WEBPACK_IMPORTED_MODULE_1__.t("lg");mql={};constructor(zone,mediaDefinitions){this.zone=zone,mediaDefinitions||(mediaDefinitions=simplifiedMediaQueryDefinitions),mediaDefinitions.forEach((mediaDefinition=>{const{alias,mediaQuery}=mediaDefinition;this.mql[alias]=window.matchMedia(mediaQuery),this.mql[alias].addEventListener("change",this.onMqlEvent.bind(this,alias)),this.mql[alias].matches&&(this.mediaChanged$=new rxjs__WEBPACK_IMPORTED_MODULE_1__.t(alias))})),this.isHandset$=this.mediaChanged$.pipe((0,rxjs__WEBPACK_IMPORTED_MODULE_2__.T)((alias=>"xs"===alias)),(0,rxjs__WEBPACK_IMPORTED_MODULE_3__.F)(),(0,rxjs__WEBPACK_IMPORTED_MODULE_4__.t)({bufferSize:1,refCount:!1})),this.isMobile$=this.mediaChanged$.pipe((0,rxjs__WEBPACK_IMPORTED_MODULE_2__.T)((alias=>"xs"===alias||"sm"===alias)),(0,rxjs__WEBPACK_IMPORTED_MODULE_3__.F)(),(0,rxjs__WEBPACK_IMPORTED_MODULE_4__.t)({bufferSize:1,refCount:!1}))}ngOnDestroy(){Object.keys(this.mql).forEach((alias=>{this.mql[alias].removeEventListener("change",this.onMqlEvent),delete this.mql[alias]}))}onMqlEvent(alias,event){this.zone.run((()=>{event.matches&&this.mediaChanged$.next(alias)}))}static ctorParameters=()=>[{type:_angular_core__WEBPACK_IMPORTED_MODULE_0__.NgZone},{type:Array,decorators:[{type:_angular_core__WEBPACK_IMPORTED_MODULE_0__.Optional},{type:_angular_core__WEBPACK_IMPORTED_MODULE_0__.Inject,args:[mediaQueryDefinitions]}]}]};NgxMediaService=(0,tslib__WEBPACK_IMPORTED_MODULE_5__.Cg)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_0__.Injectable)({providedIn:"root"})],NgxMediaService)},"./projects/search-container/src/search-container.component.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.d(__webpack_exports__,{A:()=>NgxSearchContainerComponent,l:()=>NgxSearchInputDirective});var tslib_es6=__webpack_require__("./node_modules/tslib/tslib.es6.mjs");var search_container_componentngResource=__webpack_require__("./projects/search-container/src/search-container.component.scss?ngResource"),search_container_componentngResource_default=__webpack_require__.n(search_container_componentngResource),common=__webpack_require__("./node_modules/@angular/common/fesm2022/common.mjs"),core=__webpack_require__("./node_modules/@angular/core/fesm2022/core.mjs"),rxjs_interop=__webpack_require__("./node_modules/@angular/core/fesm2022/rxjs-interop.mjs"),fesm2022_forms=__webpack_require__("./node_modules/@angular/forms/fesm2022/forms.mjs"),icon=__webpack_require__("./node_modules/@angular/material/fesm2022/icon.mjs"),tooltip=__webpack_require__("./node_modules/@angular/material/fesm2022/tooltip.mjs"),media_service=__webpack_require__("./projects/core/src/services/media.service.ts"),BehaviorSubject=__webpack_require__("./node_modules/rxjs/dist/esm5/internal/BehaviorSubject.js"),switchMap=__webpack_require__("./node_modules/rxjs/dist/esm5/internal/operators/switchMap.js"),first=__webpack_require__("./node_modules/rxjs/dist/esm5/internal/operators/first.js"),tap=__webpack_require__("./node_modules/rxjs/dist/esm5/internal/operators/tap.js"),distinctUntilChanged=__webpack_require__("./node_modules/rxjs/dist/esm5/internal/operators/distinctUntilChanged.js"),shareReplay=__webpack_require__("./node_modules/rxjs/dist/esm5/internal/operators/shareReplay.js");let NgxSearchInputDirective=class NgxSearchInputDirective{ngControl=(0,core.inject)(fesm2022_forms.vO);elementRef=(0,core.inject)(core.ElementRef);constructor(){this.focus()}focus(){this.elementRef.nativeElement.focus()}static ctorParameters=()=>[]};NgxSearchInputDirective=(0,tslib_es6.Cg)([(0,core.Directive)({selector:"[ngx-search-input]",standalone:!0})],NgxSearchInputDirective);let NgxSearchContainerComponent=class NgxSearchContainerComponent{cleared=new core.EventEmitter;clearTooltip="Effacer la recherche";openSearchTooltip="Ouvrir la recherche";closeSearchTooltip="Quitter la recherche";mobileSearch;activeSearch$=new BehaviorSubject.t(!1);searchInputValue$;set searchInput(searchInput){if(!searchInput)throw new Error("You need to add the attribute ngx-search-input to the NgxSearchContainerComponent");if(!searchInput.ngControl)throw new Error("You need to add the attribute ngModel to the NgxSearchContainerComponent");this._searchInput=searchInput}set right(value){this._right=value}get right(){return this._right}mediaService=(0,core.inject)(media_service.Lp);zone=(0,core.inject)(core.NgZone);destroyRef=(0,core.inject)(core.DestroyRef);_searchInput;_right=null;constructor(){this.activeSearch$.pipe((0,switchMap.n)((activeSearch=>this.zone.onStable.pipe((0,first.$)(),(0,tap.M)((()=>{activeSearch||this.reset(),this._searchInput?.focus()}))))),(0,rxjs_interop.pQ)(this.destroyRef)).subscribe()}ngAfterContentInit(){this.searchInputValue$=this._searchInput?.ngControl?.valueChanges?.pipe((0,distinctUntilChanged.F)(),(0,shareReplay.t)({bufferSize:1,refCount:!1}))??void 0}reset(){this._searchInput?.ngControl?.reset(),this.cleared.emit()}static ctorParameters=()=>[];static propDecorators={cleared:[{type:core.Output}],clearTooltip:[{type:core.Input}],openSearchTooltip:[{type:core.Input}],closeSearchTooltip:[{type:core.Input}],mobileSearch:[{type:core.ContentChild,args:["mobileSearch"]}],searchInput:[{type:core.ContentChild,args:[NgxSearchInputDirective]}],right:[{type:core.Input}]}};NgxSearchContainerComponent=(0,tslib_es6.Cg)([(0,core.Component)({selector:"ngx-search-container",template:'@if (mediaService.isHandset$ | async) {\n    <div class="ngx-search-container-mobile mobile" [class.active]="activeSearch$ | async" #mobileSearch>\n        @if (activeSearch$ | async) {\n            <mat-icon class="icon-close-search" [matTooltip]="closeSearchTooltip" (click)="activeSearch$.next(false)">\n                arrow_back\n            </mat-icon>\n            <ng-container *ngTemplateOutlet="searchContainerTpl"></ng-container>\n        } @else {\n            <mat-icon class="icon-open-search" [matTooltip]="openSearchTooltip" (click)="activeSearch$.next(true)">\n                search\n            </mat-icon>\n        }\n    </div>\n} @else {\n    <ng-container *ngTemplateOutlet="searchContainerTpl"></ng-container>\n}\n\n<ng-template #searchContainerTpl>\n    <div class="ngx-search-container">\n        <mat-icon>search</mat-icon>\n        <ng-content></ng-content>\n        @if (searchInputValue$ | async) {\n            <mat-icon class="icon-clear" [matTooltip]="clearTooltip" (click)="reset()">close</mat-icon>\n        }\n        <ng-container *ngTemplateOutlet="right"></ng-container>\n    </div>\n</ng-template>\n',encapsulation:core.ViewEncapsulation.None,changeDetection:core.ChangeDetectionStrategy.OnPush,standalone:!0,imports:[common.AsyncPipe,common.NgTemplateOutlet,icon.An,tooltip.oV],styles:[search_container_componentngResource_default()]})],NgxSearchContainerComponent)},"./projects/status/src/status.service.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.d(__webpack_exports__,{t:()=>NgxStatusService});var tslib__WEBPACK_IMPORTED_MODULE_9__=__webpack_require__("./node_modules/tslib/tslib.es6.mjs"),_angular_common__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./node_modules/@angular/common/fesm2022/common.mjs"),_angular_core__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/@angular/core/fesm2022/core.mjs"),_angular_core_rxjs_interop__WEBPACK_IMPORTED_MODULE_8__=__webpack_require__("./node_modules/@angular/core/fesm2022/rxjs-interop.mjs"),_hug_ngx_core__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./projects/core/src/services/lazy-loader.service.ts"),rxjs__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__("./node_modules/rxjs/dist/esm5/internal/operators/take.js"),rxjs__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__("./node_modules/rxjs/dist/esm5/internal/operators/switchMap.js"),rxjs__WEBPACK_IMPORTED_MODULE_5__=__webpack_require__("./node_modules/rxjs/dist/esm5/internal/observable/timer.js"),rxjs__WEBPACK_IMPORTED_MODULE_6__=__webpack_require__("./node_modules/rxjs/dist/esm5/internal/operators/mergeWith.js"),rxjs__WEBPACK_IMPORTED_MODULE_7__=__webpack_require__("./node_modules/rxjs/dist/esm5/internal/operators/tap.js");let NgxStatusService=class NgxStatusService{document=(0,_angular_core__WEBPACK_IMPORTED_MODULE_0__.inject)(_angular_common__WEBPACK_IMPORTED_MODULE_1__.DOCUMENT);lazyLoaderService=(0,_angular_core__WEBPACK_IMPORTED_MODULE_0__.inject)(_hug_ngx_core__WEBPACK_IMPORTED_MODULE_2__.e);injector=(0,_angular_core__WEBPACK_IMPORTED_MODULE_0__.inject)(_angular_core__WEBPACK_IMPORTED_MODULE_0__.Injector);resolver=(0,_angular_core__WEBPACK_IMPORTED_MODULE_0__.inject)(_angular_core__WEBPACK_IMPORTED_MODULE_0__.ComponentFactoryResolver);destroyRef=(0,_angular_core__WEBPACK_IMPORTED_MODULE_0__.inject)(_angular_core__WEBPACK_IMPORTED_MODULE_0__.DestroyRef);info(text,title="",duration,actions){this.showStatus({type:"info",title,text,duration,actions})}success(text,title="",duration,actions){this.showStatus({type:"success",title,text,duration,actions})}warning(text,title="Attention",technicalText,duration,actions){this.showStatus({type:"warn",title,text,duration,technicalText,actions})}error(text,title="Erreur",technicalText,duration,actions){this.showStatus({type:"danger",title,text,duration,technicalText,actions})}showStatus(status){this.lazyLoaderService.loadModule$(Promise.all([__webpack_require__.e(584),__webpack_require__.e(73)]).then(__webpack_require__.bind(__webpack_require__,"./projects/status/src/status.module.ts")).then((m=>m.NgxStatusModule))).pipe((0,rxjs__WEBPACK_IMPORTED_MODULE_3__.s)(1),(0,rxjs__WEBPACK_IMPORTED_MODULE_4__.n)((moduleInfos=>{const componentRef=this.resolver.resolveComponentFactory(moduleInfos.module.componentType).create(this.injector);componentRef.instance.status=status;const applicationRef=this.injector.get(_angular_core__WEBPACK_IMPORTED_MODULE_0__.ApplicationRef);applicationRef.attachView(componentRef.hostView);const domElement=componentRef.hostView.rootNodes[0];this.document.body.appendChild(domElement),applicationRef.tick();const duration=status.duration||"danger"===status.type&&3e4||8e3;return(0,rxjs__WEBPACK_IMPORTED_MODULE_5__.O)(duration).pipe((0,rxjs__WEBPACK_IMPORTED_MODULE_6__.X)(componentRef.instance.close),(0,rxjs__WEBPACK_IMPORTED_MODULE_7__.M)((()=>{componentRef.destroy(),applicationRef.tick()})))})),(0,_angular_core_rxjs_interop__WEBPACK_IMPORTED_MODULE_8__.pQ)(this.destroyRef)).subscribe()}};NgxStatusService=(0,tslib__WEBPACK_IMPORTED_MODULE_9__.Cg)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_0__.Injectable)({providedIn:"root"})],NgxStatusService)},"./projects/story-book/src/layout/layout.stories.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{__namedExportsOrder:()=>__namedExportsOrder,actionsToolbar:()=>actionsToolbar,completeLayout:()=>completeLayout,default:()=>layout_stories,infosBoxes:()=>infosBoxes,layoutToolbar:()=>layoutToolbar,rightPanel:()=>rightPanel});var fesm2022_forms=__webpack_require__("./node_modules/@angular/forms/fesm2022/forms.mjs"),fesm2022_button=__webpack_require__("./node_modules/@angular/material/fesm2022/button.mjs"),chips=__webpack_require__("./node_modules/@angular/material/fesm2022/chips.mjs"),icon=__webpack_require__("./node_modules/@angular/material/fesm2022/icon.mjs"),tooltip=__webpack_require__("./node_modules/@angular/material/fesm2022/tooltip.mjs"),animations=__webpack_require__("./node_modules/@angular/platform-browser/fesm2022/animations.mjs"),dist=__webpack_require__("./node_modules/@storybook/angular/dist/index.mjs"),search_container_component=__webpack_require__("./projects/search-container/src/search-container.component.ts"),tslib_es6=__webpack_require__("./node_modules/tslib/tslib.es6.mjs");var layout_componentngResource=__webpack_require__("./projects/layout/src/layout.component.scss?ngResource"),layout_componentngResource_default=__webpack_require__.n(layout_componentngResource),coercion=__webpack_require__("./node_modules/@angular/cdk/fesm2022/coercion.mjs"),common=__webpack_require__("./node_modules/@angular/common/fesm2022/common.mjs"),core=__webpack_require__("./node_modules/@angular/core/fesm2022/core.mjs"),sidenav=__webpack_require__("./node_modules/@angular/material/fesm2022/sidenav.mjs"),toolbar=__webpack_require__("./node_modules/@angular/material/fesm2022/toolbar.mjs"),media_service=__webpack_require__("./projects/core/src/services/media.service.ts"),ReplaySubject=__webpack_require__("./node_modules/rxjs/dist/esm5/internal/ReplaySubject.js"),shareReplay=__webpack_require__("./node_modules/rxjs/dist/esm5/internal/operators/shareReplay.js"),switchMap=__webpack_require__("./node_modules/rxjs/dist/esm5/internal/operators/switchMap.js"),take=__webpack_require__("./node_modules/rxjs/dist/esm5/internal/operators/take.js"),mergeWith=__webpack_require__("./node_modules/rxjs/dist/esm5/internal/operators/mergeWith.js"),map=__webpack_require__("./node_modules/rxjs/dist/esm5/internal/operators/map.js");let NgxSidenavService=class NgxSidenavService{openChanged$;modeChanged$;hiddenChanged$;mediaService=(0,core.inject)(media_service.Lp);opened$=new ReplaySubject.m(1);mode$=new ReplaySubject.m(1);hidden$=new ReplaySubject.m(1);toggle$=new ReplaySubject.m(1);constructor(){const alias$=this.mediaService.mediaChanged$.pipe((0,shareReplay.t)({bufferSize:1,refCount:!1})),toggleChanged$=this.toggle$.pipe((0,switchMap.n)((()=>this.openChanged$.pipe((0,take.s)(1),(0,map.T)((opened=>!opened))))),(0,shareReplay.t)({bufferSize:1,refCount:!1}));this.openChanged$=alias$.pipe((0,map.T)((alias=>"lg"===alias||"xl"===alias)),(0,mergeWith.X)(this.opened$,toggleChanged$),(0,shareReplay.t)({bufferSize:1,refCount:!1})),this.modeChanged$=alias$.pipe((0,map.T)((alias=>"xs"===alias?"over":"side")),(0,mergeWith.X)(this.mode$),(0,shareReplay.t)({bufferSize:1,refCount:!1})),this.hiddenChanged$=alias$.pipe((0,map.T)((alias=>"xs"===alias)),(0,mergeWith.X)(this.hidden$),(0,shareReplay.t)({bufferSize:1,refCount:!1}))}open(){this.opened$.next(!0)}close(){this.opened$.next(!1)}toggle(){this.toggle$.next()}hide(){this.hidden$.next(!0)}show(){this.hidden$.next(!1)}mode(value){this.mode$.next(value)}static ctorParameters=()=>[]};NgxSidenavService=(0,tslib_es6.Cg)([(0,core.Injectable)({providedIn:"root"})],NgxSidenavService);let NgxLayoutComponent=class NgxLayoutComponent{toolbarColor="primary";editorToolbarId="editor-toolbar";closeButtonLabel="Fermer";backButtonLabel="Retour";layoutToolbarExternal;layoutPrimaryActionExternal;layoutActionsExternal;layoutInfoBoxesExternal;layoutRightExternal;closeButtonClicked=new core.EventEmitter;backButtonClicked=new core.EventEmitter;sideFilterClosed=new core.EventEmitter;sideFilterOpened=new core.EventEmitter;layoutToolbarContent;layoutPrimaryActionContent;layoutActionsContent;layoutInfoBoxesContent;layoutRightContent;noRight=!1;sideFilter;mediaService=(0,core.inject)(media_service.Lp);sidenavService=(0,core.inject)(NgxSidenavService);get layoutToolbar(){return this.layoutToolbarExternal??this.layoutToolbarContent}get layoutPrimaryAction(){return this.layoutPrimaryActionExternal??this.layoutPrimaryActionContent}get layoutActions(){return this.layoutActionsExternal??this.layoutActionsContent}get layoutInfoBoxes(){return this.layoutInfoBoxesExternal??this.layoutInfoBoxesContent}get layoutRight(){const value=this.layoutRightExternal??this.layoutRightContent;return this.noRight=!value,value}_withSidenav=!1;set withSidenav(value){this._withSidenav=(0,coercion.he)(value)}get withSidenav(){return this._withSidenav}_keepFilterButtonDisplayed=!0;set keepFilterButtonDisplayed(value){this._keepFilterButtonDisplayed=(0,coercion.he)(value)}get keepFilterButtonDisplayed(){return this._keepFilterButtonDisplayed}_withCloseButton=!1;set withCloseButton(value){this._withCloseButton=(0,coercion.he)(value)}get withCloseButton(){return this._withCloseButton}_withBackButton=!1;set withBackButton(value){this._withBackButton=(0,coercion.he)(value)}get withBackButton(){return this._withBackButton}closeSideFilter(){this.sideFilter?.close()}openSideFilter(){this.sideFilter?.open()}static propDecorators={toolbarColor:[{type:core.Input}],editorToolbarId:[{type:core.Input}],closeButtonLabel:[{type:core.Input}],backButtonLabel:[{type:core.Input}],layoutToolbarExternal:[{type:core.Input}],layoutPrimaryActionExternal:[{type:core.Input}],layoutActionsExternal:[{type:core.Input}],layoutInfoBoxesExternal:[{type:core.Input}],layoutRightExternal:[{type:core.Input}],closeButtonClicked:[{type:core.Output}],backButtonClicked:[{type:core.Output}],sideFilterClosed:[{type:core.Output}],sideFilterOpened:[{type:core.Output}],layoutToolbarContent:[{type:core.ContentChild,args:["layoutToolbar"]}],layoutPrimaryActionContent:[{type:core.ContentChild,args:["layoutPrimaryAction"]}],layoutActionsContent:[{type:core.ContentChild,args:["layoutActions"]}],layoutInfoBoxesContent:[{type:core.ContentChild,args:["layoutInfoBoxes"]}],layoutRightContent:[{type:core.ContentChild,args:["layoutRight"]}],noRight:[{type:core.HostBinding,args:["class.no-right"]}],sideFilter:[{type:core.ViewChild,args:["sideFilter"]}],withSidenav:[{type:core.Input}],keepFilterButtonDisplayed:[{type:core.Input}],withCloseButton:[{type:core.Input}],withBackButton:[{type:core.Input}]}};NgxLayoutComponent=(0,tslib_es6.Cg)([(0,core.Component)({selector:"ngx-layout",template:'<ng-container *ngTemplateOutlet="filter"></ng-container>\n\n<ng-template #content>\n    <div class="main-content">\n        @if (\n            layoutPrimaryAction && !((layoutActions || layoutInfoBoxes) && (mediaService.isHandset$ | async) === false)\n        ) {\n            <span class="primary-action-container" [class.bottom]="mediaService.isHandset$ | async">\n                <ng-template [ngTemplateOutlet]="layoutPrimaryAction"></ng-template>\n            </span>\n        }\n        <ng-content></ng-content>\n    </div>\n    @if ((mediaService.isHandset$ | async) && actionsToolbar) {\n        <ng-container *ngTemplateOutlet="actionsToolbar"></ng-container>\n    }\n</ng-template>\n\n<ng-template #actionsToolbar>\n    <mat-toolbar\n        id="actions-toolbar"\n        class="actions"\n        [color]="toolbarColor"\n        [class.bottom]="mediaService.isHandset$ | async">\n        @if (layoutPrimaryAction && (layoutActions || layoutInfoBoxes) && (mediaService.isHandset$ | async) === false) {\n            <span class="primary-action-container">\n                <ng-template [ngTemplateOutlet]="layoutPrimaryAction"></ng-template>\n            </span>\n        }\n        @if (layoutActions) {\n            <ng-template [ngTemplateOutlet]="layoutActions"></ng-template>\n        }\n        @if (layoutInfoBoxes && (mediaService.isHandset$ | async) === false) {\n            <div class="info-boxes-container">\n                <ng-template [ngTemplateOutlet]="layoutInfoBoxes"></ng-template>\n            </div>\n        }\n    </mat-toolbar>\n</ng-template>\n\n<ng-template #filter>\n    @if (layoutToolbar || layoutRight) {\n        <mat-toolbar id="toolbar" [color]="toolbarColor">\n            @if (withSidenav && (mediaService.isHandset$ | async) && (sidenavService.openChanged$ | async) === false) {\n                <button type="button" id="sidenav-button" mat-icon-button (click)="sidenavService.toggle()">\n                    <mat-icon>menu</mat-icon>\n                </button>\n            }\n            @if (withBackButton) {\n                <button\n                    type="button"\n                    id="back-button"\n                    mat-icon-button\n                    (click)="this.backButtonClicked.emit($event)"\n                    [matTooltip]="backButtonLabel">\n                    <mat-icon>arrow_back</mat-icon>\n                </button>\n            }\n            <div id="toolbar-content-container">\n                @if (layoutToolbar) {\n                    <ng-template [ngTemplateOutlet]="layoutToolbar"></ng-template>\n                }\n            </div>\n            @if (sideFilter && (keepFilterButtonDisplayed || (mediaService.isHandset$ | async)) && layoutRight) {\n                <button\n                    type="button"\n                    id="filter-button"\n                    mat-icon-button\n                    (click)="sideFilter.toggle()"\n                    matTooltip="Afficher/Masquer les filtres">\n                    <mat-icon>tune</mat-icon>\n                </button>\n            }\n            @if (withCloseButton) {\n                <button\n                    type="button"\n                    id="close-button"\n                    mat-icon-button\n                    (click)="this.closeButtonClicked.emit($event)"\n                    [matTooltip]="closeButtonLabel">\n                    <mat-icon>close</mat-icon>\n                </button>\n            }\n        </mat-toolbar>\n    }\n\n    @if ((layoutActions || layoutInfoBoxes) && (mediaService.isHandset$ | async) === false) {\n        <ng-container *ngTemplateOutlet="actionsToolbar"></ng-container>\n    }\n    @if (layoutRight) {\n        <mat-drawer-container autosize="true">\n            <mat-drawer-content>\n                <ng-container *ngTemplateOutlet="content"></ng-container>\n            </mat-drawer-content>\n            <mat-drawer\n                id="side-filter"\n                #sideFilter\n                (closed)="sideFilterClosed.emit()"\n                (openedChange)="sideFilterOpened.emit()"\n                class="right"\n                position="end"\n                [attr.role]="(mediaService.isHandset$ | async) ? \'dialog\' : \'navigation\'"\n                [mode]="(mediaService.isHandset$ | async) ? \'over\' : \'side\'"\n                [opened]="(mediaService.isHandset$ | async) === false">\n                <ng-template [ngTemplateOutlet]="layoutRight"></ng-template>\n            </mat-drawer>\n        </mat-drawer-container>\n    } @else {\n        <ng-container *ngTemplateOutlet="content"></ng-container>\n    }\n</ng-template>\n',encapsulation:core.ViewEncapsulation.None,changeDetection:core.ChangeDetectionStrategy.OnPush,standalone:!0,imports:[common.NgTemplateOutlet,common.AsyncPipe,fesm2022_button.iY,icon.An,sidenav.qe,sidenav.$C,sidenav.$l,toolbar.KQ,tooltip.oV],styles:[layout_componentngResource_default()]})],NgxLayoutComponent);var status_service=__webpack_require__("./projects/status/src/status.service.ts");var layout_wrapper_componentngResource=__webpack_require__("./projects/story-book/src/layout/layout-wrapper.component.scss?ngResource"),layout_wrapper_componentngResource_default=__webpack_require__.n(layout_wrapper_componentngResource);let StorybookLayoutWrapperComponent=class StorybookLayoutWrapperComponent{toolbarColor="primary";withBackButton=!0;withCloseButton=!0;search;ngxStatusService=(0,core.inject)(status_service.t);log(msg){this.ngxStatusService.showStatus({title:msg,type:"info",duration:1e3})}static propDecorators={toolbarColor:[{type:core.Input}]}};StorybookLayoutWrapperComponent=(0,tslib_es6.Cg)([(0,core.Component)({selector:"storybook-layout-wrapper",template:'<div class="layout-wrapper">\n    <ngx-layout\n        [toolbarColor]="toolbarColor"\n        [withBackButton]="withBackButton"\n        backButtonLabel="Back button label"\n        [withCloseButton]="withCloseButton"\n        (backButtonClicked)="log(\'Back button clicked\')"\n        (closeButtonClicked)="log(\'Close button clicked\')"\n        (sideFilterOpened)="log(\'Side filter opened\')"\n        (sideFilterClosed)="log(\'Side filter closed\')">\n        <ng-template #layoutToolbar>\n            <span toolbar-title>AccÃ¨s dossier patient</span>\n            <ngx-search-container>\n                <input\n                    type="text"\n                    [(ngModel)]="search"\n                    (ngModelChange)="log(\'Search changed\')"\n                    placeholder="Search"\n                    autocomplete="off"\n                    ngx-search-input />\n            </ngx-search-container>\n\n            <button type="button" mat-icon-button matTooltip="Help" (click)="log(\'Help button clicked\')">\n                <mat-icon>help_outline</mat-icon>\n            </button>\n        </ng-template>\n\n        \x3c!-- Primary action --\x3e\n        <ng-template #layoutPrimaryAction>\n            <button type="button" mat-fab matTooltip="Add" (click)="log(\'Add button clicked\')">\n                <mat-icon>add</mat-icon>\n            </button>\n        </ng-template>\n\n        \x3c!-- Actions panel --\x3e\n        <ng-template #layoutActions>\n            <button type="button" mat-icon-button matTooltip="Refresh" (click)="log(\'Refresh button clicked\')">\n                <mat-icon>refresh</mat-icon>\n            </button>\n\n            <button type="button" mat-icon-button matTooltip="Favorite" (click)="log(\'Favorite button clicked\')">\n                <mat-icon>favorite</mat-icon>\n            </button>\n        </ng-template>\n\n        \x3c!-- Right panel --\x3e\n        <ng-template #layoutRight>\n            <div class="layout-right-container">\n                Layout right\n                <div filters-chip-list>\n                    <mat-chip-listbox class="mat-mdc-chip-set-stacked" aria-label="Color selection">\n                        <mat-chip-option (click)="log(\'Chip 1 clicked\')">1</mat-chip-option>\n                        <mat-chip-option (click)="log(\'Chip 2 clicked\')">2</mat-chip-option>\n                        <mat-chip-option (click)="log(\'Chip 3 clicked\')">3</mat-chip-option>\n                    </mat-chip-listbox>\n                </div>\n            </div>\n        </ng-template>\n\n        \x3c!-- Info boxes panel --\x3e\n        <ng-template #layoutInfoBoxes>\n            <span class="info-box">Info box</span>\n            <span class="info-box primary">Info box primary</span>\n            <span class="info-box accent">Info box accent</span>\n        </ng-template>\n\n        <div class="content-container">Layout content</div>\n    </ngx-layout>\n</div>\n',changeDetection:core.ChangeDetectionStrategy.OnPush,encapsulation:core.ViewEncapsulation.None,standalone:!0,imports:[icon.An,fesm2022_button.iY,fesm2022_button.Sr,chips.uI,chips.gq,tooltip.oV,search_container_component.A,search_container_component.l,NgxLayoutComponent,fesm2022_forms.YN],styles:[layout_wrapper_componentngResource_default()]})],StorybookLayoutWrapperComponent);const layout_stories={title:"Components/Layout",component:NgxLayoutComponent,decorators:[(0,dist.applicationConfig)({providers:[(0,animations.provideAnimations)()]}),(0,dist.moduleMetadata)({imports:[fesm2022_forms.YN],providers:[status_service.t]})],tags:["autodocs"],argTypes:{toolbarColor:{options:["primary","accent"],control:{type:"select"},description:"Sets the color of the toolbar. Choose between primary or accent themes.",table:{defaultValue:{summary:"primary"},type:{summary:"primary | accent"}}}},args:{toolbarColor:"primary"},parameters:{layout:"fullscreen",docs:{description:{component:"The `NgxLayoutComponent` is a flexible layout component for creating application layouts at HUG. It includes options for toolbars, actions, and side panels, making it adaptable for various use cases."}}}},completeLayout={decorators:[(0,dist.moduleMetadata)({imports:[StorybookLayoutWrapperComponent]})],parameters:{docs:{description:{story:"Here you can see everything that can be added to have this complete component. <ul><li>Template <code>layoutToolbar</code><br/><ul><li><code>toolbar-title</code>directive on span to add title</li><li><code>ngx-search-container</code>component for searching</li></ul></li><li>Template <code>layoutPrimaryAction</code></li><li>Template <code>layoutActions</code></li><li>Template <code>layoutRight</code><br/><ul><li><code>filters-chip-list</code>directive on div to contain mat-chip-listbox</li></ul></li><li>Template <code>layoutInfoBoxes</code></li></ul>"}}},render:args=>({props:args,template:'<storybook-layout-wrapper [toolbarColor]="toolbarColor"></storybook-layout-wrapper>'})},layoutToolbar={args:{toolbarColor:"accent"},decorators:[(0,dist.moduleMetadata)({imports:[search_container_component.l,search_container_component.A]})],parameters:{docs:{description:{story:'The <code>layoutToolbar</code> template inside the component adds a toolbar to it.<ul><li>The <code>toolbarColor</code> Input on the component allows you to define the color of the toolbar. Here I have <code>toolbarColor="accent"</code></li><li>The span with directive <code>toolbar-title</code> allows you to add a title to the toolbar</li><li>You can add an <code>ngx-search-container</code> in the toolbar. Its size will fit by default</li></ul>'}}},render:args=>({props:{...args,search:"",log:(msg,event)=>{console.log(msg,event)}},template:'\n            <section>\n                <ngx-layout [toolbarColor]="toolbarColor">\n                    <ng-template #layoutToolbar>\n                        <span toolbar-title>My toolbar-title</span>\n                        <ngx-search-container>\n                            <input type="text" [(ngModel)]="search" (ngModelChange)="log(\'Search changed\', $event)" placeholder="My ngx-search-container" autocomplete="off" ngx-search-input />\n                        </ngx-search-container>\n                    </ng-template>\n                    <div class="content-container">Layout content</div>\n                </ngx-layout>\n            </section>\n          '})},actionsToolbar={decorators:[(0,dist.moduleMetadata)({imports:[fesm2022_button.Sr,fesm2022_button.iY,tooltip.oV,icon.An]})],parameters:{docs:{description:{story:"The actions template inside the component adds buttons on the toolbar. You must have the <code>layoutToolbar</code> template for it to work correctly. <ul><li>The <code>layoutPrimaryAction</code> template allows you to add one primary button on the toolbar. Here my add icon button.</li><li>The <code>layoutActions</code> template allows you to add additional buttons to the toolbar. Here my refresh and my favorite icon button.</li></ul>"}}},render:args=>({props:{...args,log:msg=>{alert(msg)}},template:'\n            <section>\n                <ngx-layout [toolbarColor]="toolbarColor">\n                    <ng-template #layoutToolbar>\n                    </ng-template>\n\n                    \x3c!-- Primary action --\x3e\n                    <ng-template #layoutPrimaryAction>\n                        <button type="button" mat-fab matTooltip="Add" (click)="log(\'Add button clicked\')">\n                            <mat-icon>add</mat-icon>\n                        </button>\n                    </ng-template>\n\n                    \x3c!-- Actions panel --\x3e\n                    <ng-template #layoutActions>\n                        <button type="button" mat-icon-button matTooltip="Refresh" (click)="log(\'Refresh button clicked\')">\n                            <mat-icon>refresh</mat-icon>\n                        </button>\n\n                        <button type="button" mat-icon-button matTooltip="Favorite" (click)="log(\'Favorite button clicked\')">\n                            <mat-icon>favorite</mat-icon>\n                        </button>\n                    </ng-template>\n                    <div class="content-container">Layout content</div>\n                </ngx-layout>\n            </section>\n          '})},rightPanel={decorators:[(0,dist.moduleMetadata)({imports:[chips.uI,chips.gq]})],parameters:{docs:{description:{story:"The <code>layoutRight</code> template inside the component adds a right panel to it.<ul><li>A button to Open/Close the right panel will be automatically added to the toolbar</li><li>>You can add a <code>filters-chip-list</code> directive that can manage your filters</li></ul>"}}},render:args=>({props:{...args},template:'\n            <section class="moreHeight">\n                <ngx-layout [toolbarColor]="toolbarColor">\n                    <ng-template #layoutToolbar>\n                    </ng-template>\n\n                    \x3c!-- Right panel --\x3e\n                    <ng-template #layoutRight>\n                        <div class="layout-right-container">\n                            Layout right\n                            <div filters-chip-list>\n                                <mat-chip-listbox class="mat-mdc-chip-set-stacked" aria-label="Color selection">\n                                    <mat-chip-option>filter 1</mat-chip-option>\n                                    <mat-chip-option>filter 2</mat-chip-option>\n                                    <mat-chip-option>filter 3</mat-chip-option>\n                                    <mat-chip-option>filter 4</mat-chip-option>\n                                    <mat-chip-option>filter 5</mat-chip-option>\n                                </mat-chip-listbox>\n                            </div>\n                        </div>\n                    </ng-template>\n                    <div class="content-container">Layout content</div>\n                </ngx-layout>\n            </section>\n          '})},infosBoxes={parameters:{docs:{description:{story:"The <code>layoutInfoBoxes</code> template inside the component allows you to add informations under the toolbar."}}},render:args=>({props:{...args},template:'\n            <section>\n                <ngx-layout [toolbarColor]="toolbarColor">\n                    <ng-template #layoutToolbar>\n                    </ng-template>\n\n                    \x3c!-- Info boxes panel --\x3e\n                    <ng-template #layoutInfoBoxes>\n                        <span class="info-box">Info box</span>\n                        <span class="info-box primary">Info box primary</span>\n                        <span class="info-box accent">Info box accent</span>\n                    </ng-template>\n\n                    <div class="content-container">Layout content</div>\n                </ngx-layout>\n            </section>\n          '})},__namedExportsOrder=["completeLayout","layoutToolbar","actionsToolbar","rightPanel","infosBoxes"];completeLayout.parameters={...completeLayout.parameters,docs:{...completeLayout.parameters?.docs,source:{originalSource:"{\n  decorators: [moduleMetadata({\n    imports: [StorybookLayoutWrapperComponent]\n  })],\n  parameters: {\n    docs: {\n      description: {\n        story: 'Here you can see everything that can be added to have this complete component. <ul><li>Template <code>layoutToolbar</code><br/><ul><li><code>toolbar-title</code>directive on span to add title</li><li><code>ngx-search-container</code>component for searching</li></ul></li><li>Template <code>layoutPrimaryAction</code></li><li>Template <code>layoutActions</code></li><li>Template <code>layoutRight</code><br/><ul><li><code>filters-chip-list</code>directive on div to contain mat-chip-listbox</li></ul></li><li>Template <code>layoutInfoBoxes</code></li></ul>'\n      }\n    }\n  },\n  render: args => ({\n    props: args,\n    template: '<storybook-layout-wrapper [toolbarColor]=\"toolbarColor\"></storybook-layout-wrapper>'\n  })\n}",...completeLayout.parameters?.docs?.source}}},layoutToolbar.parameters={...layoutToolbar.parameters,docs:{...layoutToolbar.parameters?.docs,source:{originalSource:'{\n  args: {\n    toolbarColor: \'accent\'\n  },\n  decorators: [moduleMetadata({\n    imports: [NgxSearchInputDirective, NgxSearchContainerComponent]\n  })],\n  parameters: {\n    docs: {\n      description: {\n        story: \'The <code>layoutToolbar</code> template inside the component adds a toolbar to it.<ul><li>The <code>toolbarColor</code> Input on the component allows you to define the color of the toolbar. Here I have <code>toolbarColor="accent"</code></li><li>The span with directive <code>toolbar-title</code> allows you to add a title to the toolbar</li><li>You can add an <code>ngx-search-container</code> in the toolbar. Its size will fit by default</li></ul>\'\n      }\n    }\n  },\n  render: args => ({\n    props: {\n      ...args,\n      search: \'\',\n      log: (msg: string, event?: Event): void => {\n        console.log(msg, event);\n      }\n    },\n    template: `\n            <section>\n                <ngx-layout [toolbarColor]="toolbarColor">\n                    <ng-template #layoutToolbar>\n                        <span toolbar-title>My toolbar-title</span>\n                        <ngx-search-container>\n                            <input type="text" [(ngModel)]="search" (ngModelChange)="log(\'Search changed\', $event)" placeholder="My ngx-search-container" autocomplete="off" ngx-search-input />\n                        </ngx-search-container>\n                    </ng-template>\n                    <div class="content-container">Layout content</div>\n                </ngx-layout>\n            </section>\n          `\n  })\n}',...layoutToolbar.parameters?.docs?.source}}},actionsToolbar.parameters={...actionsToolbar.parameters,docs:{...actionsToolbar.parameters?.docs,source:{originalSource:'{\n  decorators: [moduleMetadata({\n    imports: [MatFabButton, MatIconButton, MatTooltip, MatIcon]\n  })],\n  parameters: {\n    docs: {\n      description: {\n        story: \'The actions template inside the component adds buttons on the toolbar. You must have the <code>layoutToolbar</code> template for it to work correctly. <ul><li>The <code>layoutPrimaryAction</code> template allows you to add one primary button on the toolbar. Here my add icon button.</li><li>The <code>layoutActions</code> template allows you to add additional buttons to the toolbar. Here my refresh and my favorite icon button.</li></ul>\'\n      }\n    }\n  },\n  render: args => ({\n    props: {\n      ...args,\n      log: (msg: string): void => {\n        alert(msg);\n      }\n    },\n    template: `\n            <section>\n                <ngx-layout [toolbarColor]="toolbarColor">\n                    <ng-template #layoutToolbar>\n                    </ng-template>\n\n                    \x3c!-- Primary action --\x3e\n                    <ng-template #layoutPrimaryAction>\n                        <button type="button" mat-fab matTooltip="Add" (click)="log(\'Add button clicked\')">\n                            <mat-icon>add</mat-icon>\n                        </button>\n                    </ng-template>\n\n                    \x3c!-- Actions panel --\x3e\n                    <ng-template #layoutActions>\n                        <button type="button" mat-icon-button matTooltip="Refresh" (click)="log(\'Refresh button clicked\')">\n                            <mat-icon>refresh</mat-icon>\n                        </button>\n\n                        <button type="button" mat-icon-button matTooltip="Favorite" (click)="log(\'Favorite button clicked\')">\n                            <mat-icon>favorite</mat-icon>\n                        </button>\n                    </ng-template>\n                    <div class="content-container">Layout content</div>\n                </ngx-layout>\n            </section>\n          `\n  })\n}',...actionsToolbar.parameters?.docs?.source}}},rightPanel.parameters={...rightPanel.parameters,docs:{...rightPanel.parameters?.docs,source:{originalSource:'{\n  decorators: [moduleMetadata({\n    imports: [MatChipListbox, MatChipOption]\n  })],\n  parameters: {\n    docs: {\n      description: {\n        story: \'The <code>layoutRight</code> template inside the component adds a right panel to it.<ul><li>A button to Open/Close the right panel will be automatically added to the toolbar</li><li>>You can add a <code>filters-chip-list</code> directive that can manage your filters</li></ul>\'\n      }\n    }\n  },\n  render: args => ({\n    props: {\n      ...args\n    },\n    template: `\n            <section class="moreHeight">\n                <ngx-layout [toolbarColor]="toolbarColor">\n                    <ng-template #layoutToolbar>\n                    </ng-template>\n\n                    \x3c!-- Right panel --\x3e\n                    <ng-template #layoutRight>\n                        <div class="layout-right-container">\n                            Layout right\n                            <div filters-chip-list>\n                                <mat-chip-listbox class="mat-mdc-chip-set-stacked" aria-label="Color selection">\n                                    <mat-chip-option>filter 1</mat-chip-option>\n                                    <mat-chip-option>filter 2</mat-chip-option>\n                                    <mat-chip-option>filter 3</mat-chip-option>\n                                    <mat-chip-option>filter 4</mat-chip-option>\n                                    <mat-chip-option>filter 5</mat-chip-option>\n                                </mat-chip-listbox>\n                            </div>\n                        </div>\n                    </ng-template>\n                    <div class="content-container">Layout content</div>\n                </ngx-layout>\n            </section>\n          `\n  })\n}',...rightPanel.parameters?.docs?.source}}},infosBoxes.parameters={...infosBoxes.parameters,docs:{...infosBoxes.parameters?.docs,source:{originalSource:'{\n  parameters: {\n    docs: {\n      description: {\n        story: \'The <code>layoutInfoBoxes</code> template inside the component allows you to add informations under the toolbar.\'\n      }\n    }\n  },\n  render: args => ({\n    props: {\n      ...args\n    },\n    template: `\n            <section>\n                <ngx-layout [toolbarColor]="toolbarColor">\n                    <ng-template #layoutToolbar>\n                    </ng-template>\n\n                    \x3c!-- Info boxes panel --\x3e\n                    <ng-template #layoutInfoBoxes>\n                        <span class="info-box">Info box</span>\n                        <span class="info-box primary">Info box primary</span>\n                        <span class="info-box accent">Info box accent</span>\n                    </ng-template>\n\n                    <div class="content-container">Layout content</div>\n                </ngx-layout>\n            </section>\n          `\n  })\n}',...infosBoxes.parameters?.docs?.source}}}},"./projects/layout/src/layout.component.scss?ngResource":(module,__unused_webpack_exports,__webpack_require__)=>{var ___CSS_LOADER_API_NO_SOURCEMAP_IMPORT___=__webpack_require__("./node_modules/css-loader/dist/runtime/noSourceMaps.js"),___CSS_LOADER_EXPORT___=__webpack_require__("./node_modules/css-loader/dist/runtime/api.js")(___CSS_LOADER_API_NO_SOURCEMAP_IMPORT___);___CSS_LOADER_EXPORT___.push([module.id,'ngx-layout {\n  display: flex;\n  flex-direction: column;\n  position: absolute;\n  top: 0;\n  right: 0;\n  bottom: 0;\n  left: 0;\n}\nngx-layout.no-left.no-right .main-content {\n  padding: 0;\n}\nngx-layout mat-sidenav-container {\n  position: absolute;\n  top: 0;\n  bottom: 0;\n  left: 0;\n  right: 0;\n}\nngx-layout mat-drawer-content,\nngx-layout mat-sidenav-content {\n  display: flex !important;\n  flex-direction: column;\n}\nngx-layout mat-sidenav {\n  width: 200px;\n}\nngx-layout mat-drawer {\n  width: 220px;\n}\nngx-layout mat-drawer.right {\n  padding: 0.3rem;\n}\nngx-layout mat-drawer.right [filters-title] {\n  font-size: 1.2rem;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  flex: 1 1 auto;\n  font-weight: bold;\n  padding: 0.6rem;\n  margin-bottom: 0.3rem;\n}\nngx-layout mat-drawer.right [filters-subtitle] {\n  font-size: 1rem;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  flex: 1 1 auto;\n  font-weight: 600;\n  padding: 0.4rem 0.6rem;\n  margin-bottom: 0.3rem;\n  margin-top: 0.3rem;\n}\nngx-layout mat-drawer.right [icons-container] {\n  display: flex;\n  align-items: center;\n}\nngx-layout mat-drawer.right [filters-icon] {\n  cursor: pointer;\n  transition: color 0.3s ease-in-out;\n}\nngx-layout mat-drawer.right [filters-chip-list] mat-chip-listbox {\n  margin: 0;\n  max-height: 20vh;\n  overflow-y: auto;\n}\nngx-layout mat-drawer.right [filters-chip-list] .mat-mdc-chip {\n  position: relative;\n  padding: 0.5rem;\n  margin: 0.1rem;\n  font-size: 0.75rem;\n  transition: 0.3s ease-in-out;\n}\nngx-layout mat-drawer.right [filters-chip-list] .mat-mdc-chip:not([disabled]) {\n  cursor: pointer;\n}\nngx-layout mat-drawer.right [filters-chip-list] .mat-mdc-chip:not([disabled]):hover:before {\n  font-family: "Material Icons";\n  content: "close";\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  position: absolute;\n  left: 0;\n  right: 0;\n  top: 0;\n  bottom: 0;\n  font-weight: bold;\n  font-size: 1.2rem;\n  cursor: pointer;\n  transition: 0.3s ease-in-out;\n}\nngx-layout mat-drawer.right [filters-toggle-group] {\n  display: flex;\n}\nngx-layout mat-drawer.right [filters-toggle-group] .mat-button-toggle {\n  transition: 0.3s ease-in-out;\n}\nngx-layout mat-drawer.right [filters-toggle-group] .mat-button-toggle mat-icon {\n  margin-right: 1rem;\n}\nngx-layout mat-drawer.right [filters-toggle-group] .mat-button-toggle .mat-button-toggle-label-content {\n  text-align: start;\n}\nngx-layout mat-drawer.right [filters-toggle-group] .mat-button-toggle .mat-button-toggle-focus-overlay {\n  height: 100%;\n}\nngx-layout mat-drawer.right mat-form-field {\n  width: 100%;\n}\nngx-layout mat-drawer.right .mat-mdc-form-field-infix {\n  width: inherit;\n}\nngx-layout mat-drawer.right.mat-drawer-side {\n  box-shadow: -3px 0 5px -1px rgba(0, 0, 0, 0.2);\n  z-index: 10;\n}\nngx-layout mat-drawer-container {\n  flex: 1;\n}\nngx-layout .mat-toolbar:not(.actions) {\n  display: flex;\n  box-shadow: 0 3px 5px -1px rgba(0, 0, 0, 0.2), 0 6px 10px 0 rgba(0, 0, 0, 0.14), 0 1px 18px 0 rgba(0, 0, 0, 0.12);\n  z-index: 10;\n}\nngx-layout .mat-toolbar:not(.actions) #toolbar-content-container {\n  display: flex;\n  flex-grow: 1;\n  overflow: hidden;\n}\nngx-layout .mat-toolbar:not(.actions) [toolbar-title] {\n  overflow: hidden;\n  text-overflow: ellipsis;\n}\nngx-layout .mat-toolbar:not(.actions) > div {\n  display: flex;\n  align-items: center;\n}\nngx-layout .mat-toolbar .mat-mdc-icon-button {\n  height: 40px;\n  line-height: 40px;\n  width: 40px;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  padding: 0;\n}\nngx-layout .mat-toolbar#actions-toolbar {\n  flex: 0 0 auto;\n  height: 40px;\n  font-size: inherit;\n  padding-right: 0;\n}\nngx-layout .mat-toolbar#actions-toolbar .info-boxes-container {\n  display: flex;\n  flex: 1 1 auto;\n  justify-content: flex-end;\n}\nngx-layout .mat-toolbar#actions-toolbar .info-boxes-container .info-box {\n  display: flex;\n  flex-grow: 0;\n  line-height: 40px;\n  padding-left: 2rem;\n  padding-right: 2rem;\n  box-shadow: -3px 0 5px -1px rgba(0, 0, 0, 0.2);\n}\nngx-layout .mat-toolbar#actions-toolbar.bottom#actions-toolbar {\n  display: flex;\n  width: 100%;\n  justify-content: space-around;\n}\nngx-layout .mat-toolbar#actions-toolbar .primary-action-container {\n  z-index: 20;\n}\nngx-layout .mat-toolbar#actions-toolbar .primary-action-container button {\n  background-color: #009688;\n}\nngx-layout .main-content {\n  position: relative;\n  display: flex;\n  flex: 1 1 auto;\n  overflow: hidden;\n}\nngx-layout .main-content .primary-action-container {\n  position: absolute;\n  z-index: 20;\n  opacity: 0.8;\n  transition: 0.3s ease-in-out;\n}\nngx-layout .main-content .primary-action-container:hover {\n  opacity: 1;\n}\nngx-layout .main-content .primary-action-container.bottom {\n  right: 1rem;\n  bottom: 1rem;\n}\nngx-layout .main-content .primary-action-container:not(.bottom) {\n  top: 1rem;\n  left: 1rem;\n}\nngx-layout ::-webkit-scrollbar {\n  width: 12px;\n  height: 12px;\n}\nngx-layout ::-webkit-scrollbar-thumb {\n  -webkit-transition: 0.3s ease-in-out;\n  transition: 0.3s ease-in-out;\n  border-radius: 6px;\n}',""]),module.exports=___CSS_LOADER_EXPORT___.toString()},"./projects/search-container/src/search-container.component.scss?ngResource":(module,__unused_webpack_exports,__webpack_require__)=>{var ___CSS_LOADER_API_NO_SOURCEMAP_IMPORT___=__webpack_require__("./node_modules/css-loader/dist/runtime/noSourceMaps.js"),___CSS_LOADER_EXPORT___=__webpack_require__("./node_modules/css-loader/dist/runtime/api.js")(___CSS_LOADER_API_NO_SOURCEMAP_IMPORT___);___CSS_LOADER_EXPORT___.push([module.id,"ngx-search-container {\n  flex: 1 1 auto;\n  display: flex;\n  padding-left: 0.5rem;\n}\nngx-search-container .ngx-search-container {\n  width: 100%;\n  transition: 0.3s ease-in-out;\n  border-radius: 4px;\n  height: 40px;\n  display: flex;\n}\nngx-search-container .ngx-search-container.mobile {\n  justify-self: flex-end;\n}\nngx-search-container .ngx-search-container:not(.mobile) {\n  min-width: 35vw;\n  max-width: 800px;\n}\nngx-search-container .ngx-search-container .mat-icon {\n  padding: 0.5rem;\n}\nngx-search-container .ngx-search-container .icon-clear {\n  cursor: pointer;\n}\nngx-search-container .ngx-search-container input {\n  width: 100%;\n  background: none;\n  border: none;\n  outline: none;\n  font-size: 1.2rem;\n}\nngx-search-container .ngx-search-container input:focus {\n  outline: none;\n}\nngx-search-container .ngx-search-container-mobile {\n  width: 100%;\n  display: flex;\n  justify-content: flex-end;\n  height: 40px;\n}\nngx-search-container .ngx-search-container-mobile.active {\n  display: flex;\n  align-items: center;\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100vw;\n  height: 56px;\n  z-index: 10;\n}\nngx-search-container .ngx-search-container-mobile .mat-icon {\n  padding: 0.5rem;\n}\nngx-search-container .ngx-search-container-mobile .icon-close-search,\nngx-search-container .ngx-search-container-mobile .icon-open-search {\n  cursor: pointer;\n}",""]),module.exports=___CSS_LOADER_EXPORT___.toString()},"./projects/story-book/src/layout/layout-wrapper.component.scss?ngResource":(module,__unused_webpack_exports,__webpack_require__)=>{var ___CSS_LOADER_API_NO_SOURCEMAP_IMPORT___=__webpack_require__("./node_modules/css-loader/dist/runtime/noSourceMaps.js"),___CSS_LOADER_EXPORT___=__webpack_require__("./node_modules/css-loader/dist/runtime/api.js")(___CSS_LOADER_API_NO_SOURCEMAP_IMPORT___);___CSS_LOADER_EXPORT___.push([module.id,".layout-wrapper {\n  height: 300px;\n  position: relative;\n}",""]),module.exports=___CSS_LOADER_EXPORT___.toString()}}]);