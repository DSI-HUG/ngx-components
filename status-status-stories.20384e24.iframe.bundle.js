"use strict";(self.webpackChunkngx_components_workspace=self.webpackChunkngx_components_workspace||[]).push([[288],{"./projects/status/src/status.service.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{t:()=>NgxStatusService});var tslib__WEBPACK_IMPORTED_MODULE_9__=__webpack_require__("./node_modules/tslib/tslib.es6.mjs"),_angular_common__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./node_modules/@angular/common/fesm2022/common.mjs"),_angular_core__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/@angular/core/fesm2022/core.mjs"),_angular_core_rxjs_interop__WEBPACK_IMPORTED_MODULE_8__=__webpack_require__("./node_modules/@angular/core/fesm2022/rxjs-interop.mjs"),rxjs__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./node_modules/rxjs/dist/esm5/internal/observable/from.js"),rxjs__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__("./node_modules/rxjs/dist/esm5/internal/operators/take.js"),rxjs__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__("./node_modules/rxjs/dist/esm5/internal/operators/switchMap.js"),rxjs__WEBPACK_IMPORTED_MODULE_5__=__webpack_require__("./node_modules/rxjs/dist/esm5/internal/observable/timer.js"),rxjs__WEBPACK_IMPORTED_MODULE_6__=__webpack_require__("./node_modules/rxjs/dist/esm5/internal/operators/mergeWith.js"),rxjs__WEBPACK_IMPORTED_MODULE_7__=__webpack_require__("./node_modules/rxjs/dist/esm5/internal/operators/tap.js");let NgxStatusService=class NgxStatusService{document=(0,_angular_core__WEBPACK_IMPORTED_MODULE_0__.inject)(_angular_common__WEBPACK_IMPORTED_MODULE_1__.DOCUMENT);injector=(0,_angular_core__WEBPACK_IMPORTED_MODULE_0__.inject)(_angular_core__WEBPACK_IMPORTED_MODULE_0__.Injector);destroyRef=(0,_angular_core__WEBPACK_IMPORTED_MODULE_0__.inject)(_angular_core__WEBPACK_IMPORTED_MODULE_0__.DestroyRef);info(text,title="",duration,actions){const{title:mainTitle,subtitle=""}="string"==typeof title?{title}:title;this.showStatus({type:"info",title:mainTitle,subtitle,text,duration,actions})}success(text,title="",duration,actions){const{title:mainTitle,subtitle=""}="string"==typeof title?{title}:title;this.showStatus({type:"success",title:mainTitle,subtitle,text,duration,actions})}warning(text,title="Attention",technicalText,duration,actions){const{title:mainTitle,subtitle=""}="string"==typeof title?{title}:title;this.showStatus({type:"warn",title:mainTitle,subtitle,text,duration,technicalText,actions})}error(text,title="Erreur",technicalText,duration,actions){const{title:mainTitle,subtitle=""}="string"==typeof title?{title}:title;this.showStatus({type:"danger",title:mainTitle,subtitle,text,duration,technicalText,actions})}showStatus(status){(0,rxjs__WEBPACK_IMPORTED_MODULE_2__.H)(__webpack_require__.e(853).then(__webpack_require__.bind(__webpack_require__,"./projects/status/src/status.component.ts"))).pipe((0,rxjs__WEBPACK_IMPORTED_MODULE_3__.s)(1),(0,rxjs__WEBPACK_IMPORTED_MODULE_4__.n)((component=>{const applicationRef=this.injector.get(_angular_core__WEBPACK_IMPORTED_MODULE_0__.ApplicationRef),rootViewContainerRef=applicationRef.components[0]?.injector.get(_angular_core__WEBPACK_IMPORTED_MODULE_0__.ViewContainerRef),componentRef=rootViewContainerRef?.createComponent(component.NgxStatusComponent);if(componentRef){componentRef.instance.status=status;const domElement=(componentRef?.hostView).rootNodes[0];this.document.body.appendChild(domElement)}applicationRef.tick();const duration=status.duration||"danger"===status.type&&3e4||8e3;return(0,rxjs__WEBPACK_IMPORTED_MODULE_5__.O)(duration).pipe((0,rxjs__WEBPACK_IMPORTED_MODULE_6__.X)(componentRef?.instance.close??new _angular_core__WEBPACK_IMPORTED_MODULE_0__.EventEmitter),(0,rxjs__WEBPACK_IMPORTED_MODULE_7__.M)((()=>{componentRef?.destroy(),applicationRef.tick()})))})),(0,_angular_core_rxjs_interop__WEBPACK_IMPORTED_MODULE_8__.pQ)(this.destroyRef)).subscribe()}};NgxStatusService=(0,tslib__WEBPACK_IMPORTED_MODULE_9__.Cg)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_0__.Injectable)({providedIn:"root"})],NgxStatusService)},"./node_modules/rxjs/dist/esm5/internal/operators/mergeWith.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{X:()=>mergeWith});var tslib_es6=__webpack_require__("./node_modules/tslib/tslib.es6.mjs"),lift=__webpack_require__("./node_modules/rxjs/dist/esm5/internal/util/lift.js"),argsOrArgArray=__webpack_require__("./node_modules/rxjs/dist/esm5/internal/util/argsOrArgArray.js"),mergeAll=__webpack_require__("./node_modules/rxjs/dist/esm5/internal/operators/mergeAll.js"),util_args=__webpack_require__("./node_modules/rxjs/dist/esm5/internal/util/args.js"),from=__webpack_require__("./node_modules/rxjs/dist/esm5/internal/observable/from.js");function merge(){for(var args=[],_i=0;_i<arguments.length;_i++)args[_i]=arguments[_i];var scheduler=(0,util_args.lI)(args),concurrent=(0,util_args.R0)(args,1/0);return args=(0,argsOrArgArray.K)(args),(0,lift.N)((function(source,subscriber){(0,mergeAll.U)(concurrent)((0,from.H)((0,tslib_es6.fX)([source],(0,tslib_es6.zs)(args)),scheduler)).subscribe(subscriber)}))}function mergeWith(){for(var otherSources=[],_i=0;_i<arguments.length;_i++)otherSources[_i]=arguments[_i];return merge.apply(void 0,(0,tslib_es6.fX)([],(0,tslib_es6.zs)(otherSources)))}},"./node_modules/rxjs/dist/esm5/internal/util/argsOrArgArray.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{K:()=>argsOrArgArray});var isArray=Array.isArray;function argsOrArgArray(args){return 1===args.length&&isArray(args[0])?args[0]:args}},"./projects/story-book/src/status/status.stories.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{__namedExportsOrder:()=>__namedExportsOrder,complete:()=>complete,default:()=>__WEBPACK_DEFAULT_EXPORT__,minimumRequired:()=>minimumRequired,statusActions:()=>statusActions,statusCustomCssClass:()=>statusCustomCssClass,statusDuration:()=>statusDuration,statusTechnicalText:()=>statusTechnicalText,statusText:()=>statusText,statusType:()=>statusType});var _angular_material_button_toggle__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__("./node_modules/@angular/material/fesm2022/button-toggle.mjs"),_storybook_angular__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/@storybook/angular/dist/index.mjs"),_snackbar_src_snackbar_component__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./projects/snackbar/src/snackbar.component.ts"),_status_src_status_component__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./projects/status/src/status.component.ts"),_status_src_status_service__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__("./projects/status/src/status.service.ts");const __WEBPACK_DEFAULT_EXPORT__={title:"Components/Status",component:_status_src_status_component__WEBPACK_IMPORTED_MODULE_1__.NgxStatusComponent,decorators:[(0,_storybook_angular__WEBPACK_IMPORTED_MODULE_0__.moduleMetadata)({imports:[_snackbar_src_snackbar_component__WEBPACK_IMPORTED_MODULE_2__.Q],providers:[_status_src_status_service__WEBPACK_IMPORTED_MODULE_3__.t]})],tags:["autodocs"],argTypes:{status:{description:"The object containing the status details to be displayed.",control:{type:"object"},table:{type:{summary:"NgxStatus"},defaultValue:{summary:"undefined"}}}},args:{},parameters:{docs:{description:{component:"The `NgxStatusComponent` displays informational messages in a popup, leveraging the `NgxSnackbarComponent`. It supports various types of notifications, custom actions, and detailed technical information."}}}},complete={parameters:{docs:{description:{story:"This example showcases a `NgxStatusComponent` with all available features, including title, type, text, date, duration, custom CSS class, technical text, and multiple actions."}}},render:args=>({props:{...args},template:'\n        <section class="status">\n          <ngx-status [status]="status"></ngx-status>\n        </section>\n      '}),args:{status:{title:"Sample Status Title",subtitle:"A big subtitle to add some more context to this small toast",type:"info",text:"This is a sample status message.",date:new Date,duration:5e3,className:"my-custom-css-class-2",technicalText:"Technical details about the status.",actions:[{label:"Action 1",callback:()=>console.log("Action 1 triggered.")},{label:"Action 2",callback:()=>console.log("Action 2 triggered.")}]}}},minimumRequired={parameters:{docs:{description:{story:"This example demonstrates the `NgxStatusComponent` with only the required fields: `title` and `type`. Additional fields are optional."}}},render:args=>({props:{...args},template:'\n        <section class="status">\n          <ngx-status [status]="status"></ngx-status>\n        </section>\n      '}),args:{status:{title:"Sample Status Title",type:"info"}}},statusText={parameters:{docs:{description:{story:"This example demonstrates how to use the `text` property to display additional information in the status component."}}},render:args=>({props:{...args},template:'\n        <section class="status">\n          <ngx-status [status]="status"></ngx-status>\n        </section>\n      '}),args:{status:{title:"Sample Status Title",type:"info",text:"Detailed message providing more context about the status."}}},statusType={decorators:[(0,_storybook_angular__WEBPACK_IMPORTED_MODULE_0__.moduleMetadata)({imports:[_angular_material_button_toggle__WEBPACK_IMPORTED_MODULE_4__.ec,_angular_material_button_toggle__WEBPACK_IMPORTED_MODULE_4__.pc]})],parameters:{docs:{description:{story:"This example illustrates the different `type` values that the `NgxStatusComponent` can have: `primary`, `info`, `success`, `warn`, and `danger`. Use the buttons to switch between types."}}},render:args=>({props:{...args,typeChanged(type){this.status={title:"Sample Status Title",type,text:"Sample text for the status message."}}},template:'\n        <section class="status">\n            <ngx-status [status]="status"></ngx-status>\n            <br />\n            <div class="matButtonContainer">\n                <mat-button-toggle-group name="type" (change)="typeChanged($event.value)" [value]="status.type">\n                    <mat-button-toggle value="primary">primary</mat-button-toggle>\n                    <mat-button-toggle value="info">info</mat-button-toggle>\n                    <mat-button-toggle value="success">success</mat-button-toggle>\n                    <mat-button-toggle value="warn">warn</mat-button-toggle>\n                    <mat-button-toggle value="danger">danger</mat-button-toggle>\n                </mat-button-toggle-group>\n            </div>\n        </section>\n      '}),args:{status:{title:"Sample Status Title",type:"success",text:"Sample text for the status message."}}},statusTechnicalText={parameters:{docs:{description:{story:"This example shows how to include `technicalText` and `date` in the `NgxStatusComponent`. An info icon will appear, and clicking it will show the technical details in a dialog."}}},render:args=>({props:{...args},template:'\n        <section class="status">\n            <ngx-status [status]="status"></ngx-status>\n        </section>\n      '}),args:{status:{title:"Error Status",type:"danger",date:new Date,text:"This is an error message.",technicalText:"Detailed technical information about the error."}}},statusActions={parameters:{docs:{description:{story:"This example demonstrates how to add actions to the `NgxStatusComponent`. Each action can be triggered with a callback."}}},render:args=>({props:{...args},template:'\n        <section class="status">\n          <ngx-status [status]="status"></ngx-status>\n        </section>\n      '}),args:{status:{title:"Sample Status Title",type:"info",text:"Message with multiple actions.",actions:[{label:"Action 1",callback:()=>alert("Action 1 executed.")},{label:"Action 2",callback:()=>alert("Action 2 executed.")}]}}},statusDuration={parameters:{docs:{description:{story:"This example demonstrates setting a custom `duration` for the `NgxStatusComponent`. By default, the duration is 30 seconds for danger types and 8 seconds for other types."}}},render:args=>({props:{...args},template:'\n        <section class="status">\n            <ngx-status [status]="status"></ngx-status>\n        </section>\n      '}),args:{status:{title:"Sample Status Title",type:"info",text:"Message with custom duration.",duration:3e3}}},statusCustomCssClass={parameters:{docs:{description:{story:"This example shows how to apply custom CSS styles to the `NgxStatusComponent` using the `className` property."}}},render:args=>({props:{...args},template:'\n        <section class="status">\n            <ngx-status [status]="status"></ngx-status>\n        </section>\n      '}),args:{status:{title:"Sample Status Title",type:"info",text:"Message with custom CSS class.",className:"my-custom-css-class"}}},__namedExportsOrder=["complete","minimumRequired","statusText","statusType","statusTechnicalText","statusActions","statusDuration","statusCustomCssClass"];complete.parameters={...complete.parameters,docs:{...complete.parameters?.docs,source:{originalSource:"{\n  parameters: {\n    docs: {\n      description: {\n        story: 'This example showcases a `NgxStatusComponent` with all available features, including title, type, text, date, duration, custom CSS class, technical text, and multiple actions.'\n      }\n    }\n  },\n  render: args => ({\n    props: {\n      ...args\n    },\n    template: `\n        <section class=\"status\">\n          <ngx-status [status]=\"status\"></ngx-status>\n        </section>\n      `\n  }),\n  args: {\n    status: {\n      title: 'Sample Status Title',\n      subtitle: 'A big subtitle to add some more context to this small toast',\n      type: 'info',\n      text: 'This is a sample status message.',\n      date: new Date(),\n      duration: 5000,\n      className: 'my-custom-css-class-2',\n      technicalText: 'Technical details about the status.',\n      actions: [{\n        label: 'Action 1',\n        callback: (): void => console.log('Action 1 triggered.')\n      }, {\n        label: 'Action 2',\n        callback: (): void => console.log('Action 2 triggered.')\n      }]\n    }\n  }\n}",...complete.parameters?.docs?.source}}},minimumRequired.parameters={...minimumRequired.parameters,docs:{...minimumRequired.parameters?.docs,source:{originalSource:"{\n  parameters: {\n    docs: {\n      description: {\n        story: 'This example demonstrates the `NgxStatusComponent` with only the required fields: `title` and `type`. Additional fields are optional.'\n      }\n    }\n  },\n  render: args => ({\n    props: {\n      ...args\n    },\n    template: `\n        <section class=\"status\">\n          <ngx-status [status]=\"status\"></ngx-status>\n        </section>\n      `\n  }),\n  args: {\n    status: {\n      title: 'Sample Status Title',\n      type: 'info'\n    }\n  }\n}",...minimumRequired.parameters?.docs?.source}}},statusText.parameters={...statusText.parameters,docs:{...statusText.parameters?.docs,source:{originalSource:"{\n  parameters: {\n    docs: {\n      description: {\n        story: 'This example demonstrates how to use the `text` property to display additional information in the status component.'\n      }\n    }\n  },\n  render: args => ({\n    props: {\n      ...args\n    },\n    template: `\n        <section class=\"status\">\n          <ngx-status [status]=\"status\"></ngx-status>\n        </section>\n      `\n  }),\n  args: {\n    status: {\n      title: 'Sample Status Title',\n      type: 'info',\n      text: 'Detailed message providing more context about the status.'\n    }\n  }\n}",...statusText.parameters?.docs?.source}}},statusType.parameters={...statusType.parameters,docs:{...statusType.parameters?.docs,source:{originalSource:'{\n  decorators: [moduleMetadata({\n    imports: [MatButtonToggleGroup, MatButtonToggle]\n  })],\n  parameters: {\n    docs: {\n      description: {\n        story: \'This example illustrates the different `type` values that the `NgxStatusComponent` can have: `primary`, `info`, `success`, `warn`, and `danger`. Use the buttons to switch between types.\'\n      }\n    }\n  },\n  render: args => ({\n    props: {\n      ...args,\n      typeChanged(type: string): void {\n        this[\'status\'] = {\n          title: \'Sample Status Title\',\n          type: type,\n          text: \'Sample text for the status message.\'\n        };\n      }\n    },\n    template: `\n        <section class="status">\n            <ngx-status [status]="status"></ngx-status>\n            <br />\n            <div class="matButtonContainer">\n                <mat-button-toggle-group name="type" (change)="typeChanged($event.value)" [value]="status.type">\n                    <mat-button-toggle value="primary">primary</mat-button-toggle>\n                    <mat-button-toggle value="info">info</mat-button-toggle>\n                    <mat-button-toggle value="success">success</mat-button-toggle>\n                    <mat-button-toggle value="warn">warn</mat-button-toggle>\n                    <mat-button-toggle value="danger">danger</mat-button-toggle>\n                </mat-button-toggle-group>\n            </div>\n        </section>\n      `\n  }),\n  args: {\n    status: {\n      title: \'Sample Status Title\',\n      type: \'success\',\n      text: \'Sample text for the status message.\'\n    }\n  }\n}',...statusType.parameters?.docs?.source}}},statusTechnicalText.parameters={...statusTechnicalText.parameters,docs:{...statusTechnicalText.parameters?.docs,source:{originalSource:"{\n  parameters: {\n    docs: {\n      description: {\n        story: 'This example shows how to include `technicalText` and `date` in the `NgxStatusComponent`. An info icon will appear, and clicking it will show the technical details in a dialog.'\n      }\n    }\n  },\n  render: args => ({\n    props: {\n      ...args\n    },\n    template: `\n        <section class=\"status\">\n            <ngx-status [status]=\"status\"></ngx-status>\n        </section>\n      `\n  }),\n  args: {\n    status: {\n      title: 'Error Status',\n      type: 'danger',\n      date: new Date(),\n      text: 'This is an error message.',\n      technicalText: 'Detailed technical information about the error.'\n    }\n  }\n}",...statusTechnicalText.parameters?.docs?.source}}},statusActions.parameters={...statusActions.parameters,docs:{...statusActions.parameters?.docs,source:{originalSource:"{\n  parameters: {\n    docs: {\n      description: {\n        story: 'This example demonstrates how to add actions to the `NgxStatusComponent`. Each action can be triggered with a callback.'\n      }\n    }\n  },\n  render: args => ({\n    props: {\n      ...args\n    },\n    template: `\n        <section class=\"status\">\n          <ngx-status [status]=\"status\"></ngx-status>\n        </section>\n      `\n  }),\n  args: {\n    status: {\n      title: 'Sample Status Title',\n      type: 'info',\n      text: 'Message with multiple actions.',\n      actions: [{\n        label: 'Action 1',\n        callback: (): void => alert('Action 1 executed.')\n      }, {\n        label: 'Action 2',\n        callback: (): void => alert('Action 2 executed.')\n      }]\n    }\n  }\n}",...statusActions.parameters?.docs?.source}}},statusDuration.parameters={...statusDuration.parameters,docs:{...statusDuration.parameters?.docs,source:{originalSource:"{\n  parameters: {\n    docs: {\n      description: {\n        story: 'This example demonstrates setting a custom `duration` for the `NgxStatusComponent`. By default, the duration is 30 seconds for danger types and 8 seconds for other types.'\n      }\n    }\n  },\n  render: args => ({\n    props: {\n      ...args\n    },\n    template: `\n        <section class=\"status\">\n            <ngx-status [status]=\"status\"></ngx-status>\n        </section>\n      `\n  }),\n  args: {\n    status: {\n      title: 'Sample Status Title',\n      type: 'info',\n      text: 'Message with custom duration.',\n      duration: 3000 // Duration in milliseconds\n    }\n  }\n}",...statusDuration.parameters?.docs?.source}}},statusCustomCssClass.parameters={...statusCustomCssClass.parameters,docs:{...statusCustomCssClass.parameters?.docs,source:{originalSource:"{\n  parameters: {\n    docs: {\n      description: {\n        story: 'This example shows how to apply custom CSS styles to the `NgxStatusComponent` using the `className` property.'\n      }\n    }\n  },\n  render: args => ({\n    props: {\n      ...args\n    },\n    template: `\n        <section class=\"status\">\n            <ngx-status [status]=\"status\"></ngx-status>\n        </section>\n      `\n  }),\n  args: {\n    status: {\n      title: 'Sample Status Title',\n      type: 'info',\n      text: 'Message with custom CSS class.',\n      className: 'my-custom-css-class'\n    }\n  }\n}",...statusCustomCssClass.parameters?.docs?.source}}}}}]);